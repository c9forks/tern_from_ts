{
  "CKEDITOR": {
    "disableAutoInline": "bool",
    "disableObjectResizing": "bool",
    "replaceClass": "string",
    "skinName": "string",
    "ALT": "number",
    "CTRL": "number",
    "DIALOG_RESIZE_BOTH": "number",
    "DIALOG_RESIZE_HEIGHT": "number",
    "DIALOG_RESIZE_NONE": "number",
    "DIALOG_RESIZE_WIDTH": "number",
    "ELEMENT_MODE_APPENDTO": "number",
    "ELEMENT_MODE_INLINE": "number",
    "ELEMENT_MODE_NONE": "number",
    "ELEMENT_MODE_REPLACE": "number",
    "END": "number",
    "ENTER_BR": "number",
    "ENTER_P": "number",
    "EVENT_PHASE_AT_TARGET": "number",
    "EVENT_PHASE_BUBBLING": "number",
    "EVENT_PHASE_CAPTURING": "number",
    "LINEUTILS_AFTER": "number",
    "LINEUTILS_BEFORE": "number",
    "LINEUTIS_INSIDE": "number",
    "NODE_COMMENT": "number",
    "NODE_DOCUMENT": "number",
    "NODE_DOCUMENT_FRAGMENT": "number",
    "NODE_ELEMENT": "number",
    "NODE_TEXT": "number",
    "SELECTION_ELEMENT": "number",
    "SELECTION_NONE": "number",
    "SELECTION_TEXT": "number",
    "SHIFT": "number",
    "SHRINK_ELEMENT": "number",
    "SHRINK_TEXT": "number",
    "START": "number",
    "TRISTATE_DISABLED": "number",
    "TRISTATE_OFF": "number",
    "TRISTATE_ON": "number",
    "UI_BUTTON": "string",
    "UI_MENUBUTTON": "string",
    "UI_PANEL": "string",
    "UI_PANELBUTTON": "string",
    "UI_RICHCOMBO": "string",
    "UI_SEPARATOR": "string",
    "basePath": "string",
    "currentInstance": "editor",
    "document": "dom.document",
    "instances": "[editor]",
    "loadFullCoreTimeout": "number",
    "revision": "string",
    "rnd": "number",
    "status": "string",
    "timestamp": "string",
    "version": "string",
    "add": "fn(editor: editor)",
    "addCss": "fn(css: string)",
    "addTemplate": "fn(name: string, source: string) -> template",
    "appendTo": "fn(element: string, config?: config, data?: string) -> editor",
    "domReady": "fn()",
    "editorConfig": "fn(config: config)",
    "getCss": "fn() -> string",
    "getTemplate": "fn(name: string) -> template",
    "getUrl": "fn(resource: string) -> string",
    "inline": "fn(element: string, instanceConfig?: config) -> editor",
    "inlineAll": "fn()",
    "loadFullCore": "fn()",
    "replace": "fn(element: string, config?: config) -> editor",
    "replaceAll": "fn(className?: string)",
    "dom": {
      "comment": {
        "!type": "fn(comment: string, ownerDocument?: document)",
        "prototype": {
          "type": "number",
          "getOuterHtml": "fn() -> string"
        }
      },
      "document": {
        "!type": "fn(domDocument: Object)",
        "prototype": {
          "type": "number",
          "appendStyleSheet": "fn(cssFileUrl: string)",
          "appendStyleText": "fn(cssStyleText: string) -> Object",
          "createElement": "fn(name: string, attribsAndStyles?: ?) -> element",
          "createText": "fn(text: string) -> element",
          "find": "fn(selector: string) -> nodeList",
          "findOne": "fn(selector: string) -> element",
          "focus": "fn()",
          "getActive": "fn() -> element",
          "getBody": "fn() -> element",
          "getByAddress": "fn(address: [?], normalized?: bool) -> node",
          "getById": "fn(elementId: string) -> element",
          "getDocumentElement": "fn() -> element",
          "getElementsByTag": "fn(tagName: string) -> nodeList",
          "getHead": "fn() -> element",
          "getSelection": "fn() -> selection",
          "getWindow": "fn() -> window",
          "write": "fn(html: string)"
        }
      },
      "documentFragment": {
        "!type": "fn(nodeOrDoc: Object)",
        "prototype": {
          "type": "number",
          "insertAfterNode": "fn(node: node)"
        }
      },
      "domObject": {
        "!type": "fn(nativeDomObject: Object)",
        "prototype": {
          "$": "HTMLElement",
          "clearCustomData": "fn()",
          "equals": "fn(object: ?) -> bool",
          "getCustomData": "fn(key: string) -> ?",
          "getPrivate": "fn() -> ?",
          "getUniqueId": "fn() -> number",
          "removeAllListeners": "fn()",
          "removeCustomData": "fn(key: string) -> Object",
          "setCustomData": "fn(key: string, value: Object) -> domObject"
        }
      },
      "element": {
        "!type": "fn(element: string, ownerDocument?: document)",
        "clearAllMarkers": "fn(database: Object) -> Object",
        "clearMarkers": "fn(database: Object, element: Object, removeFromDatabase: Object)",
        "createFromHtml": "fn(html: string) -> element",
        "get": "fn(element: string) -> element",
        "setMarker": "fn(database: Object, element: Object, name: Object, value: Object) -> domObject",
        "prototype": {
          "type": "number",
          "addClass": "fn(className: string)",
          "append": "fn(node: node, toStart?: bool) -> node",
          "appendBogus": "fn(force: bool)",
          "appendHtml": "fn(html: string)",
          "appendText": "fn(text: string) -> node",
          "breakParent": "fn(parent: element)",
          "contains": "fn(node: node) -> bool",
          "copyAttributes": "fn(dest: element, skipAttributes: Object)",
          "data": "fn(name: string) -> string",
          "disableContextMenu": "fn()",
          "find": "fn(selector: string) -> nodeList",
          "findOne": "fn(selector: string) -> element",
          "focus": "fn(defer?: bool)",
          "focusNext": "fn(ignoreChildren?: bool, indexToUse?: number)",
          "focusPrevious": "fn(ignoreChildren?: bool, indexToUse?: number)",
          "forEach": "fn(callback: fn(node: node), type?: number, skipRoot?: bool)",
          "getAttribute": "fn(name: string) -> string",
          "getBogus": "fn() -> Object",
          "getChild": "fn(indices: number) -> node",
          "getChildCount": "fn() -> number",
          "getChildren": "fn() -> nodeList",
          "getClientRect": "fn() -> ?",
          "getComputedStyle": "fn(propertyName: string) -> string",
          "getDirection": "fn(useComputed: bool) -> string",
          "getDocumentPosition": "fn(refDocument: document) -> position",
          "getDtd": "fn() -> ?",
          "getEditor": "fn() -> editor",
          "getElementsByTag": "fn(tagName: string) -> nodeList",
          "getFirst": "fn(evaluator?: Function) -> node",
          "getFrameDocument": "fn() -> document",
          "getHtml": "fn() -> string",
          "getId": "fn() -> string",
          "getLast": "fn(evaluator?: Function) -> node",
          "getName": "fn() -> string",
          "getNameAtt": "fn() -> string",
          "getOuterHtml": "fn() -> string",
          "getPositionedAncestor": "fn() -> element",
          "getSize": "fn(type: string, isBorderBox: bool)",
          "getStyle": "fn(name: string) -> string",
          "getTabIndex": "fn() -> number",
          "getText": "fn() -> string",
          "getValue": "fn() -> string",
          "getWindow": "fn() -> window",
          "hasAttributes": "fn() -> bool",
          "hasAttribute": "fn(name: string) -> bool",
          "hasClass": "fn(className: string) -> bool",
          "hide": "fn()",
          "is": "fn(name: [string]) -> bool",
          "isBlockBoundary": "fn(customNodeNames: Object) -> bool",
          "isEditable": "fn(textCursor?: bool) -> bool",
          "isEmptyInlineRemoveable": "fn() -> bool",
          "isIdentical": "fn(otherElement: element) -> bool",
          "isVisible": "fn() -> bool",
          "mergeSiblings": "fn(inlineOnly?: bool)",
          "moveChildren": "fn(target: element, toStart?: bool)",
          "removeAttribute": "fn(name: string)",
          "removeAttributes": "fn(attributes?: [string])",
          "removeClass": "fn(className: string)",
          "removeStyle": "fn(name: string)",
          "renameNode": "fn(newTag: string)",
          "scrollIntoParent": "fn(parent: element, alignToTop: bool, hscroll: bool)",
          "scrollIntoView": "fn(alignToTop?: bool)",
          "setAttribute": "fn(name: string, value: string) -> element",
          "setAttributes": "fn(attributesPairs: Object) -> element",
          "setHtml": "fn(html: string) -> string",
          "setOpacity": "fn(opacity: number)",
          "setSize": "fn(type: string, size: number, isBorderBox: bool)",
          "setState": "fn(state: number, base?: Object, useAria?: Object)",
          "setStyle": "fn(name: string, value: string) -> element",
          "setStyles": "fn(stylesPair: Object) -> element",
          "setText": "fn(text: string) -> string",
          "setValue": "fn(value: string) -> element",
          "show": "fn()",
          "unselectable": "fn()"
        }
      },
      "elementPath": {
        "!type": "fn(startNode: element, root: element)",
        "prototype": {
          "block": "element",
          "blockLimit": "element",
          "root": "element",
          "elements": "[element]",
          "compare": "fn(otherPath: elementPath) -> bool",
          "contains": "fn(query: string, excludeRoot: bool, fromTop: bool) -> element",
          "isContextFor": "fn(tag: string) -> bool",
          "direction": "fn() -> string"
        }
      },
      "range": {
        "!type": "fn(root: element)",
        "prototype": {
          "startContainer": "?",
          "startOffset": "number",
          "endContainer": "?",
          "endOffset": "number",
          "collapsed": "bool",
          "isDocRoot": "bool",
          "document": "document",
          "root": "element",
          "clone": "fn() -> range",
          "collapse": "fn(toStart?: bool) -> Boolean",
          "cloneContents": "fn() -> documentFragment",
          "deleteContents": "fn(mergeThen?: bool)",
          "extractContents": "fn(mergeThen?: bool) -> documentFragment",
          "createBookmark": "fn(serializable: bool) -> Object",
          "createBookmark2": "fn(normalized: bool) -> Object",
          "createIterator": "fn() -> iterator",
          "moveToBookmark": "fn(bookmark: Object)",
          "getBoundaryNodes": "fn() -> ret",
          "getCommonAncestor": "fn(includeSelf: bool, ignoreTextNode: bool) -> element",
          "optimize": "fn()",
          "optimizeBookmark": "fn()",
          "trim": "fn(ignoreStart?: bool, ignoreEnd?: bool)",
          "enlarge": "fn(unit: number, excludeBrs?: bool)",
          "shrink": "fn(mode: number, selectContents: bool)",
          "insertNode": "fn(node: node)",
          "moveToPosition": "fn(node: node, position: Object)",
          "moveToRange": "fn(range: range)",
          "selectNodeContents": "fn(node: node)",
          "setStart": "fn(startNode: node, startOffset: number)",
          "setEnd": "fn(endNode: node, endOffset: number)",
          "setStartAfter": "fn(node: node)",
          "setStartBefore": "fn(node: node)",
          "setStartAt": "fn(node: node, position: number)",
          "setEndAt": "fn(node: node, position: number)",
          "fixBlock": "fn(isStart: bool, blockTag: Object) -> Object",
          "splitBlock": "fn(blockTag: Object) -> Object",
          "splitElement": "fn(toSplit: element) -> element",
          "removeEmptyBlocksAtEnd": "fn(atEnd: bool)",
          "startPath": "fn() -> elementPath",
          "endPath": "fn() -> elementPath",
          "checkBoundaryOfElement": "fn(element: element, checkType: number) -> bool",
          "checkStartOfBlock": "fn() -> bool",
          "checkEndOfBlock": "fn() -> bool",
          "getPreviousNode": "fn(evaluator: Function, guard: Function, boundary: element) -> element",
          "getNextNode": "fn(evaluator: Function, guard: Function, boundary: element) -> element",
          "checkReadOnly": "fn() -> bool",
          "moveToElementEditablePosition": "fn(element: element, isMoveToEnd: bool) -> bool",
          "movetoClosestEditablePosition": "fn(element: element, isMoveToEnd: bool) -> bool",
          "moveToElementEditStart": "fn(target: Object) -> bool",
          "moveToElementEditEnd": "fn(target: Object) -> bool",
          "getEnclosedNode": "fn() -> node",
          "getTouchedStartNode": "fn() -> node",
          "getTouchedEndNode": "fn() -> node",
          "getNextEditableNode": "fn() -> Object",
          "getPreviousEditableNode": "fn() -> Object",
          "scrollIntoView": "fn()"
        }
      },
      "rangeListIterator": {},
      "selection": {
        "!type": "fn(target: document)",
        "prototype": {
          "document": "document",
          "isFake": "bool",
          "isLocked": "bool",
          "rev": "number",
          "root": "element",
          "createBookmarks": "fn(serializable: Object) -> [?]",
          "createBookmarks2": "fn(normalized?: Object) -> [?]",
          "fake": "fn(element: element)",
          "getCommonAncestor": "fn() -> element",
          "getNative": "fn() -> Object",
          "getRanges": "fn(onlyEditables?: bool) -> [?]",
          "getSelectedElement": "fn() -> element",
          "getSelectedText": "fn() -> string",
          "getStartElement": "fn() -> element",
          "getType": "fn() -> number",
          "isHidden": "fn() -> bool",
          "lock": "fn()",
          "removeAllRanges": "fn()",
          "reset": "fn()",
          "scrollIntoView": "fn()",
          "selectBookmarks": "fn(bookmarks: [?]) -> selection",
          "selectElement": "fn(element: element)",
          "selectRanges": "fn(ranges: [?])",
          "unlock": "fn(restore: Object)"
        }
      },
      "rangeList": {
        "!type": "fn(ranges: [range])",
        "prototype": {
          "createIterator": "fn() -> rangeListIterator",
          "createBokmark": "fn(serializable: bool) -> [Object]",
          "createBookmark2": "fn(normalized: bool) -> [Object]",
          "moveToBookmark": "fn(bookmarks: [Object])"
        }
      },
      "iterator": {
        "!type": "fn(range: range)",
        "prototype": {
          "getNextParagraph": "fn(blockTag?: string) -> element",
          "activeFilter": "filter",
          "enforceRealBlocks": "Boolean",
          "enlargeBr": "Boolean",
          "filter": "filter"
        }
      },
      "node": {
        "!type": "fn(domNode: Node)",
        "prototype": {
          "appendTo": "fn(element: element) -> element",
          "clone": "fn(includeChildren: bool, cloneId: bool) -> node",
          "hasPrevious": "fn() -> bool",
          "hasNext": "fn() -> bool",
          "insertAfter": "fn(node: node) -> node",
          "insertBefore": "fn(node: node) -> node",
          "insertBeforeMe": "fn(node: node) -> node",
          "getAddress": "fn(normalized: bool) -> [Object]",
          "getDocument": "fn() -> document",
          "getIndex": "fn(normalized?: bool) -> number",
          "getNextSourceNode": "fn(startFromSibling: Object, nodeType: Object, guard: Object)",
          "getPreviousSourceNode": "fn(startFromSibling: Object, nodeType: Object, guard: Object)",
          "getPrevious": "fn(evaluator?: Function) -> node",
          "getNext": "fn(evaluator?: Function) -> node",
          "getParent": "fn(allowFragmentParent?: bool) -> element",
          "getParents": "fn(closerFirst?: bool) -> [node]",
          "getCommonAncestor": "fn(node: Object)",
          "getPosition": "fn(otherNode: Object)",
          "getAscendant": "fn(reference: string, includeSelf?: bool) -> node",
          "hasAscendant": "fn(name: Object, includeSelf: ?) -> bool",
          "move": "fn(preserveChildren?: bool) -> node",
          "replace": "fn(nodeToReplace: node)",
          "trim": "fn()",
          "ltrim": "fn()",
          "rtrim": "fn()",
          "isReadOnly": "fn() -> bool"
        }
      },
      "nodeList": {
        "!type": "fn(nativeList: Object)",
        "prototype": {
          "count": "fn() -> number",
          "getItem": "fn(index: number) -> node"
        }
      },
      "event": {
        "!type": "fn(domEvent: Event)",
        "prototype": {
          "getKey": "fn() -> number",
          "getKeystroke": "fn() -> number",
          "preventDefault": "fn(stopPropagation: bool)",
          "stopPropagation": "fn()",
          "getTarget": "fn() -> node",
          "getPhase": "fn() -> number",
          "getPhaseOffset": "fn() -> position",
          "on": "fn(eventName: string, listenerFunction: fn(eventInfo: eventInfo), scopeObj?: Object, listenerData?: Object, priority?: number) -> Object"
        }
      },
      "position": {
        "x": "number",
        "y": "number"
      },
      "widthAndHeight": {
        "width": "number",
        "height": "number"
      },
      "text": {
        "!type": "fn(text: Text, ownerDocument?: document)",
        "prototype": {
          "type": "number",
          "getLength": "fn() -> number",
          "getText": "fn() -> string",
          "setText": "fn(text: string)",
          "split": "fn(offset: number) -> text",
          "substring": "fn(indexA: number, indexB: number)"
        }
      },
      "window": {
        "!type": "fn(domWindow: Object)",
        "prototype": {
          "focus": "fn()",
          "getViewPaneSize": "fn() -> widthAndHeight",
          "getScrollPosition": "fn() -> position",
          "getFrame": "fn() -> element"
        }
      },
      "walker": {
        "!type": "fn(range: range)",
        "prototype": {
          "end": "fn()",
          "next": "fn() -> node",
          "previous": "fn() -> node",
          "checkForward": "fn() -> bool",
          "checkBackward": "fn() -> bool",
          "lastForward": "fn() -> node",
          "lastBackward": "fn() -> node",
          "reset": "fn()",
          "blockBoundary": "fn(customNodeNames: Object) -> Function",
          "listItemBoundary": "fn() -> Function",
          "bookmark": "fn(contentOnly?: bool, isReject?: bool) -> Function",
          "whitespaces": "fn(isReject?: bool) -> Function",
          "invisible": "fn(isReject?: bool) -> Function",
          "nodeType": "fn(type: number, isReject?: bool) -> Function",
          "bogus": "fn(isReject?: bool) -> Function",
          "temp": "fn(isReject?: bool) -> Function",
          "ignored": "fn(isReject?: bool) -> Function",
          "editable": "fn(isReject?: bool) -> Function"
        }
      }
    },
    "ajax": {
      "load": "fn(url: string, callback?: Function) -> string",
      "loadXml": "fn(url: string, callback?: Function) -> xml"
    },
    "xml": {},
    "command": {
      "!type": "fn(editor: editor, commandDefinition: commandDefinition)",
      "prototype": {
        "contextSensitive": "bool",
        "editorFocus": "bool",
        "modes": "?",
        "previousState": "number",
        "state": "number",
        "uiItems": "[?]",
        "checkAllowed": "fn(noCache: bool) -> bool",
        "disable": "fn()",
        "enable": "fn()",
        "exec": "fn(data?: Object) -> bool",
        "refresh": "fn(editor: editor, path: dom.elementPath)",
        "setState": "fn(newState: number) -> bool",
        "toggleState": "fn()"
      }
    },
    "focusManager": {},
    "keystrokeHandler": {},
    "toolbarGroups": {
      "name": "string",
      "groups": "[string]"
    },
    "config": {
      "startupMode": "string",
      "removeButtons": "string",
      "removePlugins": "string",
      "toolbar": "?",
      "toolbarGroups": "[toolbarGroups]",
      "skin": "string",
      "language": "string",
      "plugins": "string",
      "font_names": "string",
      "font_defaultLabel": "string",
      "fontSize_sizes": "string",
      "fontSize_defaultLabel": "string",
      "colorButton_enableMore": "bool",
      "colorButton_colors": "string",
      "startupFocus": "bool",
      "on": "?"
    },
    "feature": {},
    "style": {},
    "editable": {},
    "menu": {
      "!type": "fn()",
      "prototype": {
        "add": "fn(item: ?)",
        "addListener": "fn(listenerFn: fn(startElement: dom.element, selection: dom.selection, path: dom.elementPath))",
        "hide": "fn(returnFocus?: bool)",
        "removeAll": "fn()",
        "show": "fn(offsetParent: dom.element, corner?: number, offsetX?: number, offsetY?: number)"
      }
    },
    "plugins": {
      "contextMenu": {
        "!type": "fn(editor: editor)",
        "prototype": {
          "addTarget": "fn(element: dom.element, nativeContextMenuOnCtrl?: bool)",
          "open": "fn(offsetParent: dom.element, corner?: number, offsetX?: number, offsetY?: number)"
        }
      },
      "link": {
        "emptyAnchorFix": "bool",
        "fakeAnchor": "bool",
        "synAnchorSelector": "bool",
        "getEditorAnchors": "fn(editor: editor) -> [dom.element]",
        "getSelectedLink": "fn(editor: editor) -> dom.elementPath",
        "tryRestoreFakeAnchor": "fn(editor: editor, element: dom.element) -> dom.element"
      },
      "widget": {
        "IWidget": {
          "allowedContent": "?",
          "button": "string",
          "contentForms": "Object",
          "contentTransformations": "Object",
          "data": "Function",
          "defaults": "Object",
          "dialog": "String",
          "downcast": "?",
          "downcasts": "Object",
          "draggable": "bool",
          "editables": "Object",
          "init": "Function",
          "inline": "Boolean",
          "insert": "Function",
          "mask": "Boolean",
          "name": "String",
          "parts": "Object",
          "pathName": "string",
          "requiredContent": "?",
          "styleToAllowedContentRules": "Function",
          "styleableElements": "string",
          "template": "string",
          "upcast": "?",
          "upcasts": "Object",
          "addClass": "fn(className: string)",
          "applyStyle": "fn(style: ?)",
          "capture": "fn()",
          "checkStyleActive": "fn(style: ?) -> bool",
          "define": "fn(name: string, meta: ?)",
          "destroy": "fn(offline?: bool)",
          "destroyEditable": "fn(editableName: string, offline?: bool)",
          "edit": "fn() -> bool",
          "fire": "fn(eventName: string, data?: Object, editor?: editor) -> ?",
          "fireOnce": "fn(eventName: string, data?: Object, editor?: editor) -> ?",
          "focus": "fn()",
          "getClasses": "fn() -> Object",
          "hasClass": "fn(className: string, Whether: bool)",
          "hasListeners": "fn(eventName: string) -> bool",
          "initEditable": "fn(editableName: string, definition: ?) -> bool",
          "isInited": "fn() -> bool",
          "isReady": "fn() -> bool",
          "on": "fn(eventName: string, listenerFunction: Function, scopeObj: Object, listenerData: Object, priority: number) -> Object",
          "once": "fn()",
          "removeAllListeners": "fn()",
          "removeClass": "fn(className: string)",
          "removeListener": "fn(evnetName: string, listenerFunction: Function)",
          "removeStyle": "fn(style: ?)",
          "setData": "fn(keyOrData: ?, value?: Object) -> IWidget",
          "setFocused": "fn(selected: bool) -> IWidget",
          "setSelected": "fn(selected: bool) -> IWidget",
          "toFeature": "fn() -> ?",
          "updateDragHandlerPosition": "fn()"
        },
        "IWidgetDefinition": {
          "allowedContent": "?",
          "button": "string",
          "contentForms": "Object",
          "contentTransformations": "Object",
          "data": "Function",
          "defaults": "Object",
          "dialog": "String",
          "downcast": "?",
          "downcasts": "Object",
          "draggable": "bool",
          "edit": "Function",
          "editables": "Object",
          "init": "Function",
          "inline": "Boolean",
          "insert": "Function",
          "mask": "Boolean",
          "name": "String",
          "parts": "Object",
          "pathName": "string",
          "requiredContent": "?",
          "styleToAllowedContentRules": "Function",
          "styleableElements": "string",
          "template": "string",
          "upcast": "?",
          "upcasts": "Object",
          "toFeature": "fn() -> ?"
        },
        "repository": {
          "prototype": {
            "add": "fn(name: string, widgetDef: IWidgetDefinition)",
            "addUpcastCallback": "fn(callback: Function)",
            "capture": "fn()",
            "checkSelection": "fn()",
            "checkWidgets": "fn(options?: ?)",
            "define": "fn(name: string, meta?: ?)",
            "del": "fn(widget: IWidget)",
            "destroy": "fn(widget: IWidget, offline?: bool)",
            "destroyAll": "fn(offline?: bool)",
            "finalizeCreation": "fn(container: ?)",
            "fire": "fn(eventName: string, data: Object, editor: editor) -> ?",
            "getByElement": "fn(element: ?, checkWrapperOnly: bool) -> IWidget",
            "hasListeners": "fn(eventName: string) -> bool",
            "initOn": "fn(element: ?, widgetDef?: IWidgetDefinition, startupData?: Object) -> IWidget",
            "initOnAll": "fn(container?: ?) -> [IWidget]",
            "on": "fn(eventName: string, listenerFunction: Function, scopeObj?: Object, listenerData?: Object, priority?: number) -> Object",
            "once": "fn()",
            "parseElementClasses": "fn(classes: string) -> Object",
            "removeAllListeners": "fn(eventName: string, listenerFunction: Function)",
            "wrapElement": "fn(element: ?, widgetName?: string) -> ?"
          }
        }
      },
      "IPluginDefinition": {
        "hidpi": "bool",
        "lang": "?",
        "requires": "?",
        "afterInit": "fn(editor: editor) -> ?",
        "beforeInit": "fn(editor: editor) -> ?",
        "init": "fn(editor: editor) -> ?",
        "onLoad": "fn() -> ?"
      },
      "add": "fn(name: string, definition?: IPluginDefinition)",
      "addExternal": "fn(name: string, path: string, fileName: string)",
      "get": "fn(name: string) -> ?",
      "getFilePath": "fn(name: string) -> string",
      "getPath": "fn(name: string) -> string",
      "load": "fn(name: string, callback: string, scope: ?)",
      "setLang": "fn(pluginName: string, languageCode: string, languageEntries: ?)"
    },
    "editor": {
      "!type": "fn(instanceConfig?: Object, element?: dom.element, mode?: number)",
      "prototype": {
        "activeEnterMode": "number",
        "activeFilter": "filter",
        "activeShiftEnterMode": "number",
        "blockless": "bool",
        "config": "config",
        "container": "dom.element",
        "contextMenu": "plugins.contextMenu",
        "dataProcessor": "dataProcessor",
        "document": "dom.document",
        "element": "dom.element",
        "elementMode": "number",
        "enterMode": "number",
        "filter": "filter",
        "focusManager": "focusManager",
        "id": "string",
        "keystrokeHandler": "keystrokeHandler",
        "lang": "?",
        "langCode": "string",
        "mode": "string",
        "name": "string",
        "plugins": "Object",
        "readOnly": "bool",
        "shiftEnterMode": "number",
        "status": "string",
        "tabIndex": "number",
        "templates": "Object",
        "title": "?",
        "toolbar": "Object",
        "ui": "ui",
        "widgets": "plugins.widget.repository",
        "window": "dom.window",
        "addCommand": "fn(commandName: string, commandDefinition: commandDefinition)",
        "addFeature": "fn(feature: feature) -> bool",
        "addMenuGroup": "fn(name: string, order?: number)",
        "addMenuItem": "fn(name: string, definition?: ?)",
        "addMenuItems": "fn(definitions: [?])",
        "addMode": "fn(mode: string, exec: fn())",
        "addRemoveFormatFilter": "fn(func: Function)",
        "applyStyle": "fn(style: style)",
        "attachStyleStateChange": "fn(style: style, callback: Function)",
        "checkDirty": "fn() -> bool",
        "createFakeElement": "fn(realElement: Object, className: Object, realElementType: Object, isResizable: Object)",
        "createFakeParserElement": "fn(realElement: Object, className: Object, realElementType: Object, isResizable: Object)",
        "createRange": "fn() -> dom.range",
        "destroy": "fn(noUpdate?: bool)",
        "editable": "fn(elementOrEditable: dom.element)",
        "elementPath": "fn(startNode?: dom.node) -> dom.elementPath",
        "execCommand": "fn(commandName: string, data?: Object) -> bool",
        "focus": "fn()",
        "forceNextSelectionCheck": "fn()",
        "getClipboardData": "fn(options: Object, callback: Function)",
        "getColorFromDialog": "fn(callback: Function, scope?: Object)",
        "getCommand": "fn(commandName: string) -> command",
        "getData": "fn(noEvents?: Object) -> string",
        "getMenuItem": "fn(name: string) -> Object",
        "getResizable": "fn(forContents: bool) -> dom.element",
        "getSelection": "fn(forceRealSelection?: bool) -> dom.selection",
        "getSnapshot": "fn() -> string",
        "getStylesSet": "fn(callback: Function)",
        "getUiColor": "fn() -> string",
        "insertElement": "fn(element: dom.element)",
        "insertHtml": "fn(html: string, mode?: string)",
        "insertText": "fn(text: string)",
        "loadSnapshot": "fn(snapshot: Object)",
        "lockSelection": "fn(sel?: dom.selection) -> bool",
        "openDialog": "fn(dialogName: string, callback: Function) -> dialog",
        "popup": "fn(url: string, width?: number, height?: number, options?: string)",
        "removeMenuItem": "fn(name: string)",
        "removeStyle": "fn(style: style)",
        "resetDirty": "fn()",
        "resetUndo": "fn()",
        "resize": "fn(width: number, height: number, isContentHeight?: bool, resizeInner?: bool)",
        "restoreRealElement": "fn(fakeElement: Object) -> dom.element",
        "selectionChange": "fn(checkNow?: bool)",
        "setActiveEnterMode": "fn(enterMode: number, shiftEnterMode: number)",
        "setActiveFilter": "fn(filter: filter)",
        "setData": "fn(data: string, options?: ?)",
        "setKeystroke": "fn(keystroke: number, behavior?: string)",
        "setMode": "fn(newMode: string, callback: Function)",
        "setReadOnly": "fn(isReadOnly?: bool)",
        "setUiColor": "fn(color: string)",
        "unlockSelection": "fn(restore?: bool)",
        "updateElement": "fn()"
      }
    },
    "eventInfo": {
      "data": "?",
      "editor": "editor",
      "listenerData": "?",
      "name": "string",
      "sender": "?",
      "cancel": "fn()",
      "removeListener": "fn()",
      "stop": "fn()"
    },
    "filter": {
      "prototype": {}
    },
    "template": {},
    "dataProcessor": {
      "toDataFormat": "fn(html: string, fixForBody: string)",
      "toHtml": "fn(data: string, fixForBody?: string)"
    },
    "event": {
      "!type": "fn()",
      "implementOn": "fn(targetObject: Object)",
      "prototype": {
        "useCapture": "bool",
        "capture": "fn()",
        "define": "fn(name: string, meta: Object)",
        "fire": "fn(eventName: string, data?: Object, editor?: editor) -> ?",
        "fireOnce": "fn(eventName: string, data?: Object, editor?: editor) -> ?",
        "hasListeners": "fn(eventName: string) -> bool",
        "on": "fn(eventName: string, listenerFunction: fn(eventInfo: eventInfo), scopeObj?: Object, listenerData?: Object, priority?: number)",
        "once": "fn(eventName: string, listenerFunction: fn(eventInfo: eventInfo), scopeObj?: Object, listenerData?: Object, priority?: number)",
        "removeAllListeners": "fn()",
        "removeListener": "fn(eventName: string, listenerFunction: fn(eventInfo: eventInfo))"
      }
    },
    "commandDefinition": {
      "async": "bool",
      "canUndo": "bool",
      "context": "bool",
      "contextSensitive": "bool",
      "editorFocus": "bool",
      "modes": "Object",
      "startDisabled": "bool",
      "exec": "fn(editor: editor, data?: Object) -> bool",
      "refresh": "fn(editor: editor, path: dom.elementPath)"
    },
    "dtd": {
      "prototype": {}
    },
    "ui": {
      "!type": "fn(editor: editor)",
      "prototype": {
        "add": "fn(name: string, type: Object, definition: Object)",
        "addButton": "fn(name: string, definition: dialog.definition.button)",
        "addHandler": "fn(type: Object, handler: Object)"
      }
    },
    "dialog": {
      "definition": {
        "button": {
          "disabled": "bool",
          "label": "string"
        },
        "uiElement": {
          "align": "string",
          "className": "string",
          "commit": "Function",
          "id": "string",
          "onHide": "Function",
          "onLoad": "Function",
          "requiredcontent": "?",
          "setup": "Function",
          "style": "string",
          "title": "string",
          "type": "string"
        }
      },
      "addFocusable": "fn(element: CKEDITOR.dom.element, index: number)",
      "IDialogDefinition": {
        "buttons": "[?]",
        "contents": "[?]",
        "height": "number",
        "minHeight": "number",
        "minWidth": "number",
        "onCancel": "Function",
        "onLoad": "Function",
        "onOk": "Function",
        "onShow": "Function",
        "resizable": "number",
        "title": "string",
        "width": "number"
      },
      "add": "fn(name: string, path: string)",
      "addIframe": "fn(name: string, title: string, minWidth: number, minHeight: number, onContentLoad: Function, userDefinition: ?)",
      "addUIElement": "fn(typeName: string, builder: Function)",
      "cancelButton": "fn()",
      "exists": "fn(name: string)",
      "getCurrent": "fn()",
      "isTabEnabled": "fn(editor: editor, dialogName: string, tabName: string) -> bool",
      "okButton": "fn()"
    },
    "htmlParser": {
      "basicWriter": {
        "!type": "fn()",
        "prototype": {
          "openTag": "fn(tagName: string, attributes: Object)",
          "openTagClose": "fn(tagName: string, isSelfClose: bool)",
          "attribute": "fn(attName: string, attValue: string)",
          "closeTag": "fn(tagName: string)",
          "text": "fn(text: string)",
          "comment": "fn(comment: string)",
          "write": "fn(data: string)",
          "reset": "fn()",
          "getHtml": "fn(reset: bool) -> string"
        }
      },
      "node": {
        "!type": "fn()",
        "prototype": {
          "remove": "fn(preserveChildren?: bool) -> node",
          "replaceWith": "fn(node: node)",
          "insertAfter": "fn(node: node)",
          "insertBefore": "fn(node: node)",
          "getAscendant": "fn(condition: string) -> element",
          "wrapWith": "fn(wrapper: element) -> element",
          "getIndex": "fn() -> number"
        }
      },
      "filter": {
        "!type": "fn(rules?: filterRulesDefinition)",
        "prototype": {
          "id": "number",
          "elementNameRules": "filterRulesGroup",
          "attributeNameRules": "filterRulesGroup",
          "elementsRules": "Object",
          "attributesRules": "Object",
          "textRules": "filterRulesGroup",
          "commentRules": "filterRulesGroup",
          "rootRules": "filterRulesGroup",
          "addRules": "fn(rules: filterRulesDefinition, options?: number)",
          "applyTo": "fn(node: node)"
        }
      },
      "filterRulesDefinition": {},
      "filterRulesGroup": {
        "prototype": {
          "rules": "[Object]",
          "add": "fn(rule: Function, priority: number, options: Object)",
          "addMany": "fn(rules: [Object], priority: number, options: Object)",
          "findIndex": "fn(priority: number) -> number",
          "exec": "fn(currentValue: Object) -> Object",
          "execOnName": "fn(currentName: string) -> string"
        }
      },
      "cdata": {
        "!type": "fn(value: string)",
        "prototype": {
          "type": "number",
          "writeHtml": "fn(writer: basicWriter)"
        }
      },
      "comment": {
        "!type": "fn(value: string)",
        "prototype": {
          "type": "number",
          "filter": "fn(filter: filter) -> bool",
          "writeHtml": "fn(writer: basicWriter, filter: filter)"
        }
      },
      "element": {
        "!type": "fn(name: string, attributes: Object)",
        "prototype": {
          "name": "string",
          "attributes": "Object",
          "children": "[Object]",
          "type": "number",
          "add": "fn(node: node) -> number",
          "clone": "fn() -> element",
          "filter": "fn(filter: filter) -> bool",
          "filterChildren": "fn(filter: filter)",
          "writeHtml": "fn(writer: basicWriter, filter: filter)",
          "writeChildrenHtml": "fn(writer: basicWriter, filter: filter)",
          "replaceWithChildren": "fn()",
          "forEach": "fn(callback: fn(node: node, type?: number))",
          "getFirst": "fn(condition: string) -> node",
          "getHtml": "fn() -> string",
          "setHtml": "fn(html: string)",
          "getOuterHtml": "fn() -> string",
          "split": "fn(index: number) -> element",
          "removeClass": "fn(className: string)",
          "hasClass": "fn(className: string) -> bool"
        }
      },
      "fragment": {
        "!type": "fn()",
        "prototype": {
          "children": "[Object]",
          "parent": "Object",
          "type": "number",
          "fromHtml": "fn(fragmentHtml: string, parent?: element, fixingBlock?: string)",
          "add": "fn(node: node, index?: number)",
          "filter": "fn(filter: filter)",
          "filterChildren": "fn(filter: filter, filterRoot?: bool)",
          "writeHtml": "fn(writer: basicWriter, filter?: filter)",
          "writeChildrenHtml": "fn(writer: basicWriter, filter?: filter, filterRoot?: bool)",
          "forEach": "fn(callback: fn(node: node, type?: number), type?: number, skipRoot?: bool)"
        }
      },
      "cssStyle": {
        "!type": "fn(element: element)",
        "prototype": {
          "populate": "fn(obj: element)"
        }
      },
      "text": {
        "!type": "fn(value: string)",
        "prototype": {
          "type": "number",
          "filter": "fn(filter: filter) -> bool",
          "writeHtml": "fn(writer: basicWriter, filter?: filter)"
        }
      }
    },
    "tools": {
      "callFunction": "Function"
    }
  },
  "!name": "ckeditor.d.ts",
  "!define": {
    "ret": {
      "startNode": "node",
      "endNode": "node"
    }
  }
}
