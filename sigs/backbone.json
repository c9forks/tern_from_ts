{
  "Backbone": {
    "AddOptions": {
      "at": "number"
    },
    "HistoryOptions": {
      "pushState": "bool",
      "root": "string"
    },
    "NavigateOptions": {
      "trigger": "bool"
    },
    "RouterOptions": {
      "routes": "?"
    },
    "Silenceable": {
      "silent": "bool"
    },
    "Validable": {
      "validate": "bool"
    },
    "Waitable": {
      "wait": "bool"
    },
    "Parseable": {
      "parse": "?"
    },
    "PersistenceOptions": {
      "url": "string",
      "beforeSend": "fn(jqxhr: JQueryXHR)",
      "success": "fn(modelOrCollection?: ?, response?: ?, options?: ?)",
      "error": "fn(modelOrCollection?: ?, jqxhr?: JQueryXHR, options?: ?)"
    },
    "ModelSetOptions": {},
    "ModelFetchOptions": {},
    "ModelSaveOptions": {
      "patch": "bool"
    },
    "ModelDestroyOptions": {},
    "CollectionFetchOptions": {
      "reset": "bool"
    },
    "Events": {
      "prototype": {
        "on": "fn(eventName: string, callback?: Function, context?: ?) -> ?",
        "off": "fn(eventName?: string, callback?: Function, context?: ?) -> ?",
        "trigger": "fn(eventName: string, args: [?]) -> ?",
        "bind": "fn(eventName: string, callback: Function, context?: ?) -> ?",
        "unbind": "fn(eventName?: string, callback?: Function, context?: ?) -> ?",
        "once": "fn(events: string, callback: Function, context?: ?) -> ?",
        "listenTo": "fn(object: ?, events: string, callback: Function) -> ?",
        "listenToOnce": "fn(object: ?, events: string, callback: Function) -> ?",
        "stopListening": "fn(object?: ?, events?: string, callback?: Function) -> ?"
      }
    },
    "ModelBase": {
      "prototype": {
        "url": "?",
        "parse": "fn(response: ?, options?: ?) -> ?",
        "toJSON": "fn(options?: ?) -> ?",
        "sync": "fn(arg: [?]) -> JQueryXHR"
      }
    },
    "Model": {
      "extend": "fn(properties: ?, classProperties?: ?) -> ?",
      "!type": "fn(attributes?: ?, options?: ?)",
      "prototype": {
        "attributes": "?",
        "changed": "[?]",
        "cid": "string",
        "collection": "?",
        "defaults": "fn() -> ?",
        "id": "?",
        "idAttribute": "string",
        "validationError": "?",
        "urlRoot": "?",
        "initialize": "fn(attributes?: ?, options?: ?)",
        "fetch": "fn(options?: ModelFetchOptions) -> JQueryXHR",
        "get": "fn(attributeName: string) -> ?",
        "set": "fn(attributeName: string, value: ?, options?: ModelSetOptions) -> Model",
        "change": "fn() -> ?",
        "changedAttributes": "fn(attributes?: ?) -> [?]",
        "clear": "fn(options?: Silenceable) -> ?",
        "clone": "fn() -> Model",
        "destroy": "fn(options?: ModelDestroyOptions) -> ?",
        "escape": "fn(attribute: string) -> string",
        "has": "fn(attribute: string) -> bool",
        "hasChanged": "fn(attribute?: string) -> bool",
        "isNew": "fn() -> bool",
        "isValid": "fn(options?: ?) -> bool",
        "previous": "fn(attribute: string) -> ?",
        "previousAttributes": "fn() -> [?]",
        "save": "fn(attributes?: ?, options?: ModelSaveOptions) -> ?",
        "unset": "fn(attribute: string, options?: Silenceable) -> Model",
        "validate": "fn(attributes: ?, options?: ?) -> ?",
        "_validate": "fn(attrs: ?, options: ?) -> bool",
        "keys": "fn() -> [string]",
        "values": "fn() -> [?]",
        "pairs": "fn() -> [?]",
        "invert": "fn() -> ?",
        "pick": "fn(keys: [string]) -> ?",
        "omit": "fn(keys: [string]) -> ?"
      }
    },
    "Collection": {
      "extend": "fn(properties: ?, classProperties?: ?) -> ?",
      "!type": "fn(models?: [TModel], options?: ?)",
      "prototype": {
        "model": {},
        "models": "[TModel]",
        "length": "number",
        "initialize": "fn(models?: [TModel], options?: ?)",
        "fetch": "fn(options?: CollectionFetchOptions) -> JQueryXHR",
        "comparator": "fn(element: TModel) -> number",
        "add": "fn(model: TModel, options?: AddOptions) -> ?",
        "at": "fn(index: number) -> TModel",
        "get": "fn(id: number) -> TModel",
        "create": "fn(attributes: ?, options?: ModelSaveOptions) -> TModel",
        "pluck": "fn(attribute: string) -> [?]",
        "push": "fn(model: TModel, options?: AddOptions) -> TModel",
        "pop": "fn(options?: Silenceable) -> TModel",
        "remove": "fn(model: TModel, options?: Silenceable) -> TModel",
        "reset": "fn(models?: [TModel], options?: Silenceable) -> [TModel]",
        "set": "fn(models?: [TModel], options?: Silenceable) -> [TModel]",
        "shift": "fn(options?: Silenceable) -> TModel",
        "sort": "fn(options?: Silenceable) -> ?",
        "unshift": "fn(model: TModel, options?: AddOptions) -> TModel",
        "where": "fn(properies: ?) -> [TModel]",
        "findWhere": "fn(properties: ?) -> TModel",
        "_prepareModel": "fn(attrs?: ?, options?: ?) -> ?",
        "_removeReference": "fn(model: TModel)",
        "_onModelEvent": "fn(event: string, model: TModel, collection: ?, options: ?)",
        "all": "fn(iterator: fn(element: TModel, index: number), context?: ?) -> bool",
        "any": "fn(iterator: fn(element: TModel, index: number), context?: ?) -> bool",
        "collect": "fn(iterator: fn(element: TModel, index: number, context?: ?), context?: ?) -> [?]",
        "chain": "fn() -> ?",
        "contains": "fn(value: ?) -> bool",
        "countBy": "fn(iterator: fn(element: TModel, index: number)) -> ?",
        "detect": "fn(iterator: fn(item: ?), context?: ?) -> ?",
        "drop": "fn() -> TModel",
        "each": "fn(iterator: fn(element: TModel, index: number, list?: ?), context?: ?) -> ?",
        "every": "fn(iterator: fn(element: TModel, index: number), context?: ?) -> bool",
        "filter": "fn(iterator: fn(element: TModel, index: number), context?: ?) -> [TModel]",
        "find": "fn(iterator: fn(element: TModel, index: number), context?: ?) -> TModel",
        "first": "fn() -> TModel",
        "foldl": "fn(iterator: fn(memo: ?, element: TModel, index: number), initialMemo: ?, context?: ?) -> ?",
        "forEach": "fn(iterator: fn(element: TModel, index: number, list?: ?), context?: ?) -> ?",
        "groupBy": "fn(iterator: fn(element: TModel, index: number), context?: ?) -> ?",
        "include": "fn(value: ?) -> bool",
        "indexOf": "fn(element: TModel, isSorted?: bool) -> number",
        "initial": "fn() -> TModel",
        "inject": "fn(iterator: fn(memo: ?, element: TModel, index: number), initialMemo: ?, context?: ?) -> ?",
        "isEmpty": "fn(object: ?) -> bool",
        "invoke": "fn(methodName: string, arguments?: [?]) -> ?",
        "last": "fn() -> TModel",
        "lastIndexOf": "fn(element: TModel, fromIndex?: number) -> number",
        "map": "fn(iterator: fn(element: TModel, index: number, context?: ?), context?: ?) -> [?]",
        "max": "fn(iterator?: fn(element: TModel, index: number), context?: ?) -> TModel",
        "min": "fn(iterator?: fn(element: TModel, index: number), context?: ?) -> TModel",
        "reduce": "fn(iterator: fn(memo: ?, element: TModel, index: number), initialMemo: ?, context?: ?) -> ?",
        "select": "fn(iterator: ?, context?: ?) -> [?]",
        "size": "fn() -> number",
        "shuffle": "fn() -> [?]",
        "some": "fn(iterator: fn(element: TModel, index: number), context?: ?) -> bool",
        "sortBy": "fn(iterator: fn(element: TModel, index: number), context?: ?) -> [TModel]",
        "sortedIndex": "fn(element: TModel, iterator?: fn(element: TModel, index: number)) -> number",
        "reduceRight": "fn(iterator: fn(memo: ?, element: TModel, index: number), initialMemo: ?, context?: ?) -> [?]",
        "reject": "fn(iterator: fn(element: TModel, index: number), context?: ?) -> [TModel]",
        "rest": "fn() -> TModel",
        "tail": "fn() -> TModel",
        "toArray": "fn() -> [?]",
        "without": "fn(values: [?]) -> [TModel]"
      }
    },
    "Router": {
      "extend": "fn(properties: ?, classProperties?: ?) -> ?",
      "!type": "fn(options?: RouterOptions)",
      "prototype": {
        "routes": "?",
        "initialize": "fn(options?: RouterOptions)",
        "route": "fn(route: string, name: string, callback?: Function) -> Router",
        "navigate": "fn(fragment: string, options?: NavigateOptions) -> Router",
        "_bindRoutes": "fn()",
        "_routeToRegExp": "fn(route: string) -> RegExp",
        "_extractParameters": "fn(route: RegExp, fragment: string) -> [string]"
      }
    },
    "history": "History",
    "History": {
      "prototype": {
        "handlers": "[?]",
        "interval": "number",
        "start": "fn(options?: HistoryOptions) -> bool",
        "getHash": "fn(window?: Window) -> string",
        "getFragment": "fn(fragment?: string, forcePushState?: bool) -> string",
        "stop": "fn()",
        "route": "fn(route: string, callback: Function) -> number",
        "checkUrl": "fn(e?: ?)",
        "loadUrl": "fn(fragmentOverride: string) -> bool",
        "navigate": "fn(fragment: string, options?: ?) -> bool",
        "started": "bool",
        "options": "?",
        "_updateHash": "fn(location: Location, fragment: string, replace: bool)"
      }
    },
    "ViewOptions": {
      "model": "TModel",
      "collection": "?",
      "el": "?",
      "id": "string",
      "className": "string",
      "tagName": "string",
      "attributes": {}
    },
    "View": {
      "extend": "fn(properties: ?, classProperties?: ?) -> ?",
      "!type": "fn(options?: ?)",
      "prototype": {
        "initialize": "fn(options?: ?)",
        "events": "fn() -> ?",
        "$": "fn(selector: string) -> JQuery",
        "model": "TModel",
        "collection": "?",
        "setElement": "fn(element: HTMLElement, delegate?: bool) -> ?",
        "id": "string",
        "cid": "string",
        "className": "string",
        "tagName": "string",
        "el": "?",
        "$el": "JQuery",
        "attributes": "?",
        "render": "fn() -> ?",
        "remove": "fn() -> ?",
        "make": "fn(tagName: ?, attributes?: ?, content?: ?) -> ?",
        "delegateEvents": "fn(events?: ?) -> ?",
        "undelegateEvents": "fn() -> ?",
        "_ensureElement": "fn()"
      }
    },
    "sync": "fn(method: string, model: Model, options?: JQueryAjaxSettings) -> ?",
    "ajax": "fn(options?: JQueryAjaxSettings) -> JQueryXHR",
    "emulateHTTP": "bool",
    "emulateJSON": "bool",
    "noConflict": "fn() -> Backbone",
    "$": "JQueryStatic"
  },
  "backbone": "Backbone",
  "!name": "backbone.d.ts"
}
