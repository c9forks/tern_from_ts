{
  "Parse": {
    "applicationId": "string",
    "javaScriptKey": "string",
    "masterKey": "string",
    "serverURL": "string",
    "VERSION": "string",
    "ParseDefaultOptions": {
      "wait": "bool",
      "silent": "bool",
      "success": "Function",
      "error": "Function",
      "useMasterKey": "bool"
    },
    "CollectionOptions": {
      "model": "Object",
      "query": "Query",
      "comparator": "string"
    },
    "CollectionAddOptions": {
      "at": "number"
    },
    "RouterOptions": {
      "routes": "?"
    },
    "NavigateOptions": {
      "trigger": "bool"
    },
    "ViewOptions": {
      "model": "?",
      "collection": "?",
      "el": "?",
      "id": "string",
      "className": "string",
      "tagName": "string",
      "attributes": "[?]"
    },
    "PushData": {
      "channels": "[string]",
      "push_time": "Date",
      "expiration_time": "Date",
      "expiration_interval": "number",
      "where": "Query",
      "data": "?",
      "alert": "string",
      "badge": "string",
      "sound": "string",
      "title": "string"
    },
    "IPromise": {
      "then": "fn(resolvedCallback: fn(value: T), rejectedCallback?: fn(reason: ?)) -> ?"
    },
    "Promise": {
      "always": "fn(callback: Function) -> ?",
      "as": "fn() -> ?",
      "done": "fn(callback: Function) -> ?",
      "error": "fn() -> ?",
      "fail": "fn(callback: Function) -> ?",
      "is": "fn() -> ?",
      "reject": "fn(error: ?)",
      "resolve": "fn(result: ?)",
      "then": "fn(resolvedCallback: fn(value: T), rejectedCallback?: fn(reason: ?)) -> ?",
      "when": "fn(promises: [?]) -> ?"
    },
    "IBaseObject": {
      "toJSON": "fn() -> ?"
    },
    "BaseObject": {
      "prototype": {
        "toJSON": "fn() -> ?"
      }
    },
    "ACL": {
      "!type": "fn(arg1?: ?)",
      "prototype": {
        "permissionsById": "?",
        "setPublicReadAccess": "fn(allowed: bool)",
        "getPublicReadAccess": "fn() -> bool",
        "setPublicWriteAccess": "fn(allowed: bool)",
        "getPublicWriteAccess": "fn() -> bool",
        "setReadAccess": "fn(userId: User, allowed: bool)",
        "getReadAccess": "fn(userId: User) -> bool",
        "setRoleReadAccess": "fn(role: Role, allowed: bool)",
        "getRoleReadAccess": "fn(role: Role) -> bool",
        "setRoleWriteAccess": "fn(role: Role, allowed: bool)",
        "getRoleWriteAccess": "fn(role: Role) -> bool",
        "setWriteAccess": "fn(userId: User, allowed: bool)",
        "getWriteAccess": "fn(userId: User) -> bool"
      }
    },
    "File": {
      "!type": "fn(name: string, data: ?, type?: string)",
      "prototype": {
        "name": "fn() -> string",
        "url": "fn() -> string",
        "save": "fn(options?: ParseDefaultOptions) -> ?"
      }
    },
    "GeoPoint": {
      "!type": "fn(arg1?: ?, arg2?: ?)",
      "prototype": {
        "latitude": "number",
        "longitude": "number",
        "current": "fn(options?: ParseDefaultOptions) -> GeoPoint",
        "radiansTo": "fn(point: GeoPoint) -> number",
        "kilometersTo": "fn(point: GeoPoint) -> number",
        "milesTo": "fn(point: GeoPoint) -> number"
      }
    },
    "History": {
      "prototype": {
        "handlers": "[?]",
        "interval": "number",
        "fragment": "string",
        "checkUrl": "fn(e?: ?)",
        "getFragment": "fn(fragment?: string, forcePushState?: bool) -> string",
        "getHash": "fn(windowOverride: Window) -> string",
        "loadUrl": "fn(fragmentOverride: ?) -> bool",
        "navigate": "fn(fragment: string, options?: ?) -> ?",
        "route": "fn(route: ?, callback: Function)",
        "start": "fn(options: ?) -> bool",
        "stop": "fn()"
      }
    },
    "Relation": {
      "!type": "fn(parent?: Object, key?: string)",
      "prototype": {
        "parent": "Object",
        "key": "string",
        "targetClassName": "string",
        "add": "fn(object: Object)",
        "query": "fn() -> Query",
        "remove": "fn(object: Object)"
      }
    },
    "Object": {
      "!type": "fn(className?: string, options?: ?)",
      "extend": "fn(className: string, protoProps?: ?, classProps?: ?) -> ?",
      "fetchAll": "fn(list: [Object], options: ParseDefaultOptions) -> ?",
      "fetchAllIfNeeded": "fn(list: [Object], options: ParseDefaultOptions) -> ?",
      "destroyAll": "fn(list: [Object], options?: ParseDefaultOptions) -> ?",
      "saveAll": "fn(list: [Object], options?: ParseDefaultOptions) -> ?",
      "prototype": {
        "id": "?",
        "attributes": "?",
        "cid": "string",
        "changed": "bool",
        "className": "string",
        "initialize": "fn()",
        "add": "fn(attr: string, item: ?) -> Object",
        "addUnique": "fn(attr: string, item: ?) -> ?",
        "change": "fn(options: ?) -> Object",
        "changedAttributes": "fn(diff: ?) -> bool",
        "clear": "fn(options: ?) -> ?",
        "clone": "fn() -> Object",
        "destroy": "fn(options?: ParseDefaultOptions) -> ?",
        "dirty": "fn(attr: String) -> bool",
        "dirtyKeys": "fn() -> [string]",
        "escape": "fn(attr: string) -> string",
        "existed": "fn() -> bool",
        "fetch": "fn(options?: ParseDefaultOptions) -> ?",
        "get": "fn(attr: string) -> ?",
        "getACL": "fn() -> ACL",
        "has": "fn(attr: string) -> bool",
        "hasChanged": "fn(attr: string) -> bool",
        "increment": "fn(attr: string, amount?: number) -> ?",
        "isValid": "fn() -> bool",
        "op": "fn(attr: string) -> ?",
        "previous": "fn(attr: string) -> ?",
        "previousAttributes": "fn() -> ?",
        "relation": "fn(attr: string) -> Relation",
        "remove": "fn(attr: string, item: ?) -> ?",
        "save": "fn(options?: ParseDefaultOptions, arg2?: ?, arg3?: ?) -> ?",
        "set": "fn(key: string, value: ?, options?: ParseDefaultOptions) -> bool",
        "setACL": "fn(acl: ACL, options?: ParseDefaultOptions) -> bool",
        "unset": "fn(attr: string, options?: ?) -> ?",
        "validate": "fn(attrs: ?, options?: ParseDefaultOptions) -> bool"
      }
    },
    "Installation": {
      "prototype": {
        "badge": "?",
        "channels": "[string]",
        "timeZone": "?",
        "deviceType": "string",
        "pushType": "string",
        "installationId": "string",
        "deviceToken": "string",
        "channelUris": "string",
        "appName": "string",
        "appVersion": "string",
        "parseVersion": "string",
        "appIdentifier": "string"
      }
    },
    "Collection": {
      "!type": "fn(models?: [Object], options?: CollectionOptions)",
      "extend": "fn(instanceProps: ?, classProps: ?) -> ?",
      "prototype": {
        "model": "Object",
        "models": "[Object]",
        "query": "Query",
        "comparator": "fn(object: Object)",
        "initialize": "fn()",
        "add": "fn(models: [?], options?: CollectionAddOptions) -> ?",
        "at": "fn(index: number) -> Object",
        "chain": "fn() -> ?",
        "fetch": "fn(options?: ParseDefaultOptions) -> ?",
        "create": "fn(model: Object, options?: ParseDefaultOptions) -> Object",
        "get": "fn(id: string) -> Object",
        "getByCid": "fn(cid: ?) -> ?",
        "pluck": "fn(attr: string) -> [?]",
        "remove": "fn(model: ?, options?: ParseDefaultOptions) -> ?",
        "reset": "fn(models: [?], options?: ParseDefaultOptions) -> ?",
        "sort": "fn(options?: ParseDefaultOptions) -> ?",
        "toJSON": "fn() -> ?"
      }
    },
    "Events": {
      "off": "fn(events: [string], callback?: Function, context?: ?) -> Events",
      "on": "fn(events: [string], callback?: Function, context?: ?) -> Events",
      "trigger": "fn(events: [string]) -> Events",
      "bind": "fn() -> Events",
      "unbind": "fn() -> Events",
      "prototype": {
        "on": "fn(eventName: string, callback?: Function, context?: ?) -> Events",
        "off": "fn(eventName?: string, callback?: Function, context?: ?) -> Events",
        "trigger": "fn(eventName: string, args: [?]) -> Events",
        "bind": "fn(eventName: string, callback: Function, context?: ?) -> Events",
        "unbind": "fn(eventName?: string, callback?: Function, context?: ?) -> Events"
      }
    },
    "Query": {
      "!type": "fn(objectClass: ?)",
      "or": "fn(var_args: [Query]) -> Query",
      "prototype": {
        "objectClass": "?",
        "className": "string",
        "addAscending": "fn(key: string) -> Query",
        "addDescending": "fn(key: string) -> Query",
        "ascending": "fn(key: string) -> Query",
        "collection": "fn(items?: [Object], options?: ParseDefaultOptions) -> ?",
        "containedIn": "fn(key: string, values: [?]) -> Query",
        "contains": "fn(key: string, substring: string) -> Query",
        "containsAll": "fn(key: string, values: [?]) -> Query",
        "count": "fn(options?: ParseDefaultOptions) -> ?",
        "descending": "fn(key: string) -> Query",
        "doesNotExist": "fn(key: string) -> Query",
        "doesNotMatchKeyInQuery": "fn(key: string, queryKey: string, query: Query) -> Query",
        "doesNotMatchQuery": "fn(key: string, query: Query) -> Query",
        "each": "fn(callback: Function, options?: ParseDefaultOptions) -> ?",
        "endsWith": "fn(key: string, suffix: string) -> Query",
        "equalTo": "fn(key: string, value: ?) -> Query",
        "exists": "fn(key: string) -> Query",
        "find": "fn(options?: ParseDefaultOptions) -> ?",
        "first": "fn(options?: ParseDefaultOptions) -> ?",
        "get": "fn(objectId: string, options?: ParseDefaultOptions) -> ?",
        "greaterThan": "fn(key: string, value: ?) -> Query",
        "greaterThanOrEqualTo": "fn(key: string, value: ?) -> Query",
        "include": "fn(key: string) -> Query",
        "lessThan": "fn(key: string, value: ?) -> Query",
        "lessThanOrEqualTo": "fn(key: string, value: ?) -> Query",
        "limit": "fn(n: number) -> Query",
        "matches": "fn(key: string, regex: RegExp, modifiers: ?) -> Query",
        "matchesKeyInQuery": "fn(key: string, queryKey: string, query: Query) -> Query",
        "matchesQuery": "fn(key: string, query: Query) -> Query",
        "near": "fn(key: string, point: GeoPoint) -> Query",
        "notContainedIn": "fn(key: string, values: [?]) -> Query",
        "notEqualTo": "fn(key: string, value: ?) -> Query",
        "select": "fn(keys: [string]) -> Query",
        "skip": "fn(n: number) -> Query",
        "startsWith": "fn(key: string, prefix: string) -> Query",
        "withinGeoBox": "fn(key: string, southwest: GeoPoint, northeast: GeoPoint) -> Query",
        "withinKilometers": "fn(key: string, point: GeoPoint, maxDistance: number) -> Query",
        "withinMiles": "fn(key: string, point: GeoPoint, maxDistance: number) -> Query",
        "withinRadians": "fn(key: string, point: GeoPoint, maxDistance: number) -> Query"
      }
    },
    "Role": {
      "!type": "fn(name: string, acl: ACL)",
      "prototype": {
        "getRoles": "fn() -> Relation",
        "getUsers": "fn() -> Relation",
        "getName": "fn() -> string",
        "setName": "fn(name: string, options?: ParseDefaultOptions) -> ?"
      }
    },
    "Router": {
      "!type": "fn(options?: RouterOptions)",
      "extend": "fn(instanceProps: ?, classProps: ?) -> ?",
      "prototype": {
        "routes": "[?]",
        "initialize": "fn()",
        "navigate": "fn(fragment: string, options?: NavigateOptions) -> Router",
        "route": "fn(route: string, name: string, callback: Function) -> Router"
      }
    },
    "User": {
      "current": "fn() -> User",
      "signUp": "fn(username: string, password: string, attrs: ?, options?: ParseDefaultOptions) -> ?",
      "logIn": "fn(username: string, password: string, options?: ParseDefaultOptions) -> ?",
      "logOut": "fn()",
      "allowCustomUserClass": "fn(isAllowed: bool)",
      "become": "fn(sessionToken: string, options?: ParseDefaultOptions) -> ?",
      "requestPasswordReset": "fn(email: string, options?: ParseDefaultOptions) -> ?",
      "prototype": {
        "signUp": "fn(attrs: ?, options?: ParseDefaultOptions) -> ?",
        "logIn": "fn(options?: ParseDefaultOptions) -> ?",
        "fetch": "fn(options?: ParseDefaultOptions) -> ?",
        "save": "fn(arg1: ?, arg2: ?, arg3: ?) -> ?",
        "authenticated": "fn() -> bool",
        "isCurrent": "fn() -> bool",
        "getEmail": "fn() -> string",
        "setEmail": "fn(email: string, options: ParseDefaultOptions) -> bool",
        "getUsername": "fn() -> string",
        "setUsername": "fn(username: string, options?: ParseDefaultOptions) -> bool",
        "setPassword": "fn(password: string, options?: ParseDefaultOptions) -> bool",
        "getSessionToken": "fn() -> string"
      }
    },
    "View": {
      "!type": "fn(options?: ViewOptions)",
      "extend": "fn(properties: ?, classProperties?: ?) -> ?",
      "prototype": {
        "model": "?",
        "collection": "?",
        "id": "string",
        "cid": "string",
        "className": "string",
        "tagName": "string",
        "el": "?",
        "$el": "JQuery",
        "attributes": "?",
        "$": "fn(selector?: string) -> JQuery",
        "setElement": "fn(element: HTMLElement, delegate?: bool) -> ?",
        "render": "fn() -> ?",
        "remove": "fn() -> ?",
        "make": "fn(tagName: ?, attributes?: ?, content?: ?) -> ?",
        "delegateEvents": "fn(events?: ?) -> ?",
        "undelegateEvents": "fn() -> ?"
      }
    },
    "Analytics": {
      "track": "fn(name: string, dimensions: ?) -> ?"
    },
    "FacebookUtils": {
      "init": "fn(options?: ?)",
      "isLinked": "fn(user: User) -> bool",
      "link": "fn(user: User, permissions: ?, options?: ParseDefaultOptions)",
      "logIn": "fn(permissions: ?, options?: ParseDefaultOptions)",
      "unlink": "fn(user: User, options?: ParseDefaultOptions)"
    },
    "Cloud": {
      "CookieOptions": {
        "domain": "string",
        "expires": "Date",
        "httpOnly": "bool",
        "maxAge": "number",
        "path": "string",
        "secure": "bool"
      },
      "HttpResponse": {
        "buffer": "Buffer",
        "cookies": "?",
        "data": "?",
        "headers": "?",
        "status": "number",
        "text": "string"
      },
      "JobRequest": {
        "params": "?"
      },
      "JobStatus": {
        "error": "Function",
        "message": "Function",
        "success": "Function"
      },
      "FunctionRequest": {
        "installationId": "String",
        "master": "bool",
        "params": "?",
        "user": "User"
      },
      "FunctionResponse": {
        "success": "fn(response: HttpResponse)",
        "error": "fn(response: HttpResponse)"
      },
      "Cookie": {
        "name": "string",
        "options": "CookieOptions",
        "value": "string"
      },
      "AfterSaveRequest": {},
      "AfterDeleteRequest": {},
      "BeforeDeleteRequest": {},
      "BeforeDeleteResponse": {},
      "BeforeSaveRequest": {},
      "BeforeSaveResponse": {},
      "afterDelete": "fn(arg1: ?, func?: fn(request: AfterDeleteRequest))",
      "afterSave": "fn(arg1: ?, func?: fn(request: AfterSaveRequest))",
      "beforeDelete": "fn(arg1: ?, func?: fn(request: BeforeDeleteRequest, response: BeforeDeleteResponse))",
      "beforeSave": "fn(arg1: ?, func?: fn(request: BeforeSaveRequest, response: BeforeSaveResponse))",
      "define": "fn(name: string, func?: fn(request: FunctionRequest, response: FunctionResponse))",
      "httpRequest": "fn(options: ParseDefaultOptions) -> ?",
      "job": "fn(name: string, func?: fn(request: JobRequest, status: JobStatus)) -> HttpResponse",
      "run": "fn(name: string, data?: ?, options?: ParseDefaultOptions) -> ?",
      "useMasterKey": "fn()"
    },
    "Error": {
      "!type": "fn(code: ErrorCode, message: string)",
      "prototype": {
        "code": "ErrorCode",
        "message": "string"
      }
    },
    "ErrorCode": "number",
    "Op": {
      "BaseOperation": {
        "objects": "fn() -> [?]"
      },
      "Add": {},
      "AddUnique": {},
      "Increment": {
        "amount": "number"
      },
      "Relation": {
        "added": "fn() -> [Object]",
        "removed": "[Object]"
      },
      "Set": {
        "value": "fn() -> ?"
      },
      "Unset": {}
    },
    "Push": {
      "send": "fn(data: PushData, options?: ParseDefaultOptions) -> ?"
    },
    "initialize": "fn(applicationId: string, javaScriptKey: string, masterKey?: string)"
  },
  "parse": "subType",
  "!name": "parse.d.ts"
}
