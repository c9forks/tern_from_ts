{
  "Rx": {
    "internals": {
      "isEqual": "fn(left: ?, right: ?) -> bool",
      "addRef": "fn(xs: ?, r: ?) -> ?",
      "PriorityQueue": {
        "!type": "fn(capacity: number)",
        "count": "number",
        "prototype": {
          "length": "number",
          "isHigherPriority": "fn(left: number, right: number) -> bool",
          "percolate": "fn(index: number)",
          "heapify": "fn(index: number)",
          "peek": "fn() -> ?",
          "removeAt": "fn(index: number)",
          "dequeue": "fn() -> ?",
          "enqueue": "fn(item: ?)",
          "remove": "fn(item: ?) -> bool"
        }
      },
      "ScheduledItem": {
        "!type": "fn(scheduler: IScheduler, state: ?, action: fn(scheduler: IScheduler, state: ?), dueTime: TTime, comparer?: fn(x: TTime, y: TTime))",
        "prototype": {
          "scheduler": "IScheduler",
          "state": "TTime",
          "action": "fn(scheduler: IScheduler, state: ?)",
          "dueTime": "TTime",
          "comparer": "fn(x: TTime, y: TTime)",
          "disposable": "SingleAssignmentDisposable",
          "invoke": "fn()",
          "compareTo": "fn(other: ?) -> number",
          "isCancelled": "fn() -> bool",
          "invokeCore": "fn() -> IDisposable"
        }
      }
    },
    "config": {
      "Promise": {}
    },
    "helpers": {
      "noop": "fn()",
      "notDefined": "fn(value: ?) -> bool",
      "isScheduler": "fn(value: ?) -> bool",
      "identity": "fn(value: T) -> T",
      "defaultNow": "fn() -> number",
      "defaultComparer": "fn(left: ?, right: ?) -> bool",
      "defaultSubComparer": "fn(left: ?, right: ?) -> number",
      "defaultKeySerializer": "fn(key: ?) -> string",
      "defaultError": "fn(err: ?)",
      "isPromise": "fn(p: ?) -> bool",
      "asArray": "fn(args: [T]) -> [T]",
      "not": "fn(value: ?) -> bool",
      "isFunction": "fn(value: ?) -> bool"
    },
    "IDisposable": {
      "dispose": "fn()"
    },
    "CompositeDisposable": {
      "!type": "fn(disposables: [IDisposable])",
      "prototype": {
        "isDisposed": "bool",
        "length": "number",
        "dispose": "fn()",
        "add": "fn(item: IDisposable)",
        "remove": "fn(item: IDisposable) -> bool",
        "toArray": "fn() -> [IDisposable]"
      }
    },
    "Disposable": {
      "!type": "fn(action: fn())",
      "create": "fn(action: fn()) -> IDisposable",
      "empty": "IDisposable",
      "prototype": {
        "dispose": "fn()"
      }
    },
    "SingleAssignmentDisposable": {
      "!type": "fn()",
      "prototype": {
        "isDisposed": "bool",
        "current": "IDisposable",
        "dispose": "fn()",
        "getDisposable": "fn() -> IDisposable",
        "setDisposable": "fn(value: IDisposable)"
      }
    },
    "SerialDisposable": {
      "!type": "fn()",
      "prototype": {}
    },
    "RefCountDisposable": {
      "!type": "fn(disposable: IDisposable)",
      "prototype": {
        "dispose": "fn()",
        "isDisposed": "bool",
        "getDisposable": "fn() -> IDisposable"
      }
    },
    "IScheduler": {
      "now": "fn() -> number",
      "schedule": "fn(action: fn()) -> IDisposable",
      "scheduleWithState": "fn(state: TState, action: fn(scheduler: IScheduler, state: TState)) -> IDisposable",
      "scheduleWithAbsolute": "fn(dueTime: number, action: fn()) -> IDisposable",
      "scheduleWithAbsoluteAndState": "fn(state: TState, dueTime: number, action: fn(scheduler: IScheduler, state: TState)) -> IDisposable",
      "scheduleWithRelative": "fn(dueTime: number, action: fn()) -> IDisposable",
      "scheduleWithRelativeAndState": "fn(state: TState, dueTime: number, action: fn(scheduler: IScheduler, state: TState)) -> IDisposable",
      "scheduleRecursive": "fn(action: fn(action: fn())) -> IDisposable",
      "scheduleRecursiveWithState": "fn(state: TState, action: fn(state: TState, action: fn(state: TState))) -> IDisposable",
      "scheduleRecursiveWithAbsolute": "fn(dueTime: number, action: fn(action: fn(dueTime: number))) -> IDisposable",
      "scheduleRecursiveWithAbsoluteAndState": "fn(state: TState, dueTime: number, action: fn(state: TState, action: fn(state: TState, dueTime: number))) -> IDisposable",
      "scheduleRecursiveWithRelative": "fn(dueTime: number, action: fn(action: fn(dueTime: number))) -> IDisposable",
      "scheduleRecursiveWithRelativeAndState": "fn(state: TState, dueTime: number, action: fn(state: TState, action: fn(state: TState, dueTime: number))) -> IDisposable",
      "schedulePeriodic": "fn(period: number, action: fn()) -> IDisposable",
      "schedulePeriodicWithState": "fn(state: TState, period: number, action: fn(state: TState)) -> IDisposable"
    },
    "Scheduler": {
      "!type": "SchedulerStatic"
    },
    "SchedulerStatic": {
      "normalize": "fn(timeSpan: number) -> number",
      "immediate": "IScheduler",
      "currentThread": "ICurrentThreadScheduler",
      "timeout": "IScheduler"
    },
    "ICurrentThreadScheduler": {
      "scheduleRequired": "fn() -> bool"
    },
    "Notification": {
      "createOnNext": "fn(value: T) -> ?",
      "createOnError": "fn(exception: ?) -> ?",
      "createOnCompleted": "fn() -> ?",
      "prototype": {
        "accept": "fn(observer: ?)",
        "toObservable": "fn(scheduler?: IScheduler) -> ?",
        "hasValue": "bool",
        "equals": "fn(other: ?) -> bool",
        "kind": "string",
        "value": "T",
        "exception": "?"
      }
    },
    "IPromise": {
      "then": "fn(onFulfilled: fn(value: T), onRejected: fn(reason: ?)) -> ?"
    },
    "IObserver": {
      "onNext": "fn(value: T)",
      "onError": "fn(exception: ?)",
      "onCompleted": "fn()"
    },
    "Observer": {
      "toNotifier": "fn() -> fn(notification: ?)",
      "asObserver": "fn() -> ?",
      "!type": "ObserverStatic"
    },
    "ObserverStatic": {
      "create": "fn(onNext?: fn(value: T), onError?: fn(exception: ?), onCompleted?: fn()) -> ?",
      "fromNotifier": "fn(handler: fn(notification: ?, thisArg?: ?)) -> ?"
    },
    "IObservable": {
      "subscribe": "fn(observer: ?) -> IDisposable",
      "subscribeOnNext": "fn(onNext: fn(value: T), thisArg?: ?) -> IDisposable",
      "subscribeOnError": "fn(onError: fn(exception: ?), thisArg?: ?) -> IDisposable",
      "subscribeOnCompleted": "fn(onCompleted: fn(), thisArg?: ?) -> IDisposable"
    },
    "Observable": {
      "forEach": "fn(onNext?: fn(value: T), onError?: fn(exception: ?), onCompleted?: fn()) -> IDisposable",
      "toArray": "fn() -> ?",
      "catch": "fn(handler: fn(exception: ?)) -> ?",
      "catchException": "fn(handler: fn(exception: ?)) -> ?",
      "combineLatest": "fn(second: ?, resultSelector: fn(v1: T, v2: T2)) -> ?",
      "concat": "fn(sources: [?]) -> ?",
      "concatAll": "fn() -> T",
      "concatObservable": "fn() -> T",
      "concatMap": "fn(selector: fn(value: T, index: number), resultSelector: fn(value1: T, value2: T2, index: number)) -> ?",
      "merge": "fn(maxConcurrent: number) -> T",
      "mergeAll": "fn() -> T",
      "mergeObservable": "fn() -> T",
      "skipUntil": "fn(other: ?) -> ?",
      "switch": "fn() -> T",
      "switchLatest": "fn() -> T",
      "takeUntil": "fn(other: ?) -> ?",
      "zip": "fn(second: ?, resultSelector: fn(v1: T, v2: T2)) -> ?",
      "asObservable": "fn() -> ?",
      "dematerialize": "fn() -> ?",
      "distinctUntilChanged": "fn(skipParameter: bool, comparer: fn(x: T, y: T)) -> ?",
      "do": "fn(observer: ?) -> ?",
      "doAction": "fn(observer: ?) -> ?",
      "tap": "fn(observer: ?) -> ?",
      "doOnNext": "fn(onNext: fn(value: T), thisArg?: ?) -> ?",
      "doOnError": "fn(onError: fn(exception: ?), thisArg?: ?) -> ?",
      "doOnCompleted": "fn(onCompleted: fn(), thisArg?: ?) -> ?",
      "tapOnNext": "fn(onNext: fn(value: T), thisArg?: ?) -> ?",
      "tapOnError": "fn(onError: fn(exception: ?), thisArg?: ?) -> ?",
      "tapOnCompleted": "fn(onCompleted: fn(), thisArg?: ?) -> ?",
      "finally": "fn(action: fn()) -> ?",
      "finallyAction": "fn(action: fn()) -> ?",
      "ignoreElements": "fn() -> ?",
      "materialize": "fn() -> ?",
      "repeat": "fn(repeatCount?: number) -> ?",
      "retry": "fn(retryCount?: number) -> ?",
      "scan": "fn(seed: TAcc, accumulator: fn(acc: TAcc, value: T)) -> ?",
      "skipLast": "fn(count: number) -> ?",
      "startWith": "fn(values: [T]) -> ?",
      "takeLast": "fn(count: number) -> ?",
      "takeLastBuffer": "fn(count: number) -> ?",
      "select": "fn(selector: fn(value: T, index: number, source: ?), thisArg?: ?) -> ?",
      "map": "fn(selector: fn(value: T, index: number, source: ?), thisArg?: ?) -> ?",
      "pluck": "fn(prop: string) -> ?",
      "selectMany": "fn(selector: fn(value: T), resultSelector: fn(item: T, other: TOther)) -> ?",
      "flatMap": "fn(selector: fn(value: T), resultSelector: fn(item: T, other: TOther)) -> ?",
      "selectConcat": "fn(selector: fn(value: T, index: number), resultSelector: fn(value1: T, value2: T2, index: number)) -> ?",
      "selectSwitch": "fn(selector: fn(value: T, index: number, source: ?), thisArg?: ?) -> ?",
      "flatMapLatest": "fn(selector: fn(value: T, index: number, source: ?), thisArg?: ?) -> ?",
      "switchMap": "fn(selector: fn(value: T, index: number, source: ?), thisArg?: ?) -> ?",
      "skip": "fn(count: number) -> ?",
      "skipWhile": "fn(predicate: fn(value: T, index: number, source: ?), thisArg?: ?) -> ?",
      "take": "fn(count: number, scheduler?: IScheduler) -> ?",
      "takeWhile": "fn(predicate: fn(value: T, index: number, source: ?), thisArg?: ?) -> ?",
      "where": "fn(predicate: fn(value: T, index: number, source: ?), thisArg?: ?) -> ?",
      "filter": "fn(predicate: fn(value: T, index: number, source: ?), thisArg?: ?) -> ?",
      "toPromise": "fn(promiseCtor: ?) -> TPromise",
      "exclusive": "fn() -> ?",
      "exclusiveMap": "fn(selector: fn(value: I, index: number, source: ?), thisArg?: ?) -> ?",
      "!type": "ObservableStatic"
    },
    "ObservableStatic": {
      "create": "fn(subscribe: fn(observer: ?)) -> ?",
      "createWithDisposable": "fn(subscribe: fn(observer: ?)) -> ?",
      "defer": "fn(observableFactory: fn()) -> ?",
      "empty": "fn(scheduler?: IScheduler) -> ?",
      "from": "fn(array: [T], mapFn: fn(value: T, index: number), thisArg?: ?, scheduler?: IScheduler) -> ?",
      "fromArray": "fn(array: [T], scheduler?: IScheduler) -> ?",
      "fromItreable": "fn(generator: fn(), scheduler?: IScheduler) -> ?",
      "generate": "fn(initialState: TState, condition: fn(state: TState), iterate: fn(state: TState), resultSelector: fn(state: TState), scheduler?: IScheduler) -> ?",
      "never": "fn() -> ?",
      "of": "fn(values: [T]) -> ?",
      "ofWithScheduler": "fn(scheduler?: IScheduler, values: [T]) -> ?",
      "range": "fn(start: number, count: number, scheduler?: IScheduler) -> ?",
      "repeat": "fn(value: T, repeatCount?: number, scheduler?: IScheduler) -> ?",
      "return": "fn(value: T, scheduler?: IScheduler) -> ?",
      "just": "fn(value: T, scheduler?: IScheduler) -> ?",
      "returnValue": "fn(value: T, scheduler?: IScheduler) -> ?",
      "throw": "fn(exception: Error, scheduler?: IScheduler) -> ?",
      "throwException": "fn(exception: Error, scheduler?: IScheduler) -> ?",
      "throwError": "fn(error: Error, scheduler?: IScheduler) -> ?",
      "catch": "fn(sources: [?]) -> ?",
      "catchException": "fn(sources: [?]) -> ?",
      "catchError": "fn(sources: [?]) -> ?",
      "combineLatest": "fn(first: ?, second: ?, resultSelector: fn(v1: T, v2: T2)) -> ?",
      "concat": "fn(sources: [?]) -> ?",
      "merge": "fn(sources: [?]) -> ?",
      "zip": "fn(first: ?, sources: [?], resultSelector: fn(item1: T1, right: [T2])) -> ?",
      "zipArray": "fn(sources: [?]) -> ?",
      "fromPromise": "fn(promise: ?) -> ?"
    },
    "ISubject": {
      "hasObservers": "fn() -> bool"
    },
    "Subject": {
      "!type": "SubjectStatic"
    },
    "SubjectStatic": {
      "create": "fn(observer?: ?, observable?: ?) -> ?"
    },
    "AsyncSubject": {
      "!type": "AsyncSubjectStatic"
    },
    "AsyncSubjectStatic": {}
  },
  "!name": "rx-lite.d.ts"
}
