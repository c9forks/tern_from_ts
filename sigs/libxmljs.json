{
  "libxmljs": {
    "parseXmlString": "fn(source: string) -> XMLDocument",
    "parseHtmlString": "fn(source: string) -> HTMLDocument",
    "XMLDocument": {
      "!type": "fn(version: number, encoding: string)",
      "prototype": {
        "child": "fn(idx: number) -> Element",
        "childNodes": "fn() -> [Element]",
        "errors": "fn() -> [SyntaxError]",
        "encoding": "fn() -> string",
        "find": "fn(xpath: string) -> [Element]",
        "get": "fn(xpath: string) -> Element",
        "node": "fn(name: string, content: string) -> Element",
        "root": "fn() -> Element",
        "version": "fn() -> Number"
      }
    },
    "HTMLDocument": {
      "prototype": {}
    },
    "Element": {
      "!type": "fn(doc: XMLDocument, name: string, content?: string)",
      "prototype": {
        "name": "fn() -> string",
        "text": "fn() -> string",
        "attr": "fn(name: string) -> string",
        "attrs": "fn() -> [Attribute]",
        "parent": "fn() -> Element",
        "doc": "fn() -> XMLDocument",
        "child": "fn(idx: number) -> Element",
        "childNodes": "fn() -> [Element]",
        "addChild": "fn(child: Element)",
        "nextSibling": "fn() -> Element",
        "nextElement": "fn() -> Element",
        "addNextSibling": "fn(siblingNode: Element) -> Element",
        "prevSibling": "fn() -> Element",
        "prevElement": "fn() -> Element",
        "addPrevSibling": "fn(siblingNode: Element)",
        "find": "fn(xpath: string) -> [Element]",
        "get": "fn(xpath: string, ns_uri: string) -> Element",
        "defineNamespace": "fn(href: string) -> Namespace",
        "namespace": "fn() -> Namespace",
        "remove": "fn()",
        "path": "fn() -> string",
        "type": "fn() -> string"
      }
    },
    "Attribute": {
      "!type": "fn(node: Element, name: string, value: string)",
      "prototype": {
        "name": "fn() -> string",
        "namespace": "fn() -> Namespace",
        "nextSibling": "fn() -> Attribute",
        "node": "fn() -> Element",
        "prevSibling": "fn() -> Attribute",
        "remove": "fn()",
        "value": "fn() -> string"
      }
    },
    "Namespace": {
      "!type": "fn(node: Element, prefix: string, href: string)",
      "prototype": {
        "href": "fn() -> string",
        "prefix": "fn() -> string"
      }
    },
    "SaxParser": {
      "prototype": {
        "parseString": "fn(source: string) -> bool",
        "addListener": "fn(event: string, listener: Function)",
        "on": "fn(event: string, listener: Function) -> ?",
        "once": "fn(event: string, listener: Function)",
        "removeListener": "fn(event: string, listener: Function)",
        "removeAllListener": "fn(event: string)",
        "setMaxListeners": "fn(n: number)",
        "listeners": "fn(event: string) -> [ret]",
        "emit": "fn(event: string, arg1?: ?, arg2?: ?)"
      }
    },
    "SaxPushParser": {
      "prototype": {
        "push": "fn(source: string) -> bool",
        "addListener": "fn(event: string, listener: Function)",
        "on": "fn(event: string, listener: Function) -> ?",
        "once": "fn(event: string, listener: Function)",
        "removeListener": "fn(event: string, listener: Function)",
        "removeAllListener": "fn(event: string)",
        "setMaxListeners": "fn(n: number)",
        "listeners": "fn(event: string) -> [ret1]",
        "emit": "fn(event: string, arg1?: ?, arg2?: ?)"
      }
    }
  },
  "!name": "libxmljs.d.ts",
  "!define": {
    "ret": {
      "Function": "?"
    },
    "ret1": {
      "Function": "?"
    }
  }
}
