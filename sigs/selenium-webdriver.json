{
  "chrome": {
    "Driver": {
      "!type": "fn(opt_config?: webdriver.Capabilities, opt_service?: ?, opt_flow?: webdriver.promise.ControlFlow)",
      "prototype": {}
    },
    "IOptionsValues": {
      "args": "[string]",
      "binary": "string",
      "detach": "bool",
      "extensions": "[string]",
      "localState": "?",
      "logFile": "string",
      "prefs": "?"
    },
    "Options": {
      "!type": "fn()",
      "fromCapabilities": "fn(capabilities: webdriver.Capabilities) -> Options",
      "prototype": {
        "addArguments": "fn(var_args: [string]) -> Options",
        "addExtensions": "fn(var_args: [?]) -> Options",
        "setChromeBinaryPath": "fn(path: string) -> Options",
        "detachDriver": "fn(detach: bool) -> Options",
        "setUserPreferences": "fn(prefs: ?) -> Options",
        "setLoggingPrefs": "fn(prefs: webdriver.logging.Preferences) -> Options",
        "setLocalState": "fn(state: ?) -> Options",
        "setChromeLogFile": "fn(path: string) -> Options",
        "setProxy": "fn(proxy: webdriver.ProxyConfig) -> Options",
        "toCapabilities": "fn(opt_capabilities?: webdriver.Capabilities) -> webdriver.Capabilities",
        "toJSON": "fn() -> IOptionsValues"
      }
    },
    "ServiceBuilder": {
      "!type": "fn(opt_exe?: string)",
      "prototype": {
        "usingPort": "fn(port: number) -> ServiceBuilder",
        "loggingTo": "fn(path: string) -> ServiceBuilder",
        "enableVerboseLogging": "fn() -> ServiceBuilder",
        "setNumHttpThreads": "fn(n: number) -> ServiceBuilder",
        "setUrlBasePath": "fn(path: string) -> ServiceBuilder",
        "setStdio": "fn(config: string) -> ServiceBuilder",
        "withEnvironment": "fn(env: [object Object]) -> ServiceBuilder",
        "build": "fn() -> ?"
      }
    },
    "getDefaultService": "fn() -> ?",
    "setDefaultService": "fn(service: ?)"
  },
  "firefox": {
    "Binary": {
      "!type": "fn(opt_exe?: string)",
      "prototype": {
        "addArguments": "fn(var_args: [string])",
        "launch": "fn(profile: string) -> ?",
        "kill": "fn() -> ?"
      }
    },
    "Driver": {
      "!type": "fn(opt_config?: webdriver.Capabilities, opt_flow?: webdriver.promise.ControlFlow)",
      "prototype": {}
    },
    "Options": {
      "!type": "fn()",
      "prototype": {
        "setProfile": "fn(profile: string) -> Options",
        "setBinary": "fn(binary: string) -> Options",
        "setLoggingPreferences": "fn(prefs: webdriver.logging.Preferences) -> Options",
        "setProxy": "fn(proxy: webdriver.ProxyConfig) -> Options",
        "toCapabilities": "fn(opt_remote?: ?) -> webdriver.Capabilities"
      }
    },
    "Profile": {
      "!type": "fn(opt_dir?: string)",
      "prototype": {
        "addExtension": "fn(extension: string)",
        "setPreference": "fn(key: string, value: string)",
        "getPreference": "fn(key: string) -> ?",
        "getPort": "fn() -> number",
        "setPort": "fn(port: number)",
        "acceptUntrustedCerts": "fn() -> bool",
        "setAcceptUntrustedCerts": "fn(value: bool)",
        "setAssumeUntrustedCertIssuer": "fn(value: bool)",
        "assumeUntrustedCertIssuer": "fn() -> bool",
        "setNativeEventsEnabled": "fn(enabled: bool)",
        "nativeEventsEnabled": "fn() -> bool",
        "writeToDisk": "fn(opt_excludeWebDriverExt?: bool) -> ?",
        "encode": "fn() -> ?"
      }
    }
  },
  "executors": {
    "createExecutor": "fn(url: string) -> webdriver.CommandExecutor"
  },
  "webdriver": {
    "error": {
      "IErrorCode": {
        "SUCCESS": "number",
        "NO_SUCH_ELEMENT": "number",
        "NO_SUCH_FRAME": "number",
        "UNKNOWN_COMMAND": "number",
        "UNSUPPORTED_OPERATION": "number",
        "STALE_ELEMENT_REFERENCE": "number",
        "ELEMENT_NOT_VISIBLE": "number",
        "INVALID_ELEMENT_STATE": "number",
        "UNKNOWN_ERROR": "number",
        "ELEMENT_NOT_SELECTABLE": "number",
        "JAVASCRIPT_ERROR": "number",
        "XPATH_LOOKUP_ERROR": "number",
        "TIMEOUT": "number",
        "NO_SUCH_WINDOW": "number",
        "INVALID_COOKIE_DOMAIN": "number",
        "UNABLE_TO_SET_COOKIE": "number",
        "MODAL_DIALOG_OPENED": "number",
        "UNEXPECTED_ALERT_OPEN": "number",
        "NO_SUCH_ALERT": "number",
        "NO_MODAL_DIALOG_OPEN": "number",
        "SCRIPT_TIMEOUT": "number",
        "INVALID_ELEMENT_COORDINATES": "number",
        "IME_NOT_AVAILABLE": "number",
        "IME_ENGINE_ACTIVATION_FAILED": "number",
        "INVALID_SELECTOR_ERROR": "number",
        "SESSION_NOT_CREATED": "number",
        "MOVE_TARGET_OUT_OF_BOUNDS": "number",
        "SQL_DATABASE_ERROR": "number",
        "INVALID_XPATH_SELECTOR": "number",
        "INVALID_XPATH_SELECTOR_RETURN_TYPE": "number",
        "METHOD_NOT_ALLOWED": "number"
      },
      "ErrorCode": "IErrorCode",
      "Error": {
        "!type": "fn(code: number, opt_message?: string)",
        "State": {
          "ELEMENT_NOT_SELECTABLE": "string",
          "ELEMENT_NOT_VISIBLE": "string",
          "IME_ENGINE_ACTIVATION_FAILED": "string",
          "IME_NOT_AVAILABLE": "string",
          "INVALID_COOKIE_DOMAIN": "string",
          "INVALID_ELEMENT_COORDINATES": "string",
          "INVALID_ELEMENT_STATE": "string",
          "INVALID_SELECTOR": "string",
          "JAVASCRIPT_ERROR": "string",
          "MOVE_TARGET_OUT_OF_BOUNDS": "string",
          "NO_SUCH_ALERT": "string",
          "NO_SUCH_DOM": "string",
          "NO_SUCH_ELEMENT": "string",
          "NO_SUCH_FRAME": "string",
          "NO_SUCH_WINDOW": "string",
          "SCRIPT_TIMEOUT": "string",
          "SESSION_NOT_CREATED": "string",
          "STALE_ELEMENT_REFERENCE": "string",
          "SUCCESS": "string",
          "TIMEOUT": "string",
          "UNABLE_TO_SET_COOKIE": "string",
          "UNEXPECTED_ALERT_OPEN": "string",
          "UNKNOWN_COMMAND": "string",
          "UNKNOWN_ERROR": "string",
          "UNSUPPORTED_OPERATION": "string"
        },
        "prototype": {
          "code": "number",
          "state": "string",
          "message": "string",
          "name": "string",
          "stack": "string",
          "isAutomationError": "bool"
        }
      }
    },
    "logging": {
      "Preferences": {
        "prototype": {
          "setLevel": "fn(type: string, level: ILevel)",
          "toJSON": "fn() -> ret"
        }
      },
      "IType": {
        "BROWSER": "string",
        "CLIENT": "string",
        "DRIVER": "string",
        "PERFORMANCE": "string",
        "SERVER": "string"
      },
      "Type": "IType",
      "ILevel": {
        "value": "number",
        "name": "string"
      },
      "ILevelValues": {
        "ALL": "ILevel",
        "DEBUG": "ILevel",
        "INFO": "ILevel",
        "WARNING": "ILevel",
        "SEVERE": "ILevel",
        "OFF": "ILevel"
      },
      "Level": "ILevelValues",
      "getLevel": "fn(nameOrValue: string) -> ILevel",
      "IEntryJSON": {
        "level": "string",
        "message": "string",
        "timestamp": "number",
        "type": "string"
      },
      "Entry": {
        "!type": "fn(level: ILevel, message: string, opt_timestamp?: number, opt_type?: string)",
        "fromClosureLogRecord": "fn(logRecord: ?, opt_type?: string) -> Entry",
        "prototype": {
          "level": "ILevel",
          "message": "string",
          "timestamp": "number",
          "type": "string",
          "toJSON": "fn() -> IEntryJSON"
        }
      }
    },
    "promise": {
      "all": "fn(arr: [?]) -> ?",
      "asap": "fn(value: ?, callback: Function, opt_errback?: Function)",
      "controlFlow": "fn() -> ControlFlow",
      "createFlow": "fn(callback: fn(flow: ControlFlow)) -> ?",
      "isPromise": "fn(value: ?) -> bool",
      "isGenerator": "fn(fn: Function) -> bool",
      "delayed": "fn(ms: number) -> ?",
      "filter": "fn(arr: [T], fn: fn(element: T, index: number, array: [T]), opt_self?: ?) -> ?",
      "defer": "fn() -> ?",
      "fulfilled": "fn(opt_value?: T) -> ?",
      "map": "fn(arr: [T], fn: fn(element: T, index: number, array: [T]), opt_self?: ?) -> ?",
      "rejected": "fn(opt_reason?: ?) -> ?",
      "checkedNodeCall": "fn(fn: Function, var_args: [?]) -> ?",
      "consume": "fn(generatorFn: Function, opt_self?: ?, var_args: [?]) -> ?",
      "when": "fn(value: T, opt_callback?: fn(value: T), opt_errback?: fn(error: ?)) -> ?",
      "fullyResolved": "fn(value: ?) -> ?",
      "setDefaultFlow": "fn(flow: ControlFlow)",
      "CancellationError": {
        "!type": "fn(opt_msg?: string)",
        "prototype": {
          "name": "string",
          "message": "string"
        }
      },
      "IThenable": {
        "cancel": "fn(opt_reason?: string)",
        "isPending": "fn() -> bool",
        "then": "fn(opt_callback?: fn(value: T), opt_errback?: fn(error: ?)) -> ?",
        "thenCatch": "fn(errback: fn(error: ?)) -> ?",
        "thenFinally": "fn(callback: fn()) -> ?"
      },
      "Thenable": {
        "addImplementation": "fn(ctor: Function)",
        "isImplementation": "fn(object: ?) -> bool",
        "prototype": {
          "cancel": "fn(opt_reason?: string)",
          "isPending": "fn() -> bool",
          "then": "fn(opt_callback?: fn(value: T), opt_errback?: fn(error: ?)) -> ?",
          "thenCatch": "fn(errback: fn(error: ?)) -> ?",
          "thenFinally": "fn(callback: fn()) -> ?"
        }
      },
      "Promise": {
        "!type": "fn()",
        "prototype": {
          "cancel": "fn(reason: ?)",
          "isPending": "fn() -> bool",
          "then": "fn(opt_callback?: fn(value: T), opt_errback?: fn(error: ?)) -> ?",
          "thenCatch": "fn(errback: fn(error: ?)) -> ?",
          "thenFinally": "fn(callback: fn()) -> ?"
        }
      },
      "Deferred": {
        "!type": "fn(opt_flow?: ControlFlow)",
        "State_": {
          "BLOCKED": "number",
          "PENDING": "number",
          "REJECTED": "number",
          "RESOLVED": "number"
        },
        "prototype": {
          "promise": "?",
          "reject": "fn(opt_error?: ?)",
          "errback": "fn(opt_error?: ?)",
          "fulfill": "fn(opt_value?: T)",
          "removeAll": "fn()"
        }
      },
      "IControlFlowTimer": {
        "clearInterval": "fn(ms: number)",
        "clearTimeout": "fn(ms: number)",
        "setInterval": "fn(fn: Function, ms: number)",
        "setTimeout": "fn(fn: Function, ms: number)"
      },
      "ControlFlow": {
        "!type": "fn(opt_timer?: IControlFlowTimer)",
        "defaultTimer": "IControlFlowTimer",
        "EventType": {
          "IDLE": "string",
          "RESET": "string",
          "SCHEDULE_TASK": "string",
          "UNCAUGHT_EXCEPTION": "string"
        },
        "EVENT_LOOP_FREQUENCY": "number",
        "prototype": {
          "timer": "IControlFlowTimer",
          "reset": "fn()",
          "getHistory": "fn() -> [string]",
          "clearHistory": "fn()",
          "annotateError": "fn(e: ?) -> ?",
          "getSchedule": "fn() -> string",
          "execute": "fn(fn: Function, opt_description?: string) -> ?",
          "timeout": "fn(ms: number, opt_description?: string) -> ?",
          "wait": "fn(condition: Function, timeout: number, opt_message?: string) -> ?",
          "await": "fn(promise: ?) -> ?"
        }
      }
    },
    "stacktrace": {
      "Frame": {
        "!type": "fn(context?: string, name?: string, alias?: string, path?: string)",
        "prototype": {
          "getName": "fn() -> string",
          "getUrl": "fn() -> string",
          "getLine": "fn() -> number",
          "getColumn": "fn() -> number",
          "isAnonymous": "fn() -> bool"
        }
      },
      "Snapshot": {
        "!type": "fn(opt_slice?: number)",
        "prototype": {
          "getStacktrace": "fn() -> [Frame]"
        }
      },
      "format": "fn(error: ?) -> ?",
      "get": "fn() -> [Frame]",
      "BROWSER_SUPPORTED": "bool"
    },
    "until": {
      "Condition": {
        "!type": "fn(message: string, fn: fn(webdriver: WebDriver))",
        "prototype": {
          "description": "fn() -> string",
          "fn": "fn(webdriver: WebDriver) -> ?"
        }
      },
      "ableToSwitchToFrame": "fn(frame: number) -> ?",
      "alertIsPresent": "fn() -> ?",
      "elementIsDisabled": "fn(element: IWebElement) -> ?",
      "elementIsEnabled": "fn(element: IWebElement) -> ?",
      "elementIsNotSelected": "fn(element: IWebElement) -> ?",
      "elementIsNotVisible": "fn(element: IWebElement) -> ?",
      "elementIsSelected": "fn(element: IWebElement) -> ?",
      "elementIsVisible": "fn(element: IWebElement) -> ?",
      "elementLocated": "fn(locator: Locator) -> ?",
      "elementTextContains": "fn(element: IWebElement, substr: string) -> ?",
      "elementTextIs": "fn(element: IWebElement, text: string) -> ?",
      "elementTextMatches": "fn(element: IWebElement, regex: RegExp) -> ?",
      "elementsLocated": "fn(locator: Locator) -> ?",
      "stalenessOf": "fn(element: IWebElement) -> ?",
      "titleContains": "fn(substr: string) -> ?",
      "titleIs": "fn(title: string) -> ?",
      "titleMatches": "fn(regex: RegExp) -> ?"
    },
    "ILocation": {
      "x": "number",
      "y": "number"
    },
    "ISize": {
      "width": "number",
      "height": "number"
    },
    "IButton": {
      "LEFT": "number",
      "MIDDLE": "number",
      "RIGHT": "number"
    },
    "Button": "IButton",
    "IKey": {
      "NULL": "string",
      "CANCEL": "string",
      "HELP": "string",
      "BACK_SPACE": "string",
      "TAB": "string",
      "CLEAR": "string",
      "RETURN": "string",
      "ENTER": "string",
      "SHIFT": "string",
      "CONTROL": "string",
      "ALT": "string",
      "PAUSE": "string",
      "ESCAPE": "string",
      "SPACE": "string",
      "PAGE_UP": "string",
      "PAGE_DOWN": "string",
      "END": "string",
      "HOME": "string",
      "ARROW_LEFT": "string",
      "LEFT": "string",
      "ARROW_UP": "string",
      "UP": "string",
      "ARROW_RIGHT": "string",
      "RIGHT": "string",
      "ARROW_DOWN": "string",
      "DOWN": "string",
      "INSERT": "string",
      "DELETE": "string",
      "SEMICOLON": "string",
      "EQUALS": "string",
      "NUMPAD0": "string",
      "NUMPAD1": "string",
      "NUMPAD2": "string",
      "NUMPAD3": "string",
      "NUMPAD4": "string",
      "NUMPAD5": "string",
      "NUMPAD6": "string",
      "NUMPAD7": "string",
      "NUMPAD8": "string",
      "NUMPAD9": "string",
      "MULTIPLY": "string",
      "ADD": "string",
      "SEPARATOR": "string",
      "SUBTRACT": "string",
      "DECIMAL": "string",
      "DIVIDE": "string",
      "F1": "string",
      "F2": "string",
      "F3": "string",
      "F4": "string",
      "F5": "string",
      "F6": "string",
      "F7": "string",
      "F8": "string",
      "F9": "string",
      "F10": "string",
      "F11": "string",
      "F12": "string",
      "COMMAND": "string",
      "META": "string",
      "chord": "fn(var_args: [string])"
    },
    "Key": "IKey",
    "ActionSequence": {
      "!type": "fn(driver: WebDriver)",
      "prototype": {
        "perform": "fn() -> ?",
        "mouseMove": "fn(location: IWebElement, opt_offset?: ILocation) -> ActionSequence",
        "mouseDown": "fn(opt_elementOrButton?: IWebElement, opt_button?: number) -> ActionSequence",
        "mouseUp": "fn(opt_elementOrButton?: IWebElement, opt_button?: number) -> ActionSequence",
        "dragAndDrop": "fn(element: IWebElement, location: IWebElement) -> ActionSequence",
        "click": "fn(opt_elementOrButton?: IWebElement, opt_button?: number) -> ActionSequence",
        "doubleClick": "fn(opt_elementOrButton?: IWebElement, opt_button?: number) -> ActionSequence",
        "keyDown": "fn(key: string) -> ActionSequence",
        "keyUp": "fn(key: string) -> ActionSequence",
        "sendKeys": "fn(var_args: [?]) -> ActionSequence"
      }
    },
    "Alert": {
      "getText": "fn() -> ?",
      "accept": "fn() -> ?",
      "dismiss": "fn() -> ?",
      "sendKeys": "fn(text: string) -> ?"
    },
    "AlertPromise": {},
    "UnhandledAlertError": {
      "getAlertText": "fn() -> string",
      "getAlert": "fn() -> Alert"
    },
    "IBrowser": {
      "ANDROID": "string",
      "CHROME": "string",
      "FIREFOX": "string",
      "INTERNET_EXPLORER": "string",
      "IPAD": "string",
      "IPHONE": "string",
      "OPERA": "string",
      "PHANTOM_JS": "string",
      "SAFARI": "string",
      "HTMLUNIT": "string"
    },
    "Browser": "IBrowser",
    "ProxyConfig": {
      "proxyType": "string",
      "proxyAutoconfigUrl": "string",
      "ftpProxy": "string",
      "httpProxy": "string",
      "sslProxy": "string",
      "noProxy": "string"
    },
    "Builder": {
      "!type": "fn()",
      "prototype": {
        "build": "fn() -> WebDriver",
        "forBrowser": "fn(name: string, opt_version?: string, opt_platform?: string) -> Builder",
        "getCapabilities": "fn() -> Capabilities",
        "getServerUrl": "fn() -> string",
        "setAlertBehavior": "fn(behavior: string) -> Builder",
        "setChromeOptions": "fn(options: chrome.Options) -> Builder",
        "setControlFlow": "fn(flow: webdriver.promise.ControlFlow) -> Builder",
        "setEnableNativeEvents": "fn(enabled: bool) -> Builder",
        "setFirefoxOptions": "fn(options: firefox.Options) -> Builder",
        "setLoggingPrefs": "fn(prefs: webdriver.logging.Preferences) -> Builder",
        "setProxy": "fn(config: ProxyConfig) -> Builder",
        "setScrollBehavior": "fn(behavior: number) -> Builder",
        "usingServer": "fn(url: string) -> Builder",
        "withCapabilities": "fn(capabilities: Capabilities) -> Builder"
      }
    },
    "ICapability": {
      "ACCEPT_SSL_CERTS": "string",
      "BROWSER_NAME": "string",
      "ELEMENT_SCROLL_BEHAVIOR": "string",
      "HANDLES_ALERTS": "string",
      "LOGGING_PREFS": "string",
      "NATIVE_EVENTS": "string",
      "PLATFORM": "string",
      "PROXY": "string",
      "ROTATABLE": "string",
      "SECURE_SSL": "string",
      "SUPPORTS_APPLICATION_CACHE": "string",
      "SUPPORTS_CSS_SELECTORS": "string",
      "SUPPORTS_JAVASCRIPT": "string",
      "SUPPORTS_LOCATION_CONTEXT": "string",
      "TAKES_SCREENSHOT": "string",
      "UNEXPECTED_ALERT_BEHAVIOR": "string",
      "VERSION": "string"
    },
    "Capability": "ICapability",
    "Capabilities": {
      "!type": "fn(opt_other?: Capabilities)",
      "android": "fn() -> Capabilities",
      "chrome": "fn() -> Capabilities",
      "firefox": "fn() -> Capabilities",
      "ie": "fn() -> Capabilities",
      "ipad": "fn() -> Capabilities",
      "iphone": "fn() -> Capabilities",
      "opera": "fn() -> Capabilities",
      "phantomjs": "fn() -> Capabilities",
      "safari": "fn() -> Capabilities",
      "htmlunit": "fn() -> Capabilities",
      "htmlunitwithjs": "fn() -> Capabilities",
      "prototype": {
        "toJSON": "fn() -> ?",
        "merge": "fn(other: Capabilities) -> Capabilities",
        "set": "fn(key: string, value: ?) -> Capabilities",
        "setLoggingPrefs": "fn(prefs: webdriver.logging.Preferences) -> Capabilities",
        "setProxy": "fn(proxy: ProxyConfig) -> Capabilities",
        "setEnableNativeEvents": "fn(enabled: bool) -> Capabilities",
        "setScrollBehavior": "fn(behavior: number) -> Capabilities",
        "setAlertBehavior": "fn(behavior: string) -> Capabilities",
        "get": "fn(key: string) -> ?",
        "has": "fn(key: string) -> bool"
      }
    },
    "ICommandName": {
      "GET_SERVER_STATUS": "string",
      "NEW_SESSION": "string",
      "GET_SESSIONS": "string",
      "DESCRIBE_SESSION": "string",
      "CLOSE": "string",
      "QUIT": "string",
      "GET_CURRENT_URL": "string",
      "GET": "string",
      "GO_BACK": "string",
      "GO_FORWARD": "string",
      "REFRESH": "string",
      "ADD_COOKIE": "string",
      "GET_COOKIE": "string",
      "GET_ALL_COOKIES": "string",
      "DELETE_COOKIE": "string",
      "DELETE_ALL_COOKIES": "string",
      "GET_ACTIVE_ELEMENT": "string",
      "FIND_ELEMENT": "string",
      "FIND_ELEMENTS": "string",
      "FIND_CHILD_ELEMENT": "string",
      "FIND_CHILD_ELEMENTS": "string",
      "CLEAR_ELEMENT": "string",
      "CLICK_ELEMENT": "string",
      "SEND_KEYS_TO_ELEMENT": "string",
      "SUBMIT_ELEMENT": "string",
      "GET_CURRENT_WINDOW_HANDLE": "string",
      "GET_WINDOW_HANDLES": "string",
      "GET_WINDOW_POSITION": "string",
      "SET_WINDOW_POSITION": "string",
      "GET_WINDOW_SIZE": "string",
      "SET_WINDOW_SIZE": "string",
      "MAXIMIZE_WINDOW": "string",
      "SWITCH_TO_WINDOW": "string",
      "SWITCH_TO_FRAME": "string",
      "GET_PAGE_SOURCE": "string",
      "GET_TITLE": "string",
      "EXECUTE_SCRIPT": "string",
      "EXECUTE_ASYNC_SCRIPT": "string",
      "GET_ELEMENT_TEXT": "string",
      "GET_ELEMENT_TAG_NAME": "string",
      "IS_ELEMENT_SELECTED": "string",
      "IS_ELEMENT_ENABLED": "string",
      "IS_ELEMENT_DISPLAYED": "string",
      "GET_ELEMENT_LOCATION": "string",
      "GET_ELEMENT_LOCATION_IN_VIEW": "string",
      "GET_ELEMENT_SIZE": "string",
      "GET_ELEMENT_ATTRIBUTE": "string",
      "GET_ELEMENT_VALUE_OF_CSS_PROPERTY": "string",
      "ELEMENT_EQUALS": "string",
      "SCREENSHOT": "string",
      "IMPLICITLY_WAIT": "string",
      "SET_SCRIPT_TIMEOUT": "string",
      "SET_TIMEOUT": "string",
      "ACCEPT_ALERT": "string",
      "DISMISS_ALERT": "string",
      "GET_ALERT_TEXT": "string",
      "SET_ALERT_TEXT": "string",
      "EXECUTE_SQL": "string",
      "GET_LOCATION": "string",
      "SET_LOCATION": "string",
      "GET_APP_CACHE": "string",
      "GET_APP_CACHE_STATUS": "string",
      "CLEAR_APP_CACHE": "string",
      "IS_BROWSER_ONLINE": "string",
      "SET_BROWSER_ONLINE": "string",
      "GET_LOCAL_STORAGE_ITEM": "string",
      "GET_LOCAL_STORAGE_KEYS": "string",
      "SET_LOCAL_STORAGE_ITEM": "string",
      "REMOVE_LOCAL_STORAGE_ITEM": "string",
      "CLEAR_LOCAL_STORAGE": "string",
      "GET_LOCAL_STORAGE_SIZE": "string",
      "GET_SESSION_STORAGE_ITEM": "string",
      "GET_SESSION_STORAGE_KEYS": "string",
      "SET_SESSION_STORAGE_ITEM": "string",
      "REMOVE_SESSION_STORAGE_ITEM": "string",
      "CLEAR_SESSION_STORAGE": "string",
      "GET_SESSION_STORAGE_SIZE": "string",
      "SET_SCREEN_ORIENTATION": "string",
      "GET_SCREEN_ORIENTATION": "string",
      "CLICK": "string",
      "DOUBLE_CLICK": "string",
      "MOUSE_DOWN": "string",
      "MOUSE_UP": "string",
      "MOVE_TO": "string",
      "SEND_KEYS_TO_ACTIVE_ELEMENT": "string",
      "TOUCH_SINGLE_TAP": "string",
      "TOUCH_DOWN": "string",
      "TOUCH_UP": "string",
      "TOUCH_MOVE": "string",
      "TOUCH_SCROLL": "string",
      "TOUCH_DOUBLE_TAP": "string",
      "TOUCH_LONG_PRESS": "string",
      "TOUCH_FLICK": "string",
      "GET_AVAILABLE_LOG_TYPES": "string",
      "GET_LOG": "string",
      "GET_SESSION_LOGS": "string"
    },
    "CommandName": "ICommandName",
    "Command": {
      "!type": "fn(name: string)",
      "prototype": {
        "getName": "fn() -> string",
        "setParameter": "fn(name: string, value: ?) -> Command",
        "setParameters": "fn(parameters: ?) -> Command",
        "getParameter": "fn(key: string) -> ?",
        "getParameters": "fn() -> ?"
      }
    },
    "CommandExecutor": {
      "execute": "fn(command: Command, callback: fn(error: Error, responseObject: ?))"
    },
    "EventEmitter": {
      "!type": "fn()",
      "prototype": {
        "emit": "fn(type: string, var_args: [?])",
        "listeners": "fn(type: string) -> ?",
        "addListener": "fn(type: string, listenerFn: Function, opt_scope?: ?) -> EventEmitter",
        "once": "fn(type: string, listenerFn: ?, opt_scope?: ?) -> EventEmitter",
        "on": "fn(type: string, listenerFn: Function, opt_scope?: ?) -> EventEmitter",
        "removeListener": "fn(type: string, listenerFn: Function) -> EventEmitter",
        "removeAllListeners": "fn(opt_type?: string) -> EventEmitter"
      }
    },
    "WebDriverNavigation": {
      "to": "fn(url: string) -> ?",
      "back": "fn() -> ?",
      "forward": "fn() -> ?",
      "refresh": "fn() -> ?"
    },
    "IWebDriverOptionsCookie": {
      "name": "string",
      "value": "string",
      "path": "string",
      "domain": "string",
      "secure": "bool",
      "expiry": "number"
    },
    "WebDriverOptions": {
      "addCookie": "fn(name: string, value: string, opt_path?: string, opt_domain?: string, opt_isSecure?: bool, opt_expiry?: number) -> ?",
      "deleteAllCookies": "fn() -> ?",
      "deleteCookie": "fn(name: string) -> ?",
      "getCookies": "fn() -> ?",
      "getCookie": "fn(name: string) -> ?",
      "logs": "fn() -> WebDriverLogs",
      "timeouts": "fn() -> WebDriverTimeouts",
      "window": "fn() -> WebDriverWindow"
    },
    "WebDriverTimeouts": {
      "implicitlyWait": "fn(ms: number) -> ?",
      "setScriptTimeout": "fn(ms: number) -> ?",
      "pageLoadTimeout": "fn(ms: number) -> ?"
    },
    "WebDriverWindow": {
      "getPosition": "fn() -> ?",
      "setPosition": "fn(x: number, y: number) -> ?",
      "getSize": "fn() -> ?",
      "setSize": "fn(width: number, height: number) -> ?",
      "maximize": "fn() -> ?"
    },
    "WebDriverLogs": {
      "get": "fn(type: string) -> ?",
      "getAvailableLogTypes": "fn() -> ?"
    },
    "WebDriverTargetLocator": {
      "activeElement": "fn() -> WebElementPromise",
      "defaultContent": "fn() -> ?",
      "frame": "fn(nameOrIndex: string) -> ?",
      "window": "fn(nameOrHandle: string) -> ?",
      "alert": "fn() -> AlertPromise"
    },
    "WebDriver": {
      "!type": "fn(session: Session, executor: CommandExecutor, opt_flow?: webdriver.promise.ControlFlow)",
      "Navigation": "WebDriverNavigation",
      "Options": "WebDriverOptions",
      "Timeouts": "WebDriverTimeouts",
      "Window": "WebDriverWindow",
      "Logs": "WebDriverLogs",
      "TargetLocator": "WebDriverTargetLocator",
      "attachToSession": "fn(executor: CommandExecutor, sessionId: string, opt_flow?: webdriver.promise.ControlFlow) -> WebDriver",
      "createSession": "fn(executor: CommandExecutor, desiredCapabilities: Capabilities, opt_flow?: webdriver.promise.ControlFlow) -> WebDriver",
      "prototype": {
        "controlFlow": "fn() -> webdriver.promise.ControlFlow",
        "schedule": "fn(command: Command, description: string) -> ?",
        "getSession": "fn() -> ?",
        "getCapabilities": "fn() -> ?",
        "quit": "fn() -> ?",
        "actions": "fn() -> ActionSequence",
        "executeScript": "fn(script: string, var_args: [?]) -> ?",
        "executeAsyncScript": "fn(script: string, var_args: [?]) -> ?",
        "call": "fn(fn: Function, opt_scope?: ?, var_args: [?]) -> ?",
        "wait": "fn(condition: ?, timeout: number, opt_message?: string) -> ?",
        "sleep": "fn(ms: number) -> ?",
        "getWindowHandle": "fn() -> ?",
        "getAllWindowHandles": "fn() -> ?",
        "getPageSource": "fn() -> ?",
        "close": "fn() -> ?",
        "get": "fn(url: string) -> ?",
        "getCurrentUrl": "fn() -> ?",
        "getTitle": "fn() -> ?",
        "findElement": "fn(locatorOrElement: Locator, var_args: [?]) -> WebElementPromise",
        "isElementPresent": "fn(locatorOrElement: Locator, var_args: [?]) -> ?",
        "findElements": "fn(locator: Locator, var_args: [?]) -> ?",
        "takeScreenshot": "fn() -> ?",
        "manage": "fn() -> WebDriverOptions",
        "navigate": "fn() -> WebDriverNavigation",
        "switchTo": "fn() -> WebDriverTargetLocator"
      }
    },
    "IWebElementId": {
      "ELEMENT": "string"
    },
    "IWebElement": {
      "click": "fn() -> ?",
      "sendKeys": "fn(var_args: [string]) -> ?",
      "getTagName": "fn() -> ?",
      "getCssValue": "fn(cssStyleProperty: string) -> ?",
      "getAttribute": "fn(attributeName: string) -> ?",
      "getText": "fn() -> ?",
      "getSize": "fn() -> ?",
      "getLocation": "fn() -> ?",
      "isEnabled": "fn() -> ?",
      "isSelected": "fn() -> ?",
      "submit": "fn() -> ?",
      "clear": "fn() -> ?",
      "isDisplayed": "fn() -> ?",
      "getOuterHtml": "fn() -> ?",
      "getId": "fn() -> ?",
      "getInnerHtml": "fn() -> ?"
    },
    "IWebElementFinders": {
      "findElement": "fn(locator: Locator) -> WebElementPromise",
      "isElementPresent": "fn(locator: Locator) -> ?",
      "findElements": "fn(locator: Locator) -> ?"
    },
    "WebElement": {
      "!type": "fn(driver: WebDriver, id: ?)",
      "ELEMENT_KEY": "string",
      "equals": "fn(a: WebElement, b: WebElement) -> ?",
      "prototype": {
        "getDriver": "fn() -> WebDriver",
        "findElement": "fn(locator: Locator) -> WebElementPromise",
        "isElementPresent": "fn(locator: Locator) -> ?",
        "findElements": "fn(locator: Locator) -> ?",
        "click": "fn() -> ?",
        "sendKeys": "fn(var_args: [string]) -> ?",
        "getTagName": "fn() -> ?",
        "getCssValue": "fn(cssStyleProperty: string) -> ?",
        "getAttribute": "fn(attributeName: string) -> ?",
        "getText": "fn() -> ?",
        "getSize": "fn() -> ?",
        "getLocation": "fn() -> ?",
        "isEnabled": "fn() -> ?",
        "isSelected": "fn() -> ?",
        "submit": "fn() -> ?",
        "clear": "fn() -> ?",
        "isDisplayed": "fn() -> ?",
        "getOuterHtml": "fn() -> ?",
        "getId": "fn() -> ?",
        "getInnerHtml": "fn() -> ?"
      }
    },
    "WebElementPromise": {
      "prototype": {
        "cancel": "fn(opt_reason?: string)",
        "isPending": "fn() -> bool",
        "then": "fn(opt_callback?: fn(value: WebElement), opt_errback?: fn(error: ?)) -> ?",
        "thenCatch": "fn(errback: fn(error: ?)) -> ?",
        "thenFinally": "fn(callback: fn()) -> ?"
      }
    },
    "ILocatorStrategy": {
      "className": "fn(value: string) -> Locator",
      "css": "fn(value: string) -> Locator",
      "id": "fn(value: string) -> Locator",
      "js": "fn(script: ?, var_args: [?]) -> fn(WebDriver: webdriver.WebDriver)",
      "linkText": "fn(value: string) -> Locator",
      "name": "fn(value: string) -> Locator",
      "partialLinkText": "fn(value: string) -> Locator",
      "tagName": "fn(value: string) -> Locator",
      "xpath": "fn(value: string) -> Locator"
    },
    "By": "ILocatorStrategy",
    "Locator": {
      "using": "string",
      "value": "string"
    },
    "Session": {
      "!type": "fn(id: string, capabilities: Capabilities)",
      "prototype": {
        "getId": "fn() -> string",
        "getCapabilities": "fn() -> Capabilities",
        "getCapability": "fn(key: string) -> ?",
        "toJSON": "fn() -> string"
      }
    }
  },
  "testing": {
    "describe": "fn(name: string, fn: Function)",
    "xdescribe": "fn(name: string, fn: Function)",
    "after": "fn(fn: Function)",
    "afterEach": "fn(fn: Function)",
    "before": "fn(fn: Function)",
    "beforeEach": "fn(fn: Function)",
    "it": "fn(name: string, fn: Function)",
    "iit": "fn(name: string, fn: Function)",
    "xit": "fn(name: string, fn: Function)"
  },
  "'selenium-webdriver/chrome'": "chrome",
  "'selenium-webdriver/firefox'": "firefox",
  "'selenium-webdriver/executors'": "executors",
  "'selenium-webdriver'": "webdriver",
  "'selenium-webdriver/testing'": "testing",
  "!name": "selenium-webdriver.d.ts",
  "!define": {
    "ret": {}
  }
}
