{
  "IDateJSLiteral": {
    "milliseconds": "number",
    "seconds": "number",
    "minutes": "number",
    "hours": "number",
    "days": "number",
    "months": "number",
    "years": "number"
  },
  "IDateJSStatic": {
    "today": "fn() -> IDateJS",
    "compare": "fn(date1: IDateJS, date2: IDateJS) -> number",
    "equals": "fn(date1: IDateJS, date2?: IDateJS) -> bool",
    "getDayNumberFromName": "fn(dayName: string) -> number",
    "getMonthNumberFromName": "fn(monthName: string) -> number",
    "isLeapYear": "fn(year: number) -> bool",
    "getDaysInMonth": "fn(year: number, month: number) -> number",
    "getTimezoneAbbreviation": "fn(timezoneOffset: number, isDayLightSavingsTime: bool) -> string",
    "getTimezoneOffset": "fn(timezoneAbbreviation?: string, isDayLightSavingsTime?: bool) -> number",
    "parse": "fn(dateString: string) -> IDateJS",
    "parseExact": "fn(dateString: string, formatString: string) -> IDateJS",
    "validateDay": "fn(day: number, fullYear: number, monthNumber: number) -> bool",
    "validateHour": "fn(hour: number) -> bool",
    "validateMillisecond": "fn(milliseconds: number) -> bool",
    "validateMinute": "fn(minutes: number) -> bool",
    "validateMonth": "fn(month: number) -> bool",
    "validateSecond": "fn(second: number) -> bool",
    "validateYear": "fn(year: number) -> bool"
  },
  "IDateJS": {
    "add": "fn(config?: IDateJSLiteral) -> IDateJS",
    "addMilliseconds": "fn(milliseconds: number) -> IDateJS",
    "addSeconds": "fn(seconds: number) -> IDateJS",
    "addMinutes": "fn(minutes: number) -> IDateJS",
    "addHours": "fn(hours: number) -> IDateJS",
    "addDays": "fn(days: number) -> IDateJS",
    "addWeeks": "fn(weeks: number) -> IDateJS",
    "addMonths": "fn(months: number) -> IDateJS",
    "addYears": "fn(years: number) -> IDateJS",
    "clearTime": "fn() -> IDateJS",
    "setTimeToNow": "fn() -> IDateJS",
    "clone": "fn() -> IDateJS",
    "between": "fn(startDate: IDateJS, endDate: IDateJS) -> bool",
    "compareTo": "fn(date: IDateJS) -> number",
    "equals": "fn(date: IDateJS) -> bool",
    "isAfter": "fn(date: IDateJS) -> bool",
    "isBefore": "fn(date: IDateJS) -> bool",
    "isToday": "fn(date: IDateJS) -> bool",
    "getElapsed": "fn(date: IDateJS) -> number",
    "getOrdinalNumber": "fn() -> number",
    "getTimezone": "fn() -> string",
    "getUTCOffset": "fn() -> string",
    "getWeek": "fn() -> number",
    "getISOWeek": "fn() -> string",
    "setWeek": "fn(week: number) -> IDateJS",
    "hasDaylightSavingTime": "fn() -> bool",
    "isDaylightSavingTime": "fn() -> bool",
    "moveToDayOfWeek": "fn(dayOfWeek: number, direction: number) -> IDateJS",
    "moveToFirstDayOfMonth": "fn() -> IDateJS",
    "moveToLastDayOfMonth": "fn() -> IDateJS",
    "moveToMonth": "fn(month: number, direction: number) -> IDateJS",
    "moveToNthOccurrence": "fn(dayOfWeek: number, occurrence: number) -> IDateJS",
    "set": "fn(config: IDateJSLiteral) -> IDateJS",
    "setTimezone": "fn(timezoneAbbreviation: string) -> IDateJS",
    "setTimezoneOffset": "fn(timezoneOffset: number) -> IDateJS",
    "toISOString": "fn() -> string"
  },
  "!name": "datejs.d.ts"
}
