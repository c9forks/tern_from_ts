{
  "afterEach": "fn(fn: jest.EmptyFunction)",
  "beforeEach": "fn(fn: jest.EmptyFunction)",
  "describe": "fn(name: string, fn: jest.EmptyFunction)",
  "it": "jest.It",
  "pit": "fn(name: string, fn: jest.EmptyFunction)",
  "require": "jest.Require",
  "xdescribe": "fn(name: string, fn: jest.EmptyFunction)",
  "xit": "fn(name: string, fn: jest.EmptyFunction)",
  "expect": "fn(actual: ?) -> jest.Matchers",
  "jest": {
    "autoMockOff": "fn()",
    "autoMockOn": "fn()",
    "clearAllTimers": "fn()",
    "dontMock": "fn(moduleName: string)",
    "genMockFromModule": "fn(moduleName: string) -> ?",
    "genMockFunction": "fn() -> ?",
    "genMockFn": "fn() -> ?",
    "mock": "fn(moduleName: string)",
    "runAllTicks": "fn()",
    "runAllTimers": "fn()",
    "runOnlyPendingTimers": "fn()",
    "setMock": "fn(moduleName: string, moduleExports: T)",
    "EmptyFunction": {},
    "Matchers": {
      "not": "Matchers",
      "toThrow": "fn(expected?: ?) -> bool",
      "toBe": "fn(expected: ?) -> bool",
      "toEqual": "fn(expected: ?) -> bool",
      "toBeFalsy": "fn() -> bool",
      "toBeTruthy": "fn() -> bool",
      "toBeNull": "fn() -> bool",
      "toBeUndefined": "fn() -> bool",
      "toMatch": "fn(expected: RegExp) -> bool",
      "toContain": "fn(expected: string) -> bool",
      "toBeCloseTo": "fn(expected: number, delta: number) -> bool",
      "toBeGreaterThan": "fn(expected: number) -> bool",
      "toBeLessThen": "fn(expected: number) -> bool",
      "toBeCalled": "fn() -> bool",
      "toBeCalledWith": "fn(args: [?]) -> bool",
      "lastCalledWith": "fn(args: [?]) -> bool"
    },
    "It": {
      "only": "fn(name: string, fn: EmptyFunction)"
    },
    "Require": {
      "requireActual": "fn(moduleName: string) -> ?"
    },
    "Mock": {
      "mock": "?",
      "mockClear": "fn()",
      "mockImplementation": "fn(fn: Function) -> ?",
      "mockImpl": "fn(fn: Function) -> ?",
      "mockReturnThis": "fn() -> ?",
      "mockReturnValue": "fn(value: ?) -> ?",
      "mockReturnValueOnce": "fn(value: ?) -> ?"
    },
    "MockContext": {
      "calls": "[[?]]",
      "instances": "[T]"
    }
  },
  "!name": "jest.d.ts"
}
