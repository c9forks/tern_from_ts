{
  "_": {
    "LoDashStatic": {
      "VERSION": "string",
      "support": "Support",
      "templateSettings": "TemplateSettings",
      "chain": "fn(value: number) -> ?",
      "tap": "fn(value: T, interceptor: fn(value: T)) -> T",
      "compact": "fn(array: ?) -> [T]",
      "difference": "fn(array: ?, others: [?]) -> [T]",
      "findIndex": "fn(array: ?, callback: ?, thisArg?: ?) -> number",
      "findLastIndex": "fn(array: ?, callback: ?, thisArg?: ?) -> number",
      "first": "fn(array: ?) -> T",
      "head": "fn(array: ?) -> T",
      "take": "fn(array: ?) -> T",
      "flatten": "fn(array: ?, isShallow?: bool) -> [T]",
      "indexOf": "fn(array: ?, value: T) -> number",
      "initial": "fn(array: ?) -> [T]",
      "intersection": "fn(arrays: [?]) -> [T]",
      "last": "fn(array: ?) -> T",
      "lastIndexOf": "fn(array: ?, value: T, fromIndex?: number) -> number",
      "pull": "fn(array: ?, values: [?]) -> [?]",
      "range": "fn(start: number, stop: number, step?: number) -> [number]",
      "remove": "fn(array: ?, callback?: ?, thisArg?: ?) -> [?]",
      "rest": "fn(array: ?) -> [T]",
      "drop": "fn(array: ?) -> [T]",
      "tail": "fn(array: ?) -> [T]",
      "sortedIndex": "fn(array: ?, value: T, callback?: fn(x: T), thisArg?: ?) -> number",
      "union": "fn(arrays: [?]) -> [T]",
      "uniq": "fn(array: ?, isSorted?: bool) -> [T]",
      "unique": "fn(array: ?, isSorted?: bool) -> [T]",
      "without": "fn(array: ?, values: [T]) -> [T]",
      "xor": "fn(array: ?, others: [?]) -> [T]",
      "zip": "fn(arrays: [[?]]) -> [[?]]",
      "unzip": "fn(arrays: [[?]]) -> [[?]]",
      "zipObject": "fn(keys: ?, values: ?) -> TResult",
      "object": "fn(keys: ?, values: ?) -> TResult",
      "at": "fn(collection: ?, indexes: [number]) -> [T]",
      "contains": "fn(collection: ?, target: T, fromIndex?: number) -> bool",
      "include": "fn(collection: ?, target: T, fromIndex?: number) -> bool",
      "countBy": "fn(collection: ?, callback?: ?, thisArg?: ?) -> ?",
      "every": "fn(collection: ?, callback?: ?, thisArg?: ?) -> bool",
      "all": "fn(collection: ?, callback?: ?, thisArg?: ?) -> bool",
      "filter": "fn(collection: ?, callback: ?, thisArg?: ?) -> [T]",
      "select": "fn(collection: ?, callback: ?, thisArg?: ?) -> [T]",
      "find": "fn(collection: ?, callback: ?, thisArg?: ?) -> T",
      "detect": "fn(collection: ?, callback: ?, thisArg?: ?) -> T",
      "findWhere": "fn(collection: ?, callback: ?, thisArg?: ?) -> T",
      "findLast": "fn(collection: ?, callback: ?, thisArg?: ?) -> T",
      "forEach": "fn(collection: ?, callback: ?, thisArg?: ?) -> ?",
      "each": "fn(collection: ?, callback: ?, thisArg?: ?) -> ?",
      "forEachRight": "fn(collection: ?, callback: ?, thisArg?: ?) -> ?",
      "eachRight": "fn(collection: ?, callback: ?, thisArg?: ?) -> ?",
      "groupBy": "fn(collection: ?, callback?: ?, thisArg?: ?) -> ?",
      "indexBy": "fn(list: ?, iterator: ?, context?: ?) -> ?",
      "invoke": "fn(collection: ?, methodName: string, args: [?]) -> ?",
      "map": "fn(collection: ?, callback: ?, thisArg?: ?) -> [TResult]",
      "collect": "fn(collection: ?, callback: ?, thisArg?: ?) -> [TResult]",
      "max": "fn(collection: ?, callback?: ?, thisArg?: ?) -> T",
      "min": "fn(collection: ?, callback?: ?, thisArg?: ?) -> T",
      "pluck": "fn(collection: ?, property: string) -> [?]",
      "reduce": "fn(collection: ?, callback: ?, accumulator: TResult, thisArg?: ?) -> TResult",
      "inject": "fn(collection: ?, callback: ?, accumulator: TResult, thisArg?: ?) -> TResult",
      "foldl": "fn(collection: ?, callback: ?, accumulator: TResult, thisArg?: ?) -> TResult",
      "reduceRight": "fn(collection: ?, callback: ?, accumulator: TResult, thisArg?: ?) -> TResult",
      "foldr": "fn(collection: ?, callback: ?, accumulator: TResult, thisArg?: ?) -> TResult",
      "reject": "fn(collection: ?, callback: ?, thisArg?: ?) -> [T]",
      "sample": "fn(collection: ?) -> T",
      "shuffle": "fn(collection: ?) -> [T]",
      "size": "fn(collection: ?) -> number",
      "some": "fn(collection: ?, callback?: ?, thisArg?: ?) -> bool",
      "any": "fn(collection: ?, callback?: ?, thisArg?: ?) -> bool",
      "sortBy": "fn(collection: ?, callback?: ?, thisArg?: ?) -> [T]",
      "toArray": "fn(collection: ?) -> [T]",
      "where": "fn(list: ?, properties: U) -> [T]",
      "after": "fn(n: number, func: Function) -> Function",
      "bind": "fn(func: Function, thisArg: ?, args: [?]) -> fn()",
      "bindAll": "fn(object: T, methodNames: [string]) -> T",
      "bindKey": "fn(object: T, key: string, args: [?]) -> Function",
      "compose": "fn(funcs: [Function]) -> Function",
      "createCallback": "fn(func: string, thisArg?: ?, argCount?: number) -> fn()",
      "curry": "fn(func: Function, arity?: number) -> Function",
      "debounce": "fn(func: T, wait: number, options?: DebounceSettings) -> T",
      "defer": "fn(func: Function, args: [?]) -> number",
      "delay": "fn(func: Function, wait: number, args: [?]) -> number",
      "memoize": "fn(func: T, resolver?: Function) -> T",
      "once": "fn(func: T) -> T",
      "partial": "fn(func: Function, args: [?]) -> Function",
      "partialRight": "fn(func: Function, args: [?]) -> Function",
      "throttle": "fn(func: T, wait: number, options?: ThrottleSettings) -> T",
      "wrap": "fn(value: ?, wrapper: fn(func: Function, args: [?])) -> Function",
      "assign": "fn(object: T, s1: S1, callback?: fn(objectValue: Value, sourceValue: Value), thisArg?: ?) -> Result",
      "extend": "fn(object: T, s1: S1, callback?: fn(objectValue: Value, sourceValue: Value), thisArg?: ?) -> Result",
      "clone": "fn(value: T, deep?: bool, callback?: fn(value: ?), thisArg?: ?) -> T",
      "cloneDeep": "fn(value: T, callback?: fn(value: ?), thisArg?: ?) -> T",
      "defaults": "fn(object: T, sources: [?]) -> TResult",
      "findKey": "fn(object: ?, callback: fn(value: ?), thisArg?: ?) -> string",
      "findLastKey": "fn(object: ?, callback: fn(value: ?), thisArg?: ?) -> string",
      "forIn": "fn(object: ?, callback?: ?, thisArg?: ?) -> ?",
      "forInRight": "fn(object: ?, callback?: ?, thisArg?: ?) -> ?",
      "forOwn": "fn(object: ?, callback?: ?, thisArg?: ?) -> ?",
      "forOwnRight": "fn(object: ?, callback?: ?, thisArg?: ?) -> ?",
      "functions": "fn(object: ?) -> [string]",
      "methods": "fn(object: ?) -> [string]",
      "has": "fn(object: ?, property: string) -> bool",
      "invert": "fn(object: ?) -> ?",
      "isArguments": "fn(value: ?) -> bool",
      "isArray": "fn(value: ?) -> bool",
      "isBoolean": "fn(value: ?) -> bool",
      "isDate": "fn(value: ?) -> bool",
      "isElement": "fn(value: ?) -> bool",
      "isEmpty": "fn(value: [?]) -> bool",
      "isEqual": "fn(a: ?, b: ?, callback?: fn(a: ?, b: ?), thisArg?: ?) -> bool",
      "isFinite": "fn(value: ?) -> bool",
      "isFunction": "fn(value: ?) -> bool",
      "isNaN": "fn(value: ?) -> bool",
      "isNull": "fn(value: ?) -> bool",
      "isNumber": "fn(value: ?) -> bool",
      "isObject": "fn(value: ?) -> bool",
      "isPlainObject": "fn(value: ?) -> bool",
      "isRegExp": "fn(value: ?) -> bool",
      "isString": "fn(value: ?) -> bool",
      "isUndefined": "fn(value: ?) -> bool",
      "keys": "fn(object: ?) -> [string]",
      "mapValues": "fn(obj: ?, callback: ?, thisArg?: ?) -> ?",
      "merge": "fn(object: T, s1: S1, callback?: fn(objectValue: Value, sourceValue: Value), thisArg?: ?) -> Result",
      "omit": "fn(object: T, keys: [string]) -> Omitted",
      "pairs": "fn(object: ?) -> [[?]]",
      "pick": "fn(object: T, keys: [string]) -> Picked",
      "transform": "fn(collection: ?, callback: ?, accumulator: Acc, thisArg?: ?) -> Acc",
      "values": "fn(object: ?) -> [?]",
      "escape": "fn(str: string) -> string",
      "identity": "fn(value: T) -> T",
      "mixin": "fn(object: ?)",
      "noConflict": "fn() -> _",
      "parseInt": "fn(value: string) -> number",
      "property": "fn(key: string) -> fn(obj: T)",
      "random": "fn(max: number, floating?: bool) -> number",
      "result": "fn(object: ?, property: string) -> ?",
      "runInContext": "fn(context: ?) -> _",
      "template": "fn(text: string) -> TemplateExecutor",
      "times": "fn(n: number, callback: fn(num: number), context?: ?) -> [TResult]",
      "unescape": "fn(string: string) -> string",
      "uniqueId": "fn(prefix?: string) -> string",
      "noop": "fn()",
      "constant": "fn(value: T) -> fn()",
      "create": "fn(prototype: Object, properties?: Object) -> Object"
    },
    "TemplateSettings": {
      "escape": "RegExp",
      "evaluate": "RegExp",
      "imports": "?",
      "interpolate": "RegExp",
      "variable": "string"
    },
    "Support": {
      "argsClass": "bool",
      "argsObject": "bool",
      "enumErrorProps": "bool",
      "fastBind": "bool",
      "funcDecomp": "bool",
      "funcNames": "bool",
      "nonEnumArgs": "bool",
      "nonEnumShadows": "bool",
      "ownLast": "bool",
      "spliceObjects": "bool",
      "unindexedChars": "bool"
    },
    "LoDashWrapperBase": {
      "value": "fn() -> T",
      "chain": "fn() -> TWrapper",
      "tap": "fn(interceptor: fn(value: T)) -> TWrapper"
    },
    "LoDashWrapper": {
      "after": "fn(func: Function) -> ?",
      "createCallback": "fn(thisArg?: ?, argCount?: number) -> ?"
    },
    "LoDashObjectWrapper": {
      "forEach": "fn(callback: ?, thisArg?: ?) -> ?",
      "each": "fn(callback: ?, thisArg?: ?) -> ?",
      "forEachRight": "fn(callback: ?, thisArg?: ?) -> ?",
      "eachRight": "fn(callback: ?, thisArg?: ?) -> ?",
      "groupBy": "fn(callback: ?, thisArg?: ?) -> ?",
      "map": "fn(callback: ?, thisArg?: ?) -> ?",
      "collect": "fn(callback: ?, thisArg?: ?) -> ?",
      "pluck": "fn(property: string) -> ?",
      "reduce": "fn(callback: ?, accumulator: TResult, thisArg?: ?) -> TResult",
      "inject": "fn(callback: ?, accumulator: TResult, thisArg?: ?) -> TResult",
      "foldl": "fn(callback: ?, accumulator: TResult, thisArg?: ?) -> TResult",
      "toArray": "fn() -> ?",
      "bind": "fn(thisArg: ?, args: [?]) -> ?",
      "bindAll": "fn(methodNames: [string]) -> ?",
      "bindKey": "fn(key: string, args: [?]) -> ?",
      "compose": "fn(funcs: [Function]) -> ?",
      "createCallback": "fn(thisArg?: ?, argCount?: number) -> ?",
      "curry": "fn(arity?: number) -> ?",
      "debounce": "fn(wait: number, options?: DebounceSettings) -> ?",
      "defer": "fn(args: [?]) -> ?",
      "delay": "fn(wait: number, args: [?]) -> ?",
      "assign": "fn(s1: S1, callback?: fn(objectValue: Value, sourceValue: Value), thisArg?: ?) -> TResult",
      "extend": "fn(s1: S1, callback?: fn(objectValue: Value, sourceValue: Value), thisArg?: ?) -> TResult",
      "defaults": "fn(sources: [?]) -> ?",
      "forIn": "fn(callback: ?, thisArg?: ?) -> ?",
      "forInRight": "fn(callback: ?, thisArg?: ?) -> ?",
      "forOwn": "fn(callback: ?, thisArg?: ?) -> ?",
      "forOwnRight": "fn(callback: ?, thisArg?: ?) -> ?",
      "functions": "fn() -> ?",
      "methods": "fn() -> ?",
      "keys": "fn() -> ?",
      "omit": "fn(keys: [string]) -> ?",
      "pairs": "fn() -> ?"
    },
    "LoDashArrayWrapper": {
      "concat": "fn(items: [T]) -> ?",
      "join": "fn(seperator?: string) -> ?",
      "pop": "fn() -> ?",
      "push": "fn(items: [T])",
      "reverse": "fn() -> ?",
      "shift": "fn() -> ?",
      "slice": "fn(start: number, end?: number) -> ?",
      "sort": "fn(compareFn?: fn(a: T, b: T)) -> ?",
      "splice": "fn(start: number) -> ?",
      "unshift": "fn(items: [?]) -> ?",
      "compact": "fn() -> ?",
      "difference": "fn(others: [?]) -> ?",
      "first": "fn() -> T",
      "head": "fn() -> T",
      "take": "fn() -> T",
      "flatten": "fn(isShallow?: bool) -> ?",
      "uniq": "fn(isSorted?: bool) -> ?",
      "unique": "fn(isSorted?: bool) -> ?",
      "xor": "fn(others: [?]) -> ?",
      "zip": "fn(arrays: [[?]]) -> ?",
      "unzip": "fn(arrays: [?]) -> ?",
      "countBy": "fn(callback?: ?, thisArg?: ?) -> ?",
      "filter": "fn(callback: ?, thisArg?: ?) -> ?",
      "select": "fn(callback: ?, thisArg?: ?) -> ?",
      "find": "fn(callback: ?, thisArg?: ?) -> T",
      "findLast": "fn(callback: ?, thisArg?: ?) -> T",
      "forEach": "fn(callback: ?, thisArg?: ?) -> ?",
      "each": "fn(callback: ?, thisArg?: ?) -> ?",
      "forEachRight": "fn(callback: ?, thisArg?: ?) -> ?",
      "eachRight": "fn(callback: ?, thisArg?: ?) -> ?",
      "groupBy": "fn(callback: ?, thisArg?: ?) -> ?",
      "map": "fn(callback: ?, thisArg?: ?) -> ?",
      "collect": "fn(callback: ?, thisArg?: ?) -> ?",
      "max": "fn(callback?: ?, thisArg?: ?) -> ?",
      "min": "fn(callback?: ?, thisArg?: ?) -> ?",
      "pluck": "fn(property: string) -> ?",
      "reduce": "fn(callback: ?, accumulator: TResult, thisArg?: ?) -> TResult",
      "inject": "fn(callback: ?, accumulator: TResult, thisArg?: ?) -> TResult",
      "foldl": "fn(callback: ?, accumulator: TResult, thisArg?: ?) -> TResult",
      "reject": "fn(callback: ?, thisArg?: ?) -> ?",
      "sortBy": "fn(callback?: ?, thisArg?: ?) -> ?",
      "toArray": "fn() -> ?",
      "where": "fn(properties: U) -> ?"
    },
    "DebounceSettings": {
      "leading": "bool",
      "maxWait": "number",
      "trailing": "bool"
    },
    "ThrottleSettings": {
      "leading": "bool",
      "trailing": "bool"
    },
    "TemplateExecutor": {
      "source": "string"
    },
    "ListIterator": {},
    "ObjectIterator": {},
    "MemoVoidIterator": {},
    "MemoIterator": {},
    "List": {
      "length": "number"
    },
    "Dictionary": {},
    "!type": "_.LoDashStatic"
  },
  "lodash": "_",
  "!name": "lodash.d.ts"
}
