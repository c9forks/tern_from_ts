{
  "D3": {
    "Selectors": {
      "select": {},
      "selectAll": {}
    },
    "D3Event": {
      "dx": "number",
      "dy": "number",
      "clientX": "number",
      "clientY": "number",
      "translate": "[number]",
      "scale": "number",
      "sourceEvent": "D3Event",
      "x": "number",
      "y": "number",
      "keyCode": "number",
      "altKey": "?",
      "type": "string"
    },
    "Base": {
      "behavior": "Behavior.Behavior",
      "event": "D3Event",
      "ascending": "fn(a: T, b: T) -> number",
      "descending": "fn(a: T, b: T) -> number",
      "min": "fn(arr: [T], map: fn(v?: T, i?: number)) -> U",
      "max": "fn(arr: [T], map: fn(v?: T, i?: number)) -> U",
      "extent": "fn(arr: [T], map: fn(v: T)) -> [U]",
      "sum": "fn(arr: [T], map: fn(v: T)) -> number",
      "mean": "fn(arr: [T], map: fn(v: T)) -> number",
      "median": "fn(arr: [T], map: fn(v: T)) -> number",
      "quantile": "fn(arr: [number], p: number)",
      "bisect": "fn(arr: [T], x: T, low?: number, high?: number) -> number",
      "bisectLeft": "fn(arr: [T], x: T, low?: number, high?: number) -> number",
      "bisectRight": "fn(arr: [T], x: T, low?: number, high?: number) -> number",
      "bisector": "fn(accessor: fn(data: ?, index: number)) -> ?",
      "shuffle": "fn(arr: [T]) -> [T]",
      "permute": "fn(arr: [?], indexes: [?]) -> [?]",
      "zip": "fn(arrs: [?]) -> [?]",
      "transform": "fn(definition: string) -> ?",
      "transpose": "fn(matrix: [?]) -> [?]",
      "pairs": "fn(arr: [?]) -> [[?]]",
      "keys": "fn(map: ?) -> [string]",
      "values": "fn(map: ?) -> [?]",
      "entries": "fn(map: ?) -> [?]",
      "merge": "fn(map: [?]) -> [?]",
      "range": {},
      "nest": "fn() -> Nest",
      "xhr": {},
      "text": {},
      "json": "fn(url: string, callback?: fn(error: ?, data: ?))",
      "xml": {},
      "html": "fn(url: string, callback?: fn(response: DocumentFragment))",
      "csv": "Dsv",
      "tsv": "Dsv",
      "time": "Time.Time",
      "scale": "Scale.ScaleBase",
      "interpolate": "Transition.BaseInterpolate",
      "interpolateNumber": "Transition.BaseInterpolate",
      "interpolateRound": "Transition.BaseInterpolate",
      "interpolateString": "Transition.BaseInterpolate",
      "interpolateRgb": "Transition.BaseInterpolate",
      "interpolateHsl": "Transition.BaseInterpolate",
      "interpolateHcl": "Transition.BaseInterpolate",
      "interpolateLab": "Transition.BaseInterpolate",
      "interpolateArray": "Transition.BaseInterpolate",
      "interpolateObject": "Transition.BaseInterpolate",
      "interpolateTransform": "Transition.BaseInterpolate",
      "interpolators": "[Transition.InterpolateFactory]",
      "layout": "Layout.Layout",
      "svg": "Svg.Svg",
      "random": "Random",
      "format": "fn(specifier: string) -> fn(value: number)",
      "formatPrefix": "fn(value: number, precision?: number) -> MetricPrefix",
      "version": "string",
      "selection": "fn() -> Selection",
      "ns": {
        "prefix": {
          "svg": "string",
          "xhtml": "string",
          "xlink": "string",
          "xml": "string",
          "xmlns": "string"
        },
        "qualify": "fn(name: string) -> ret"
      },
      "ease": "fn(type: string, arrs: [?])",
      "rgb": {},
      "hcl": {},
      "hsl": {},
      "lab": {},
      "geo": "Geo.Geo",
      "geom": "Geom.Geom",
      "mouse": "fn(container: ?) -> [number]",
      "touches": "fn(container: ?) -> [[number]]",
      "functor": "fn(value: fn(p: R)) -> fn(p: R)",
      "map": "fn() -> ?",
      "set": "fn() -> ?",
      "dispatch": "fn(types: [string]) -> Dispatch",
      "rebind": "fn(target: ?, source: ?, names: [?]) -> ?",
      "requote": "fn(str: string) -> string",
      "timer": {
        "flush": "fn()"
      },
      "transition": "fn() -> Transition.Transition",
      "round": "fn(x: number, n: number) -> number"
    },
    "Dispatch": {
      "on": {}
    },
    "MetricPrefix": {
      "scale": "fn(d: number)",
      "symbol": "string"
    },
    "Xhr": {
      "header": {},
      "mimeType": {},
      "response": {},
      "get": "fn(callback?: fn(xhr: XMLHttpRequest)) -> Xhr",
      "post": {},
      "send": {},
      "abort": "fn() -> Xhr",
      "on": "fn(type: string, listener: fn(data: ?, index?: number))"
    },
    "Dsv": {
      "parse": "fn(string: string) -> [?]",
      "parseRows": "fn(string: string, accessor: fn(row: [?], index: number)) -> ?",
      "format": "fn(rows: [?]) -> string"
    },
    "Selection": {
      "attr": {},
      "classed": {},
      "style": {},
      "property": {},
      "text": {},
      "html": {},
      "append": "fn(name: string)",
      "insert": "fn(name: string, before: string)",
      "remove": "fn()",
      "empty": "fn()",
      "data": {},
      "datum": {},
      "filter": {},
      "call": "fn(callback: fn(selection: Selection, args: [?]), args: [?]) -> Selection",
      "each": "fn(eachFunction: fn(data: ?, index: number)) -> Selection",
      "on": {},
      "size": "fn() -> number",
      "transition": "fn() -> Transition.Transition",
      "sort": "fn(comparator?: fn(a: T, b: T)) -> Selection",
      "order": "fn()",
      "node": "fn()"
    },
    "EnterSelection": {
      "append": "fn(name: string)",
      "insert": "fn(name: string, before?: string)",
      "select": "fn(selector: string)",
      "empty": "fn()",
      "node": "fn()",
      "call": "fn(callback: fn(selection: EnterSelection))",
      "size": "fn()"
    },
    "UpdateSelection": {
      "enter": "fn()",
      "update": "fn()",
      "exit": "fn()"
    },
    "NestKeyValue": {
      "key": "string",
      "values": "?"
    },
    "Nest": {
      "key": "fn(keyFunction: fn(data: ?, index: number)) -> Nest",
      "sortKeys": "fn(comparator: fn(d1: ?, d2: ?)) -> Nest",
      "sortValues": "fn(comparator: fn(d1: ?, d2: ?)) -> Nest",
      "rollup": "fn(rollupFunction: fn(data: ?, index: number)) -> Nest",
      "map": "fn(values: [?]) -> ?",
      "entries": "fn(values: [?]) -> [NestKeyValue]"
    },
    "MapKeyValue": {
      "key": "string",
      "value": "T"
    },
    "Map": {
      "has": "fn(key: string) -> bool",
      "get": "fn(key: string) -> T",
      "set": "fn(key: string, value: T) -> T",
      "remove": "fn(key: string) -> bool",
      "keys": "fn() -> [string]",
      "values": "fn() -> [T]",
      "entries": "fn() -> [?]",
      "forEach": "fn(func: fn(key: string, value: T))",
      "empty": "fn() -> bool",
      "size": "fn() -> number"
    },
    "Set": {
      "has": "fn(value: T) -> bool",
      "add": "fn(value: T) -> T",
      "remove": "fn(value: T) -> bool",
      "values": "fn() -> [string]",
      "forEach": "fn(func: fn(value: string))",
      "empty": "fn() -> bool",
      "size": "fn() -> number"
    },
    "Random": {
      "normal": "fn(mean?: number, deviation?: number) -> fn()",
      "logNormal": "fn(mean?: number, deviation?: number) -> fn()",
      "irwinHall": "fn(count: number) -> fn()"
    },
    "Transition": {
      "Transition": {
        "duration": {},
        "delay": {},
        "attr": {},
        "style": {},
        "call": "fn(callback: fn(transition: Transition, args: [?]), args: [?]) -> Transition",
        "select": {},
        "selectAll": {},
        "each": "fn(type?: string, eachFunction?: fn(data: ?, index: number))",
        "transition": "fn()",
        "ease": "fn(value: string, arrs: [?])",
        "attrTween": "fn(name: string, tween: fn(d: ?, i: number, a: ?)) -> Transition",
        "styleTween": "fn(name: string, tween: fn(d: ?, i: number, a: ?), priority?: string) -> Transition",
        "text": {},
        "tween": "fn(name: string, factory: InterpolateFactory) -> Transition",
        "filter": {},
        "remove": "fn() -> Transition"
      },
      "InterpolateFactory": {},
      "BaseInterpolate": {},
      "Interpolate": {}
    },
    "Time": {
      "Time": {
        "second": "Interval",
        "minute": "Interval",
        "hour": "Interval",
        "day": "Interval",
        "week": "Interval",
        "sunday": "Interval",
        "monday": "Interval",
        "tuesday": "Interval",
        "wednesday": "Interval",
        "thursday": "Interval",
        "friday": "Interval",
        "saturday": "Interval",
        "month": "Interval",
        "year": "Interval",
        "seconds": "Range",
        "minutes": "Range",
        "hours": "Range",
        "days": "Range",
        "weeks": "Range",
        "months": "Range",
        "years": "Range",
        "sundays": "Range",
        "mondays": "Range",
        "tuesdays": "Range",
        "wednesdays": "Range",
        "thursdays": "Range",
        "fridays": "Range",
        "saturdays": "Range",
        "format": {
          "multi": "fn(formats: [[?]])",
          "utc": {
            "multi": "fn(formats: [[?]])"
          },
          "iso": "TimeFormat"
        },
        "scale": {
          "utc": "fn() -> Scale.TimeScale"
        }
      },
      "Range": {},
      "Interval": {
        "floor": "fn(date: Date)",
        "round": "fn(date: Date)",
        "ceil": "fn(date: Date)",
        "range": "Range",
        "offset": "fn(date: Date, step: number)",
        "utc": "Interval"
      },
      "TimeFormat": {
        "parse": "fn(string: string)"
      }
    },
    "Layout": {
      "Layout": {
        "stack": "fn() -> StackLayout",
        "pie": "fn() -> PieLayout",
        "force": "fn() -> ForceLayout",
        "tree": "fn() -> TreeLayout",
        "bundle": "fn() -> BundleLayout",
        "chord": "fn() -> ChordLayout",
        "cluster": "fn() -> ClusterLayout",
        "hierarchy": "fn() -> HierarchyLayout",
        "histogram": "fn() -> HistogramLayout",
        "pack": "fn() -> PackLayout",
        "partition": "fn() -> PartitionLayout",
        "treemap": "fn() -> TreeMapLayout"
      },
      "StackLayout": {
        "values": "fn(accessor?: fn(d: ?)) -> StackLayout",
        "offset": "fn(offset: string) -> StackLayout",
        "x": "fn(accessor: fn(d: ?, i: number)) -> StackLayout",
        "y": "fn(accessor: fn(d: ?, i: number)) -> StackLayout",
        "out": "fn(setter: fn(d: ?, y0: number, y: number)) -> StackLayout"
      },
      "TreeLayout": {
        "sort": {},
        "children": {},
        "nodes": "fn(root: GraphNode) -> [GraphNode]",
        "links": "fn(nodes: [GraphNode]) -> [GraphLink]",
        "separation": {},
        "size": {},
        "nodeSize": {}
      },
      "PieLayout": {
        "value": {},
        "sort": {},
        "startAngle": {},
        "endAngle": {}
      },
      "ArcDescriptor": {
        "value": "?",
        "data": "?",
        "startAngle": "number",
        "endAngle": "number",
        "index": "number"
      },
      "GraphNode": {
        "id": "number",
        "index": "number",
        "name": "string",
        "px": "number",
        "py": "number",
        "size": "number",
        "weight": "number",
        "x": "number",
        "y": "number",
        "subindex": "number",
        "startAngle": "number",
        "endAngle": "number",
        "value": "number",
        "fixed": "bool",
        "children": "[GraphNode]",
        "_children": "[GraphNode]",
        "parent": "GraphNode",
        "depth": "number"
      },
      "GraphLink": {
        "source": "GraphNode",
        "target": "GraphNode"
      },
      "GraphNodeForce": {
        "index": "number",
        "x": "number",
        "y": "number",
        "px": "number",
        "py": "number",
        "fixed": "bool",
        "weight": "number"
      },
      "GraphLinkForce": {
        "source": "GraphNodeForce",
        "target": "GraphNodeForce"
      },
      "ForceLayout": {
        "size": {},
        "linkDistance": {},
        "linkStrength": {},
        "friction": {},
        "alpha": {},
        "charge": {},
        "theta": {},
        "gravity": {},
        "links": {},
        "nodes": {},
        "start": "fn() -> ForceLayout",
        "resume": "fn() -> ForceLayout",
        "stop": "fn() -> ForceLayout",
        "tick": "fn() -> ForceLayout",
        "on": "fn(type: string, listener: fn()) -> ForceLayout",
        "drag": "fn() -> ForceLayout"
      },
      "BundleLayout": {},
      "ChordLayout": {
        "matrix": {},
        "padding": {},
        "sortGroups": {},
        "sortSubgroups": {},
        "sortChords": {},
        "chords": "fn() -> [GraphLink]",
        "groups": "fn() -> [ArcDescriptor]"
      },
      "ClusterLayout": {
        "sort": {},
        "children": {},
        "nodes": "fn(root: GraphNode) -> [GraphNode]",
        "links": "fn(nodes: [GraphNode]) -> [GraphLink]",
        "separation": {},
        "size": {},
        "value": {}
      },
      "HierarchyLayout": {
        "sort": {},
        "children": {},
        "nodes": "fn(root: GraphNode) -> [GraphNode]",
        "links": "fn(nodes: [GraphNode]) -> [GraphLink]",
        "value": {},
        "reValue": "fn(root: GraphNode) -> HierarchyLayout"
      },
      "Bin": {
        "x": "number",
        "dx": "number",
        "y": "number"
      },
      "HistogramLayout": {
        "value": {},
        "range": {},
        "bins": {},
        "frequency": {}
      },
      "PackLayout": {
        "sort": {},
        "children": {},
        "nodes": "fn(root: GraphNode) -> [GraphNode]",
        "links": "fn(nodes: [GraphNode]) -> [GraphLink]",
        "value": {},
        "size": {},
        "padding": {}
      },
      "PartitionLayout": {
        "sort": {},
        "children": {},
        "nodes": "fn(root: GraphNode) -> [GraphNode]",
        "links": "fn(nodes: [GraphNode]) -> [GraphLink]",
        "value": {},
        "size": {}
      },
      "TreeMapLayout": {
        "sort": {},
        "children": {},
        "nodes": "fn(root: GraphNode) -> [GraphNode]",
        "links": "fn(nodes: [GraphNode]) -> [GraphLink]",
        "value": {},
        "size": {},
        "padding": {},
        "round": {},
        "sticky": {},
        "mode": {}
      }
    },
    "Color": {
      "Color": {
        "brighter": "fn(k?: number) -> Color",
        "darker": "fn(k?: number) -> Color"
      },
      "RGBColor": {
        "r": "number",
        "g": "number",
        "b": "number",
        "hsl": "fn() -> HSLColor"
      },
      "HSLColor": {
        "h": "number",
        "s": "number",
        "l": "number",
        "rgb": "fn() -> RGBColor"
      },
      "LABColor": {
        "l": "number",
        "a": "number",
        "b": "number",
        "rgb": "fn() -> RGBColor"
      },
      "HCLColor": {
        "h": "number",
        "c": "number",
        "l": "number",
        "rgb": "fn() -> RGBColor"
      }
    },
    "Svg": {
      "Svg": {
        "symbol": "fn() -> Symbol",
        "axis": "fn() -> Axis",
        "arc": "fn() -> Arc",
        "line": {
          "radial": "fn() -> LineRadial"
        },
        "area": {
          "radial": "fn() -> AreaRadial"
        },
        "brush": "fn() -> Brush",
        "chord": "fn() -> Chord",
        "diagonal": {
          "radial": "fn() -> Diagonal"
        },
        "symbolTypes": "[string]"
      },
      "Symbol": {
        "type": "fn(string: string)",
        "size": "fn(number: number)"
      },
      "Brush": {
        "x": {},
        "y": {},
        "extent": {},
        "clear": "fn() -> Brush",
        "empty": "fn() -> bool",
        "on": {}
      },
      "Axis": {
        "scale": {},
        "orient": {},
        "ticks": {},
        "tickPadding": {},
        "tickValues": {},
        "tickSubdivide": "fn(count: number) -> Axis",
        "tickSize": {},
        "innerTickSize": {},
        "outerTickSize": {},
        "tickFormat": "fn(formatter: fn(value: ?)) -> Axis",
        "nice": "fn(count?: number) -> Axis"
      },
      "Arc": {
        "innerRadius": {},
        "outerRadius": {},
        "startAngle": {},
        "endAngle": {},
        "centroid": "fn(data: ?, index?: number) -> [number]"
      },
      "Line": {
        "x": {},
        "y": {},
        "interpolate": {},
        "tension": {},
        "defined": {}
      },
      "LineRadial": {
        "x": {},
        "y": {},
        "interpolate": {},
        "tension": {},
        "defined": {},
        "radius": {},
        "angle": {}
      },
      "Area": {
        "x": {},
        "x0": {},
        "x1": {},
        "y": {},
        "y0": {},
        "y1": {},
        "interpolate": {},
        "tension": {},
        "defined": {}
      },
      "AreaRadial": {
        "x": {},
        "x0": {},
        "x1": {},
        "y": {},
        "y0": {},
        "y1": {},
        "interpolate": {},
        "tension": {},
        "defined": {},
        "radius": {},
        "innerRadius": {},
        "outerRadius": {},
        "angle": {},
        "startAngle": {},
        "endAngle": {}
      },
      "Chord": {
        "radius": {},
        "startAngle": {},
        "endAngle": {},
        "source": {},
        "target": {}
      },
      "Diagonal": {
        "projection": {},
        "source": {},
        "target": {}
      }
    },
    "Scale": {
      "ScaleBase": {
        "linear": "fn() -> LinearScale",
        "ordinal": "fn() -> OrdinalScale",
        "quantize": "fn() -> QuantizeScale",
        "category10": "fn() -> OrdinalScale",
        "category20": "fn() -> OrdinalScale",
        "category20b": "fn() -> OrdinalScale",
        "category20c": "fn() -> OrdinalScale",
        "identity": "fn() -> IdentityScale",
        "log": "fn() -> LogScale",
        "pow": "fn() -> PowScale",
        "quantile": "fn() -> QuantileScale",
        "sqrt": "fn() -> SqrtScale",
        "threshold": "fn() -> ThresholdScale"
      },
      "GenericScale": {
        "domain": {},
        "range": {},
        "invertExtent": "fn(y: ?) -> [?]",
        "copy": "fn() -> S"
      },
      "Scale": {},
      "GenericQuantitativeScale": {
        "invert": "fn(value: number) -> number",
        "rangeRound": "fn(values: [?])",
        "interpolate": {},
        "clamp": {},
        "nice": "fn(count?: number) -> S",
        "ticks": "fn(count: number) -> [?]",
        "tickFormat": "fn(count: number, format?: string) -> fn(n: number)"
      },
      "QuantitativeScale": {},
      "LinearScale": {},
      "IdentityScale": {
        "invert": "fn(value: number) -> number",
        "ticks": "fn(count: number) -> [?]",
        "tickFormat": "fn(count: number) -> fn(n: number)"
      },
      "SqrtScale": {},
      "PowScale": {},
      "LogScale": {},
      "OrdinalScale": {
        "rangePoints": "fn(interval: [?], padding?: number) -> OrdinalScale",
        "rangeBands": "fn(interval: [?], padding?: number, outerPadding?: number) -> OrdinalScale",
        "rangeRoundBands": "fn(interval: [?], padding?: number, outerPadding?: number) -> OrdinalScale",
        "rangeBand": "fn() -> number",
        "rangeExtent": "fn() -> [?]"
      },
      "QuantizeScale": {},
      "ThresholdScale": {},
      "QuantileScale": {
        "quantiles": "fn() -> [?]"
      },
      "TimeScale": {
        "invert": "fn(value: number) -> Date",
        "rangeRound": "fn(values: [?])",
        "interpolate": {},
        "clamp": "fn(clamp: bool) -> TimeScale",
        "ticks": {},
        "tickFormat": "fn(count: number) -> fn(n: number)",
        "nice": "fn(count?: number) -> TimeScale"
      }
    },
    "Behavior": {
      "Behavior": {
        "drag": "fn() -> Drag",
        "zoom": "fn() -> Zoom"
      },
      "Zoom": {
        "on": "fn(type: string, listener: fn(data: ?, index?: number))",
        "scale": {},
        "translate": {},
        "scaleExtent": {},
        "x": {},
        "y": {}
      },
      "Drag": {
        "on": "fn(type: string, listener: fn(data: ?, index?: number))",
        "origin": {}
      }
    },
    "Geo": {
      "Geo": {
        "path": "fn() -> Path",
        "circle": "fn() -> Circle",
        "area": "fn(feature: ?) -> number",
        "bounds": "fn(feature: ?) -> [[number]]",
        "centroid": "fn(feature: ?) -> [number]",
        "distance": "fn(a: [number], b: [number]) -> number",
        "interpolate": "fn(a: [number], b: [number]) -> fn(t: number)",
        "length": "fn(feature: ?) -> number",
        "projection": "fn(raw: RawProjection) -> Projection",
        "projectionMutator": "fn(rawFactory: RawProjection) -> ProjectionMutator",
        "albers": "fn() -> Projection",
        "albersUsa": "fn() -> Projection",
        "azimuthalEqualArea": {
          "raw": "RawProjection"
        },
        "azimuthalEquidistant": {
          "raw": "RawProjection"
        },
        "conicConformal": {
          "raw": "fn(phi1: number, phi2: number) -> RawProjection"
        },
        "conicEquidistant": {
          "raw": "fn(phi1: number, phi2: number) -> RawProjection"
        },
        "conicEqualArea": {
          "raw": "fn(phi1: number, phi2: number) -> RawProjection"
        },
        "equirectangular": {
          "raw": "RawProjection"
        },
        "gnomonic": {
          "raw": "RawProjection"
        },
        "mercator": {
          "raw": "RawProjection"
        },
        "orthographic": {
          "raw": "RawProjection"
        },
        "stereographic": {
          "raw": "RawProjection"
        },
        "transverseMercator": {
          "raw": "RawProjection"
        },
        "stream": "fn(object: GeoJSON, listener: Stream)",
        "graticule": "fn() -> Graticule",
        "greatArc": "fn() -> GreatArc",
        "rotation": "fn(rotation: [number]) -> Rotation"
      },
      "Path": {
        "projection": {},
        "context": {},
        "area": "fn(feature: ?) -> ?",
        "centroid": "fn(feature: ?) -> ?",
        "bounds": "fn(feature: ?) -> ?",
        "pointRadius": {}
      },
      "Context": {
        "beginPath": "fn() -> ?",
        "moveTo": "fn(x: number, y: number) -> ?",
        "lineTo": "fn(x: number, y: number) -> ?",
        "arc": "fn(x: number, y: number, radius: number, startAngle: number, endAngle: number) -> ?",
        "closePath": "fn() -> ?"
      },
      "Circle": {
        "origin": {},
        "angle": {},
        "precision": {}
      },
      "Graticule": {
        "lines": "fn() -> [GeoJSON]",
        "outline": "fn() -> GeoJSON",
        "extent": {},
        "minorExtent": {},
        "majorExtent": {},
        "step": {},
        "minorStep": {},
        "majorStep": {},
        "precision": {}
      },
      "GreatArc": {
        "distance": "fn() -> number",
        "source": {},
        "target": {},
        "precision": {}
      },
      "GeoJSON": {
        "coordinates": "[[number]]",
        "type": "string"
      },
      "RawProjection": {
        "invert": "fn(x: number, y: number) -> [number]"
      },
      "Projection": {
        "invert": "fn(point: [number]) -> [number]",
        "rotate": {},
        "center": {},
        "parallels": {},
        "translate": {},
        "scale": {},
        "clipAngle": {},
        "clipExtent": {},
        "precision": {},
        "stream": "fn(listener?: Stream) -> Stream"
      },
      "Stream": {
        "point": "fn(x: number, y: number, z?: number)",
        "lineStart": "fn()",
        "lineEnd": "fn()",
        "polygonStart": "fn()",
        "polygonEnd": "fn()",
        "sphere": "fn()"
      },
      "Rotation": {
        "invert": "fn(location: [number]) -> Rotation"
      },
      "ProjectionMutator": {}
    },
    "Geom": {
      "Geom": {
        "voronoi": "fn() -> ?",
        "delaunay": "fn(vertices?: [Vertice]) -> [Polygon]",
        "quadtree": "fn() -> QuadtreeFactory",
        "polygon": "fn(vertices: [Vertice]) -> Polygon",
        "hull": "fn() -> Hull"
      },
      "Vertice": {
        "angle": "number"
      },
      "Polygon": {
        "area": "fn() -> number",
        "centroid": "fn() -> [number]",
        "clip": "fn(subject: Polygon) -> Polygon"
      },
      "QuadtreeFactory": {
        "x": {},
        "y": {},
        "size": "fn() -> [number]",
        "extent": "fn() -> [[number]]"
      },
      "Quadtree": {
        "add": "fn(point: Point)",
        "visit": "fn(callback: ?)"
      },
      "Point": {
        "x": "number",
        "y": "number"
      },
      "Voronoi": {
        "links": "fn(data: [T]) -> [Layout.GraphLink]",
        "triangles": "fn(data: [T]) -> [[number]]",
        "x": {},
        "y": {},
        "clipExtent": {},
        "size": {}
      },
      "Hull": {
        "x": {},
        "y": {}
      }
    }
  },
  "d3": "D3.Base",
  "!name": "d3.d.ts",
  "!define": {
    "ret": {
      "space": "string",
      "local": "string"
    }
  }
}
