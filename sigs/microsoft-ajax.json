{
  "Object": {
    "getType": "fn(instance: ?) -> Type",
    "getTypeName": "fn(instance: ?) -> string"
  },
  "Array": {
    "isArray": "fn(arg: ?) -> bool",
    "prototype": "?",
    "add": "fn(array: [?], element: ?)",
    "addRange": "fn(array: ?, items: ?)",
    "clear": "fn()",
    "clone": "fn() -> [?]",
    "contains": "fn(element: ?) -> bool",
    "dequeue": "fn() -> ?",
    "enqueue": "fn(element: ?)",
    "forEach": "fn(array: [?], method: Function, instance: [?])",
    "indexOf": "fn(array: [?], item: ?, startIndex?: number) -> number",
    "insert": "fn(array: [?], index: number, item: ?) -> ?",
    "parse": "fn(value: string) -> [?]",
    "remove": "fn(array: [?], item: ?) -> bool",
    "removeAt": "fn(array: [?], index: number)"
  },
  "Number": {
    "format": "fn(format: string) -> string",
    "localeFormat": "fn(format: string) -> string",
    "parseInvariant": "fn(format: string) -> number",
    "parseLocale": "fn(format: string) -> number"
  },
  "Date": {
    "format": "fn(value: string) -> string",
    "localeFormat": "fn(value: string) -> string",
    "parseLocale": "fn(value: string) -> string",
    "parseInvariant": "fn(value: string) -> string"
  },
  "MicrosoftAjaxBaseTypeExtensions": {
    "Function": {
      "prototype": "Function",
      "createCallback": "fn(method: Function, context: [?]) -> Function",
      "createDelegate": "fn(instance: ?, method: Function) -> Function",
      "emptyMethod": "fn() -> Function",
      "validateParameters": "fn(parameters: ?, expectedParameters: [Object], validateParameterCount?: bool) -> ?"
    },
    "Error": {
      "name": "string",
      "message": "string",
      "prototype": "Error",
      "parameterCount": "fn(message?: string) -> Error",
      "notImplemented": "fn(message?: string) -> Error",
      "argument": "fn(paramName?: ?, message?: string) -> Error",
      "argumentNull": "fn(paramName?: ?, message?: string) -> Error",
      "argumentOutOfRange": "fn(paramName?: string, actualValue?: ?, message?: string) -> Error",
      "argumentType": "fn(paramName?: string, actualType?: ?, expectedType?: ?, message?: string) -> Error",
      "argumentUndefined": "fn(paramName?: string, message?: string) -> Error",
      "create": "fn(message?: string, errorInfo?: Object) -> Error",
      "format": "fn(message?: string) -> Error",
      "invalidOperation": "fn(message?: string) -> Error",
      "popStackFrame": "fn()"
    },
    "String": {
      "prototype": "String",
      "fromCharCode": "fn(codes: [number]) -> string",
      "charAt": "fn(pos: number) -> string",
      "charCodeAt": "fn(index: number) -> number",
      "concat": "fn(strings: [string]) -> string",
      "indexOf": "fn(searchString: string, position?: number) -> number",
      "lastIndexOf": "fn(searchString: string, position?: number) -> number",
      "localeCompare": "fn(that: string) -> number",
      "match": "fn(regexp: string) -> [string]",
      "replace": "fn(searchValue: string, replaceValue: string) -> string",
      "search": "fn(regexp: string) -> number",
      "slice": "fn(start?: number, end?: number) -> string",
      "split": "fn(separator: string, limit?: number) -> [string]",
      "substring": "fn(start: number, end?: number) -> string",
      "toLowerCase": "fn() -> string",
      "toLocaleLowerCase": "fn() -> string",
      "toUpperCase": "fn() -> string",
      "toLocaleUpperCase": "fn() -> string",
      "length": "number",
      "substr": "fn(from: number, length?: number) -> string",
      "endsWith": "fn(suffix: string) -> bool",
      "format": "fn(format: string, args: [?]) -> string",
      "localeFormat": "fn(format: string, args: [?]) -> string",
      "trim": "fn() -> string",
      "trimEnd": "fn() -> string",
      "trimStart": "fn() -> string"
    },
    "Boolean": {
      "prototype": "Boolean",
      "parse": "fn(value: string) -> Boolean"
    }
  },
  "Type": {
    "createCallback": "fn(method: Function, context: Object) -> Function",
    "createDelegate": "fn(instance: Object, method: Function) -> Function",
    "getRootNamespaces": "fn() -> ?",
    "isClass": "fn(type: ?) -> bool",
    "isEnum": "fn(type: ?) -> bool",
    "isFlags": "fn(type: ?) -> bool",
    "isInterface": "fn(type: ?) -> bool",
    "isNamespace": "fn(object: ?) -> bool",
    "parse": "fn(typeName: string, ns?: string) -> ?",
    "registerNamespace": "fn(namespacePath: string)",
    "prototype": {
      "callBaseMethod": "fn(instance: ?, name: string, baseArguments?: [?]) -> ?",
      "getBaseMethod": "fn(instance: Object, name: string) -> ?",
      "getBaseType": "fn() -> Type",
      "getInterfaces": "fn() -> [?]",
      "getName": "fn() -> string",
      "implementsInterface": "fn(interfaceType: Type) -> bool",
      "inheritsFrom": "fn(parentType: string) -> bool",
      "initializeBase": "fn(instance: ?, baseArguments?: [?]) -> ?",
      "isImplementedBy": "fn(typeInstanceVar: ?) -> bool",
      "isInstanceOfType": "fn(instance: ?) -> bool",
      "registerClass": "fn(typeName: string, baseType?: ?, interfaceTypes?: [?]) -> ?",
      "registerEnum": "fn(name: string, flags?: bool)",
      "registerInterface": "fn(typeName: string) -> ?",
      "resolveInheritance": "fn()"
    }
  },
  "$create": "fn(type: Type, properties?: ?, events?: ?, references?: ?, element?: HTMLElement) -> Sys.Component",
  "$find": "fn(id: string, parent?: Sys.Component) -> Sys.Component",
  "$addHandler": "fn(element: Sys.UI.DomElement, eventName: string, handler: Function, autoRemove?: bool)",
  "$addHandlers": "fn(element: Sys.UI.DomElement, events: ?, handlerOwner?: ?, autoRemove?: bool)",
  "$clearHandlers": "fn(element: Sys.UI.DomElement)",
  "$get": "fn(id: string) -> ?",
  "$removeHandler": "fn(element: ?, eventName: string, handler: Function)",
  "Sys": {
    "Application": {
      "add_init": "fn(handler: Function)",
      "remove_init": "fn(handler: Function)",
      "add_load": "fn(handler: Function)",
      "remove_load": "fn(handler: Function)",
      "add_navigate": "fn(handler: Function)",
      "remove_navigate": "fn(handler: Function)",
      "add_unload": "fn(handler: Function)",
      "remove_unload": "fn(handler: Function)",
      "addComponent": "fn(component: ?)",
      "beginCreateComponents": "fn()",
      "addHistoryPoint": "fn(state: Object, title?: string)",
      "beginUpdate": "fn()",
      "dispose": "fn()",
      "disposeElement": "fn(element: Element, childNodesOnly: bool)",
      "endCreateComponents": "fn()",
      "endUpdate": "fn()",
      "findComponent": "fn(id: string, parent?: Sys.Component) -> Sys.Component",
      "getComponents": "fn() -> [Sys.Component]",
      "initialize": "fn()",
      "notifyScriptLoaded": "fn()",
      "raiseLoad": "fn()",
      "raisePropertyChanged": "fn(propertyName: string)",
      "registerDisposableObject": "fn(object: ?)",
      "removeComponent": "fn(component: Component)",
      "unregisterDisposableObject": "fn(object: ?)",
      "updated": "fn()",
      "get_enableHistory": "fn() -> bool",
      "set_enableHistory": "fn(value: bool)",
      "get_isCreatingComponents": "fn() -> bool",
      "get_isDisposing": "fn() -> bool",
      "!type": "Application"
    },
    "Browser": {
      "agent": "?",
      "documentMode": "number",
      "hasDebuggerStatement": "bool",
      "name": "string",
      "version": "number",
      "!type": "fn() -> Sys.Browser"
    },
    "Component": {
      "!type": "fn()",
      "create": "fn(type: Type, properties?: ?, events?: ?, references?: ?, element?: HTMLElement) -> Sys.Component",
      "prototype": {
        "add_disposing": "fn(handler: Function)",
        "remove_disposing": "fn(handler: Function)",
        "add_propertyChanged": "fn(handler: Function)",
        "remove_propertyChanged": "fn(handler: Function)",
        "beginUpdate": "fn()",
        "endUpdate": "fn()",
        "initialize": "fn()",
        "raisePropertyChanged": "fn(propertyName: string)",
        "updated": "fn()",
        "dispose": "fn()",
        "get_events": "fn() -> ?",
        "get_id": "fn() -> string",
        "set_id": "fn(value: string)",
        "get_isInitialized": "fn() -> bool",
        "get_isUpdating": "fn() -> bool"
      }
    },
    "CultureInfo": {
      "!type": "fn(name: string, numberFormat: string, dateTimeFormat: string)",
      "InvariantCulture": "CultureInfo",
      "CurrentCulture": "CultureInfo",
      "prototype": {
        "numberFormat": "[string]",
        "name": "string",
        "dateTimeFormat": "[string]"
      }
    },
    "Debug": {
      "!type": "fn()",
      "assert": "fn(condition: bool, message?: string, displayCaller?: bool)",
      "clearTrace": "fn()",
      "fail": "fn(message: string)",
      "trace": "fn(text: string)",
      "traceDump": "fn(object: ?, name?: string)",
      "prototype": {}
    },
    "CollectionChange": {
      "!type": "fn(action: NotifyCollectionChangedAction, newItems: [?], newStartingIndex: number, oldItems: [?], oldStartingIndex: number)",
      "prototype": {
        "action": "NotifyCollectionChangedAction",
        "newItems": "[?]",
        "newStartingIndex": "number",
        "oldItems": "[?]",
        "oldStartingIndex": "number"
      }
    },
    "Observer": {
      "add": "fn(target: [?], item: ?)",
      "addCollectionChanged": "fn(target: ?, handler: Function)",
      "addEventHandler": "fn(target: ?, eventName: string, handler: Function)",
      "addPropertyChanged": "fn(target: ?, handler: Function)",
      "addRange": "fn(target: [?], items: [?])",
      "beginUpdate": "fn(target: ?)",
      "clear": "fn(target: ?)",
      "endUpdate": "fn(target: ?)",
      "insert": "fn(target: ?, index: number, item: ?)",
      "makeObservable": "fn(target: ?) -> ?",
      "raiseCollectionChanged": "fn(target: [?], changes: Sys.CollectionChange)",
      "raiseEvent": "fn(target: ?, eventName: string, eventArgs: Sys.EventArgs)",
      "raisePropertyChanged": "fn(target: ?, propertyName: string)",
      "remove": "fn(target: [?], item: ?) -> bool",
      "removeAt": "fn(target: [?], index: number)",
      "removeCollectionChanged": "fn(target: ?, handler: Function)",
      "removeEventHandler": "fn(target: ?, handler: Function)",
      "setValue": "fn(target: ?, propertyName: string, value: ?)",
      "isUpdating": "fn(target: ?) -> bool",
      "prototype": {}
    },
    "Res": {
      "actualValue": "string",
      "appLoadTimedout": "string",
      "argument": "string",
      "argumentNull": "string",
      "argumentOutOfRange": "string",
      "argumentType": "string",
      "argumentTypeWithTypes": "string",
      "argumentUndefined": "string",
      "assertFailed": "string",
      "assetFailedCaller": "string",
      "badBaseUrl1": "string",
      "badBaseUrl2": "string",
      "badBaseUrl3": "string",
      "breakIntoDebugger": "string",
      "cannotAbortBeforeStart": "string",
      "cannotCallBeforeResponse": "string",
      "cannotCallOnceStarted": "string",
      "cannotCallOutsideHandler": "string",
      "cannotDeserializeEmptyString": "string",
      "cannotSerializeNonFiniteNumbers": "string",
      "controlCantSetId": "string",
      "enumInvalidValue": "string",
      "eventHandlerInvalid": "string",
      "format": "string",
      "formatBadDate": "string",
      "formatBadFormatSpecifier": "string",
      "formatInvalidString": "string",
      "invalidExecutorType": "string",
      "invalidHttpVerb": "string",
      "invalidOperation": "string",
      "invalidTimeout": "string",
      "invokeCalledTwice": "string",
      "notImplemented": "string",
      "nullWebRequest": "string",
      "prototype": {}
    },
    "StringBuilder": {
      "!type": "fn(initialText?: string)",
      "prototype": {
        "append": "fn(text: string)",
        "appendLine": "fn(text: string)",
        "clear": "fn()",
        "isEmpty": "fn() -> bool"
      }
    },
    "NotifyCollectionChangedAction": "number",
    "IContainer": {
      "addComponent": "fn(component: Component)",
      "findComponent": "fn(id: string) -> Component",
      "getComponents": "fn() -> [Component]",
      "removeComponent": "fn(component: Component)"
    },
    "IDisposable": {
      "dispose": "fn()"
    },
    "INotifyDisposing": {
      "add_disposing": "fn(handler: Function)",
      "remove_disposing": "fn(handler: Function)"
    },
    "INotifyPropertyChange": {
      "add_propertyChanged": "fn(handler: Function)",
      "remove_propertyChanged": "fn(handler: Function)"
    },
    "ApplicationLoadEventArgs": {
      "!type": "fn(components: ?, isPartialLoad: bool)",
      "prototype": {
        "get_components": "fn() -> [Component]",
        "get_isPartialLoad": "fn() -> bool"
      }
    },
    "EventArgs": {
      "!type": "fn()",
      "Empty": "EventArgs",
      "prototype": {
        "Empty": "EventArgs"
      }
    },
    "CommandEventArgs": {
      "!type": "fn(commandName: string, commandArgument: ?, commandSource: ?)",
      "prototype": {
        "get_commandName": "fn() -> string",
        "get_commandArgument": "fn() -> ?",
        "get_commandSource": "fn() -> ?"
      }
    },
    "CancelEventArgs": {
      "!type": "fn()",
      "prototype": {
        "set_cancel": "fn(value: bool)",
        "get_cancel": "fn() -> bool"
      }
    },
    "HistoryEventArgs": {
      "!type": "fn(state: ?)",
      "prototype": {
        "get_State": "fn() -> ?"
      }
    },
    "NotifyCollectionChangedEventArgs": {
      "!type": "fn(changes: CollectionChange)",
      "prototype": {
        "get_changes": "fn() -> [CollectionChange]"
      }
    },
    "PropertyChangedEventArgs": {
      "!type": "fn(propertyName: string)",
      "prototype": {
        "propertyName": "fn() -> string"
      }
    },
    "ArgumentException": {
      "prototype": {}
    },
    "ArgumentNullException": {
      "prototype": {}
    },
    "ArgumentOutOfRangeException": {
      "prototype": {}
    },
    "ArgumentTypeException": {
      "prototype": {}
    },
    "ArgumentUndefinedException": {
      "prototype": {}
    },
    "FormatException": {
      "prototype": {}
    },
    "InvalidOperationException": {
      "prototype": {}
    },
    "NotImplementedException": {
      "prototype": {}
    },
    "ParameterCountException": {
      "prototype": {}
    },
    "ScriptLoadFailedException": {
      "prototype": {}
    },
    "Net": {
      "NetWorkRequestEventArgs": {
        "!type": "fn(value: WebRequest)",
        "prototype": {
          "get_webRequest": "fn() -> WebRequest"
        }
      },
      "WebRequest": {
        "!type": "fn()",
        "prototype": {
          "add_completed": "fn(handler: fn(reference: ?, eventArgs: Sys.EventArgs))",
          "remove_completed": "fn(handler: fn(reference: ?, eventArgs: Sys.EventArgs))",
          "getResolvedUrl": "fn() -> string",
          "invoke": "fn()",
          "completed": "fn(eventArgs: Sys.EventArgs)"
        }
      },
      "WebRequestExecutor": {
        "!type": "fn()",
        "prototype": {
          "abort": "fn()",
          "executeRequest": "fn()",
          "getAllResponseHeaders": "fn() -> string",
          "getResponseHeader": "fn() -> string",
          "object": "fn() -> ?",
          "get_aborted": "fn() -> bool",
          "get_responseAvailable": "fn() -> bool",
          "get_responseData": "fn() -> string",
          "get_started": "fn() -> bool",
          "get_statusCode": "fn() -> number",
          "get_statusText": "fn() -> string",
          "get_timedOut": "fn() -> bool",
          "get_xml": "fn() -> XMLDocument",
          "get_webRequest": "fn() -> Sys.Net.WebRequest"
        }
      },
      "IWebRequestManager": {
        "!type": "fn()",
        "prototype": {
          "add_completedRequest": "fn(handler: fn(sender: ?, eventArgs: ?))",
          "add_invokingRequest": "fn(handler: fn(sender: ?, networkRequestEventArgs: ?))",
          "executeRequest": "fn(WebRequest: Sys.Net.WebRequest)",
          "remove_completedRequest": "fn(handler: Function)",
          "remove_invokingRequest": "fn(handler: Function)",
          "get_defaultExecutorType": "fn() -> Sys.Net.WebRequestExecutor",
          "set_defaultExecutorType": "fn(value: Sys.Net.WebRequestExecutor)",
          "get_defaultTimeout": "fn() -> number",
          "set_defaultTimeout": "fn(value: number)"
        }
      },
      "WebRequestManager": "IWebRequestManager"
    },
    "Serialization": {
      "JavaScriptSerializer": {
        "!type": "fn()",
        "serialize": "fn(value: ?) -> string",
        "deserialize": "fn(value: string) -> ?",
        "prototype": {}
      }
    },
    "Services": {
      "AuthenticationService": {
        "!type": "fn()",
        "prototype": {
          "DefaultWebServicePath": "string",
          "login": "fn(userName: string, password: string, isPersistent: bool, customInfo: ?, redirectUrl: string, loginCompletedCallback: Function, failedCallback: Function, userContext: ?)",
          "logout": "fn(redirectUrl: string, logoutCompletedCallback: Function, failedCallback: Function, userContext: ?)",
          "get_defaultFailedCallback": "fn() -> Function",
          "set_defaultFailedCallback": "fn(value: string)",
          "defaultSucceededCallback": "fn() -> Function",
          "defaultUserContext": "fn() -> Object",
          "get_isLoggedIn": "fn() -> bool",
          "set_path": "fn(value: string)",
          "get_path": "fn() -> string",
          "set_timeout": "fn(value: number)",
          "get_timeout": "fn() -> number"
        }
      },
      "ProfileGroup": {
        "!type": "fn()",
        "prototype": {}
      },
      "RoleService": {
        "prototype": {}
      },
      "ProfileService": {
        "DefaultWebServicePath": "string",
        "properties": "?",
        "load": "fn(propertyNames: [string], loadCompletedCallback: Function, failedCallback: Function, userContext: ?)",
        "save": "fn(propertyNames: [string], saveCompletedCallback: Function, failedCallback: Function, userContext: ?)",
        "set_defaultFailedCallback": "fn(value: string)",
        "get_defaultFailedCallback": "fn() -> Function",
        "set_defaultLoadCompletedCallback": "fn(value: string)",
        "get_defaultLoadCompletedCallback": "fn() -> Function",
        "set_defaultSaveCompletedCallback": "fn(value: string)",
        "get_defaultSaveCompletedCallback": "fn() -> Function",
        "defaultSucceededCallback": "fn() -> Function",
        "defaultUserContext": "fn() -> Object",
        "set_path": "fn(value: string)",
        "get_path": "fn() -> string",
        "set_timeout": "fn(value: number)",
        "get_timeout": "fn() -> number",
        "prototype": {
          "new": "fn() -> ProfileService"
        }
      }
    },
    "UI": {
      "Behavior": {
        "getBehaviorByName": "fn(element: Sys.UI.DomElement, name: string) -> Behavior",
        "getBehaviorsByType": "fn(element: Sys.UI.DomElement, type: Sys.UI.Behavior) -> [Behavior]",
        "getBehaviors": "fn(element: DomElement) -> [Behavior]",
        "prototype": {
          "dispose": "fn()",
          "get_element": "fn() -> Sys.UI.DomElement",
          "get_id": "fn() -> string",
          "set_id": "fn(value: string)",
          "set_name": "fn(value: string)",
          "get_name": "fn() -> string"
        }
      },
      "Bounds": {
        "!type": "fn()",
        "prototype": {
          "height": "number",
          "width": "number",
          "x": "number",
          "y": "number"
        }
      },
      "Control": {
        "!type": "fn(element: Sys.UI.DomElement)",
        "prototype": {
          "addCssClass": "fn(className: string)",
          "dispose": "fn()",
          "initialize": "fn()",
          "onBubbleEvent": "fn(source: ?, args: ?) -> bool",
          "raiseBubbleEvent": "fn(source: ?, args: ?)",
          "removeCssClass": "fn(className: string)",
          "toggleCssClass": "fn(className: string)",
          "get_element": "fn() -> Sys.UI.DomElement",
          "get_id": "fn() -> string",
          "set_id": "fn(value: string)"
        }
      },
      "DomElement": {
        "addCssClass": "fn(element: Sys.UI.DomElement, className: string)",
        "containsCssClass": "fn(element: Sys.UI.DomElement, className: string) -> bool",
        "getBounds": "fn(element: Sys.UI.DomElement) -> Object",
        "getElementById": "fn(id: string) -> Sys.UI.DomElement",
        "getLocation": "fn(element: Sys.UI.DomElement) -> Sys.UI.Point",
        "getVisibilityMode": "fn(element: Sys.UI.DomElement) -> Sys.UI.VisibilityMode",
        "getVisible": "fn(element: ?) -> bool",
        "isDomElement": "fn(obj: ?) -> bool",
        "raiseBubbleEvent": "fn(source: Sys.UI.DomElement, args: EventArgs)",
        "removeCssClass": "fn(element: Sys.UI.DomElement, className: string)",
        "resolveElement": "fn(elementOrElementId: Sys.UI.DomElement, containerElement?: Sys.UI.DomElement) -> Sys.UI.DomElement",
        "setLocation": "fn(element: Sys.UI.DomElement, x: number, y: number)",
        "setVisibilityMode": "fn(element: Sys.UI.DomElement, value: Sys.UI.VisibilityMode)",
        "setVisible": "fn(element: Sys.UI.DomElement, value: bool)",
        "toggleCssClass": "fn(element: Sys.UI.DomElement, className: string)",
        "!type": "Sys.UI.DomElement"
      },
      "DomEvent": {
        "!type": "fn(domElement: DomElement)",
        "addHandler": "fn(element: ?, eventName: string, handler: Function, autoRemove?: bool)",
        "addHandlers": "fn(element: ?, events: ?, handlerOwner?: ?, autoRemove?: bool)",
        "clearHandlers": "fn(element: ?)",
        "removeHandler": "fn(element: ?, eventName: string, handler: Function)",
        "prototype": {
          "preventDefault": "fn()",
          "stopPropagation": "fn()",
          "altKey": "bool",
          "button": "Sys.UI.MouseButton",
          "charCode": "number",
          "clientX": "number",
          "clientY": "number",
          "ctrlKey": "bool",
          "keyCode": "number",
          "offsetX": "number",
          "offsetY": "number",
          "screenX": "number",
          "screenY": "number",
          "shiftKey": "bool",
          "target": "?",
          "type": "string"
        }
      },
      "Key": "number",
      "MouseButton": "number",
      "Point": {
        "!type": "fn(x: number, y: number)",
        "prototype": {
          "x": "number",
          "y": "number"
        }
      },
      "VisibilityMode": "number"
    },
    "WebForms": {
      "BeginRequestEventArgs": {
        "!type": "fn(request: Sys.Net.WebRequest, postBackElement: ?, updatePanelsToUpdate: [string])",
        "prototype": {
          "get_postBackElement": "fn() -> HTMLElement",
          "get_request": "fn() -> Sys.Net.WebRequest",
          "get_updatePanelsToUpdate": "fn() -> [string]"
        }
      },
      "EndRequestEventArgs": {
        "!type": "fn(error: Error, dataItems: ?, response: Sys.Net.WebRequestExecutor)",
        "prototype": {
          "get_dataItems": "fn() -> ?",
          "get_error": "fn() -> Error",
          "get_errorHandled": "fn() -> bool",
          "set_errorHandled": "fn(value: bool)",
          "get_response": "fn() -> Sys.Net.WebRequestExecutor"
        }
      },
      "InitializeRequestEventArgs": {
        "!type": "fn(request: Sys.Net.WebRequest, postBackElement: ?, updatePanelsToUpdate: [string])",
        "prototype": {
          "get_postBackElement": "fn() -> HTMLElement",
          "get_request": "fn() -> Sys.Net.WebRequestExecutor",
          "get_updatePanelsToUpdate": "fn() -> [string]"
        }
      },
      "PageLoadedEventArgs": {
        "!type": "fn()",
        "prototype": {
          "get_dataItems": "fn() -> ?",
          "get_panelsCreated": "fn() -> [HTMLDivElement]",
          "get_panelsUpdated": "fn() -> [HTMLDivElement]"
        }
      },
      "PageLoadingEventArgs": {
        "!type": "fn()",
        "prototype": {
          "get_dataItems": "fn() -> ?",
          "get_panelsDeleting": "fn() -> [HTMLDivElement]",
          "get_panelsUpdating": "fn() -> [HTMLDivElement]"
        }
      },
      "PageRequestManager": {
        "!type": "fn()",
        "getInstance": "fn() -> PageRequestManager",
        "prototype": {
          "add_beginRequest": "fn(beginRequestHandler: fn(sender: ?, args: BeginRequestEventArgs))",
          "remove_beginRequest": "fn(beginRequestHandler: Function)",
          "add_endRequest": "fn(endRequestHandler: fn(sender: ?, args: Sys.WebForms.EndRequestEventArgs))",
          "remove_endRequest": "fn(endRequestHandler: fn(sender: ?, args: Sys.WebForms.EndRequestEventArgs))",
          "add_initializeRequest": "fn(initializeRequestHandler: fn(sender: ?, args: InitializeRequestEventArgs))",
          "remove_initializeRequest": "fn(initializeRequestHandler: fn(sender: ?, args: InitializeRequestEventArgs))",
          "add_pageLoaded": "fn(pageLoadedHandler: fn(sender: ?, args: PageLoadedEventArgs))",
          "remove_pageLoaded": "fn(pageLoadedHandler: fn(sender: ?, args: PageLoadedEventArgs))",
          "add_pageLoading": "fn(pageLoadingHandler: fn(sender: ?, args: PageLoadingEventArgs))",
          "remove_pageLoading": "fn(pageLoadingHandler: fn(sender: ?, args: PageLoadingEventArgs))",
          "abortPostBack": "fn()",
          "beginAsyncPostBack": "fn(updatePanelsToUpdate?: [string], eventTarget?: string, eventArgument?: string, causesValidation?: bool, validationGroup?: string)",
          "dispose": "fn()",
          "get_isInAsyncPostBack": "fn() -> bool"
        }
      },
      "PageRequestManagerParserErrorException": {
        "prototype": {}
      },
      "PageRequestManagerServerErrorException": {
        "prototype": {}
      },
      "PageRequestManagerTimeoutException": {
        "prototype": {}
      }
    }
  },
  "!name": "microsoft.ajax.d.ts"
}
