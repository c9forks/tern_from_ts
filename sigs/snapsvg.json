{
  "mina": {
    "Mina": {
      "id": "string",
      "duration": "Function",
      "easing": "Function",
      "speed": "Function",
      "status": "Function",
      "stop": "Function"
    },
    "backin": "fn(n: number) -> number",
    "backout": "fn(n: number) -> number",
    "bounce": "fn(n: number) -> number",
    "easein": "fn(n: number) -> number",
    "easeinout": "fn(n: number) -> number",
    "easeout": "fn(n: number) -> number",
    "elastic": "fn(n: number) -> number",
    "getById": "fn(id: string) -> Object",
    "linear": "fn(n: number) -> number",
    "time": "fn() -> number",
    "!type": "fn(a: number, A: number, b: number, B: number, get: Function, set: Function, easing?: Function) -> Object"
  },
  "Snap": {
    "filter": "Filter",
    "path": "Path",
    "Matrix": {
      "add": "fn(a: number, b: number, c: number, d: number, e: number, f: number)",
      "clone": "fn() -> Matrix",
      "determinant": "fn() -> number",
      "invert": "fn() -> Matrix",
      "rotate": "fn(a: number, x: number, y: number)",
      "scale": "fn(x: number, y?: number, cx?: number, cy?: number)",
      "split": "fn() -> Object",
      "toTransformString": "fn() -> string",
      "translate": "fn(x: number, y: number)",
      "x": "fn(x: number, y: number) -> number",
      "y": "fn(x: number, y: number) -> number",
      "!type": "fn(a: number, b: number, c: number, d: number, e: number, f: number) -> Matrix"
    },
    "ajax": "fn(url: string, postData: string, callback: Function, scope?: Object) -> XMLHttpRequest",
    "format": "fn(token: string, json: Object) -> string",
    "fragment": "fn(varargs: ?) -> Fragment",
    "getElementByPoint": "fn(x: number, y: number) -> Object",
    "is": "fn(o: ?, type: string) -> bool",
    "load": "fn(url: string, callback: Function, scope?: Object)",
    "plugin": "fn(f: Function)",
    "select": "fn(query: string) -> Snap.Element",
    "selectAll": "fn(query: string) -> ?",
    "snapTo": "fn(values: ?, value: number, tolerance?: number) -> number",
    "animate": "fn(from: number, to: number, setter: Function, duration: number, easing: Function, callback: Function) -> mina.Mina",
    "animation": "fn(attr: Object, duration: number, easing?: Function, callback?: Function) -> Object",
    "color": "fn(clr: string) -> Object",
    "getRGB": "fn(color: string) -> Object",
    "hsb": "fn(h: number, s: number, b: number) -> HSB",
    "hsl": "fn(h: number, s: number, l: number) -> HSL",
    "rgb": "fn(r: number, g: number, b: number) -> RGB",
    "hsb2rgb": "fn(h: number, s: number, v: number) -> RGB",
    "hsl2rgb": "fn(h: number, s: number, l: number) -> RGB",
    "rgb2hsb": "fn(r: number, g: number, b: number) -> HSB",
    "rgb2hsl": "fn(r: number, g: number, b: number) -> HSL",
    "angle": "fn(x1: number, y1: number, x2: number, y2: number, x3?: number, y3?: number) -> number",
    "rad": "fn(deg: number) -> number",
    "deg": "fn(rad: number) -> number",
    "parse": "fn(svg: string) -> Fragment",
    "parsePathString": "fn(pathString: string) -> ?",
    "parseTransformString": "fn(TString: string) -> ?",
    "RGB": {
      "r": "number",
      "g": "number",
      "b": "number",
      "hex": "string"
    },
    "HSB": {
      "h": "number",
      "s": "number",
      "b": "number"
    },
    "HSL": {
      "h": "number",
      "s": "number",
      "l": "number"
    },
    "BBox": {
      "cx": "number",
      "cy": "number",
      "h": "number",
      "height": "number",
      "path": "number",
      "r0": "number",
      "r1": "number",
      "r2": "number",
      "vb": "string",
      "w": "number",
      "width": "number",
      "x2": "number",
      "x": "number",
      "y2": "number",
      "y": "number"
    },
    "Element": {
      "add": "fn()",
      "addClass": "fn(value: string) -> Snap.Element",
      "after": "fn(el: Snap.Element) -> Snap.Element",
      "animate": "fn(attrs: Object, duration: number, easing?: Function, callback?: Function) -> Snap.Element",
      "append": "fn(el: Snap.Element) -> Snap.Element",
      "appendTo": "fn(el: Snap.Element) -> Snap.Element",
      "asPX": "fn(attr: string, value?: string) -> Snap.Element",
      "attr": "fn(params: Object) -> Snap.Element",
      "before": "fn(el: Snap.Element) -> Snap.Element",
      "clone": "fn() -> Snap.Element",
      "data": "fn(key: string, value?: ?) -> ?",
      "getBBox": "fn() -> BBox",
      "getPointAtLength": "fn(length: number) -> Object",
      "getSubpath": "fn(from: number, to: number) -> string",
      "getTotalLength": "fn() -> number",
      "hasClass": "fn(value: string) -> bool",
      "inAnim": "fn() -> Object",
      "innerSVG": "fn() -> string",
      "insertAfter": "fn(el: Snap.Element) -> Snap.Element",
      "insertBefore": "fn(el: Snap.Element) -> Snap.Element",
      "marker": "fn(x: number, y: number, width: number, height: number, refX: number, refY: number) -> Snap.Element",
      "node": "Element",
      "outerSVG": "fn() -> string",
      "parent": "fn() -> Snap.Element",
      "pattern": "fn(x: ?, y: ?, width: ?, height: ?) -> Snap.Element",
      "prepend": "fn(el: Snap.Element) -> Snap.Element",
      "prependTo": "fn(el: Snap.Element) -> Snap.Element",
      "remove": "fn() -> Snap.Element",
      "removeClass": "fn(value: string) -> Snap.Element",
      "removeData": "fn(key?: string) -> Snap.Element",
      "select": "fn(query: string) -> Snap.Element",
      "selectAll": "fn(query: string) -> Snap.Set",
      "stop": "fn() -> Snap.Element",
      "toDefs": "fn() -> Snap.Element",
      "toPattern": "fn(x: number, y: number, width: number, height: number) -> Object",
      "toggleClass": "fn(value: string, flag: bool) -> Snap.Element",
      "transform": "fn(tstr: string) -> ?",
      "type": "string",
      "use": "fn() -> Object",
      "click": "fn(handler: Function) -> Snap.Element",
      "unclick": "fn(handler: Function) -> Snap.Element",
      "dblclick": "fn(handler: Function) -> Snap.Element",
      "undblclick": "fn(handler: Function) -> Snap.Element",
      "mousedown": "fn(handler: Function) -> Snap.Element",
      "unmousedown": "fn(handler: Function) -> Snap.Element",
      "mousemove": "fn(handler: Function) -> Snap.Element",
      "unmousemove": "fn(handler: Function) -> Snap.Element",
      "mouseout": "fn(handler: Function) -> Snap.Element",
      "unmouseout": "fn(handler: Function) -> Snap.Element",
      "mouseover": "fn(handler: Function) -> Snap.Element",
      "unmouseover": "fn(handler: Function) -> Snap.Element",
      "mouseup": "fn(handler: Function) -> Snap.Element",
      "unmouseup": "fn(handler: Function) -> Snap.Element",
      "touchstart": "fn(handler: Function) -> Snap.Element",
      "untouchstart": "fn(handler: Function) -> Snap.Element",
      "touchmove": "fn(handler: Function) -> Snap.Element",
      "untouchmove": "fn(handler: Function) -> Snap.Element",
      "touchend": "fn(handler: Function) -> Snap.Element",
      "untouchend": "fn(handler: Function) -> Snap.Element",
      "touchcancel": "fn(handler: Function) -> Snap.Element",
      "untouchcancel": "fn(handler: Function) -> Snap.Element",
      "hover": "fn(f_in: Function, f_out: Function, icontext?: Object, ocontext?: Object) -> Snap.Element",
      "unhover": "fn(f_in: Function, f_out: Function) -> Snap.Element",
      "drag": "fn()",
      "undrag": "fn() -> Snap.Element"
    },
    "Fragment": {
      "select": "fn(query: string) -> Snap.Element",
      "selectAll": "fn(query: string) -> Snap.Set"
    },
    "Paper": {
      "clear": "fn()",
      "el": "fn(name: string, attr: Object) -> Snap.Element",
      "gradient": "fn(gradient: string) -> ?",
      "g": "fn(varargs?: ?) -> ?",
      "group": "fn(el?: ?, els: [?]) -> ?",
      "mask": "fn(varargs: ?) -> Object",
      "ptrn": "fn(x: number, y: number, width: number, height: number, vbx: number, vby: number, vbw: number, vbh: number) -> Object",
      "svg": "fn(x: number, y: number, width: number, height: number, vbx: number, vby: number, vbw: number, vbh: number) -> Object",
      "use": "fn(id?: string) -> Object",
      "circle": "fn(x: number, y: number, r: number) -> Snap.Element",
      "ellipse": "fn(x: number, y: number, rx: number, ry: number) -> Snap.Element",
      "image": "fn(src: string, x: number, y: number, width: number, height: number) -> Snap.Element",
      "line": "fn(x1: number, y1: number, x2: number, y2: number) -> Snap.Element",
      "path": "fn(pathString?: string) -> Snap.Element",
      "polygon": "fn(varargs: [?]) -> Snap.Element",
      "polyline": "fn(varargs: [?]) -> Snap.Element",
      "rect": "fn(x: number, y: number, width: number, height: number, rx?: number, ry?: number) -> Snap.Element",
      "text": "fn(x: number, y: number, text: string) -> Snap.Element"
    },
    "Set": {
      "animate": "fn(attrs: Object, duration: number, easing?: Function, callback?: Function) -> Snap.Element",
      "attr": "fn(params: Object) -> Snap.Element",
      "bind": "fn(attr: string, callback: Function) -> Snap.Set",
      "clear": "fn() -> Snap.Set",
      "exclude": "fn(element: Snap.Element) -> bool",
      "forEach": "fn(callback: Function, thisArg?: Object) -> Snap.Set",
      "pop": "fn() -> Snap.Element",
      "push": "fn(el: Snap.Element) -> Snap.Element",
      "splice": "fn(index: number, count: number, insertion?: [Object]) -> [Snap.Element]"
    },
    "Filter": {
      "blur": "fn(x: number, y?: number) -> string",
      "brightness": "fn(amount: number) -> string",
      "contrast": "fn(amount: number) -> string",
      "grayscale": "fn(amount: number) -> string",
      "hueRotate": "fn(angle: number) -> string",
      "invert": "fn(amount: number) -> string",
      "saturate": "fn(amount: number) -> string",
      "sepia": "fn(amount: number) -> string",
      "shadow": "fn(dx: number, dy: number, blur?: number, color?: string, opacity?: number) -> string"
    },
    "Path": {
      "bezierBBox": "fn(args: [number]) -> Object",
      "findDotsAtSegment": "fn(p1x: number, p1y: number, c1x: number, c1y: number, c2x: number, c2y: number, p2x: number, p2y: number, t: number) -> Object",
      "getBBox": "fn(path: string) -> Object",
      "getPointAtLength": "fn(path: string, length: number) -> Object",
      "getSubpath": "fn(path: string, from: number, to: number) -> string",
      "getTotalLength": "fn(path: string) -> number",
      "intersection": "fn(path1: string, path2: string) -> ?",
      "isBBoxIntersect": "fn(bbox1: string, bbox2: string) -> bool",
      "isPointInside": "fn(path: string, x: number, y: number) -> bool",
      "isPointInsideBBox": "fn(bbox: string, x: string, y: string) -> bool",
      "map": "fn(path: string, matrix: Snap.Matrix) -> string",
      "toAbsolute": "fn(path: string) -> ?",
      "toCubic": "fn(pathString: string) -> ?",
      "toRelative": "fn(path: string) -> ?"
    },
    "!type": "fn(width: number, height: number) -> Snap.Paper"
  },
  "!name": "snapsvg.d.ts"
}
