{
  "KnockoutSubscribableFunctions": {
    "notifySubscribers": "fn(valueToWrite?: T, event?: string)"
  },
  "KnockoutComputedFunctions": {},
  "KnockoutObservableFunctions": {
    "equalityComparer": "fn(a: ?, b: ?) -> bool"
  },
  "KnockoutObservableArrayFunctions": {
    "indexOf": "fn(searchElement: T, fromIndex?: number) -> number",
    "slice": "fn(start: number, end?: number) -> [T]",
    "splice": "fn(start: number) -> [T]",
    "pop": "fn() -> T",
    "push": "fn(items: [T])",
    "shift": "fn() -> T",
    "unshift": "fn(items: [T]) -> number",
    "reverse": "fn() -> [T]",
    "sort": "fn()",
    "replace": "fn(oldItem: T, newItem: T)",
    "remove": "fn(item: T) -> [T]",
    "removeAll": "fn(items: [T]) -> [T]",
    "destroy": "fn(item: T)",
    "destroyAll": "fn(items: [T])"
  },
  "KnockoutSubscribableStatic": {
    "fn": "?"
  },
  "KnockoutSubscription": {
    "dispose": "fn()"
  },
  "KnockoutSubscribable": {
    "subscribe": "fn(callback: fn(newValue: T), target?: ?, event?: string) -> KnockoutSubscription",
    "extend": "fn(requestedExtenders: ?) -> ?",
    "getSubscriptionsCount": "fn() -> number"
  },
  "KnockoutComputedStatic": {
    "fn": "?"
  },
  "KnockoutComputed": {
    "fn": "?",
    "dispose": "fn()",
    "isActive": "fn() -> bool",
    "getDependenciesCount": "fn() -> number",
    "extend": "fn(requestedExtenders: ?) -> ?"
  },
  "KnockoutObservableArrayStatic": {
    "fn": "?"
  },
  "KnockoutObservableArray": {
    "extend": "fn(requestedExtenders: ?) -> ?"
  },
  "KnockoutObservableStatic": {
    "fn": "?"
  },
  "KnockoutObservable": {
    "peek": "fn() -> T",
    "valueHasMutated": {},
    "valueWillMutate": {},
    "extend": "fn(requestedExtenders: ?) -> ?"
  },
  "KnockoutComputedDefine": {
    "read": "fn() -> T",
    "write": "fn(value: T)",
    "disposeWhenNodeIsRemoved": "Node",
    "disposeWhen": "fn() -> bool",
    "owner": "?",
    "deferEvaluation": "bool",
    "pure": "bool"
  },
  "KnockoutBindingContext": {
    "$parent": "?",
    "$parents": "[?]",
    "$root": "?",
    "$data": "?",
    "$index": "?",
    "$parentContext": "KnockoutBindingContext",
    "extend": "fn(properties: ?) -> ?",
    "createChildContext": "fn(dataItemOrAccessor: ?, dataItemAlias?: ?, extendCallback?: Function) -> ?"
  },
  "KnockoutAllBindingsAccessor": {
    "get": "fn(name: string) -> ?",
    "has": "fn(name: string) -> bool"
  },
  "KnockoutBindingHandler": {
    "init": "fn(element: ?, valueAccessor: fn(), allBindingsAccessor: KnockoutAllBindingsAccessor, viewModel: ?, bindingContext: KnockoutBindingContext)",
    "update": "fn(element: ?, valueAccessor: fn(), allBindingsAccessor: KnockoutAllBindingsAccessor, viewModel: ?, bindingContext: KnockoutBindingContext)",
    "options": "?",
    "preprocess": "fn(value: string, name: string, addBindingCallback?: fn(name: string, value: string))"
  },
  "KnockoutBindingHandlers": {
    "visible": "KnockoutBindingHandler",
    "text": "KnockoutBindingHandler",
    "html": "KnockoutBindingHandler",
    "css": "KnockoutBindingHandler",
    "style": "KnockoutBindingHandler",
    "attr": "KnockoutBindingHandler",
    "foreach": "KnockoutBindingHandler",
    "if": "KnockoutBindingHandler",
    "ifnot": "KnockoutBindingHandler",
    "with": "KnockoutBindingHandler",
    "click": "KnockoutBindingHandler",
    "event": "KnockoutBindingHandler",
    "submit": "KnockoutBindingHandler",
    "enable": "KnockoutBindingHandler",
    "disable": "KnockoutBindingHandler",
    "value": "KnockoutBindingHandler",
    "textInput": "KnockoutBindingHandler",
    "hasfocus": "KnockoutBindingHandler",
    "checked": "KnockoutBindingHandler",
    "options": "KnockoutBindingHandler",
    "selectedOptions": "KnockoutBindingHandler",
    "uniqueName": "KnockoutBindingHandler",
    "template": "KnockoutBindingHandler",
    "component": "KnockoutBindingHandler"
  },
  "KnockoutMemoization": {
    "memoize": "fn(callback: fn()) -> string",
    "unmemoize": "fn(memoId: string, callbackParams: [?]) -> bool",
    "unmemoizeDomNodeAndDescendants": "fn(domNode: ?, extraCallbackParamsArray: [?]) -> bool",
    "parseMemoText": "fn(memoText: string) -> string"
  },
  "KnockoutVirtualElement": {},
  "KnockoutVirtualElements": {
    "allowedBindings": {},
    "emptyNode": "fn(node: KnockoutVirtualElement)",
    "firstChild": "fn(node: KnockoutVirtualElement) -> KnockoutVirtualElement",
    "insertAfter": "fn(container: KnockoutVirtualElement, nodeToInsert: Node, insertAfter: Node)",
    "nextSibling": "fn(node: KnockoutVirtualElement) -> Node",
    "prepend": "fn(node: KnockoutVirtualElement, toInsert: Node)",
    "setDomNodeChildren": "fn(node: KnockoutVirtualElement, newChildren: ?)",
    "childNodes": "fn(node: KnockoutVirtualElement) -> [Node]"
  },
  "KnockoutExtenders": {
    "throttle": "fn(target: ?, timeout: number) -> ?",
    "notify": "fn(target: ?, notifyWhen: string) -> ?",
    "rateLimit": "fn(target: ?, timeout: number) -> ?",
    "trackArrayChanges": "fn(target: ?) -> ?"
  },
  "KnockoutUtils": {
    "simpleHtmlParse": "fn(html: string) -> [?]",
    "jQueryHtmlParse": "fn(html: string) -> [?]",
    "parseHtmlFragment": "fn(html: string) -> [?]",
    "setHtml": "fn(node: Element, html: string)",
    "domData": {
      "get": "fn(node: Element, key: string) -> ?",
      "set": "fn(node: Element, key: string, value: ?)",
      "getAll": "fn(node: Element, createIfNotFound: bool) -> ?",
      "clear": "fn(node: Element) -> bool"
    },
    "domNodeDisposal": {
      "addDisposeCallback": "fn(node: Element, callback: Function)",
      "removeDisposeCallback": "fn(node: Element, callback: Function)",
      "cleanNode": "fn(node: Element) -> Element",
      "removeNode": "fn(node: Element)"
    },
    "fieldsIncludedWithJsonPost": "[?]",
    "compareArrays": "fn(a: [T], b: [T]) -> ?",
    "arrayForEach": "fn(array: [T], action: fn(item: T))",
    "arrayIndexOf": "fn(array: [T], item: T) -> number",
    "arrayFirst": "fn(array: [T], predicate: fn(item: T), predicateOwner?: ?) -> T",
    "arrayRemoveItem": "fn(array: [?], itemToRemove: ?)",
    "arrayGetDistinctValues": "fn(array: [T]) -> [T]",
    "arrayMap": "fn(array: [T], mapping: fn(item: T)) -> [U]",
    "arrayFilter": "fn(array: [T], predicate: fn(item: T)) -> [T]",
    "arrayPushAll": "fn(array: [T], valuesToPush: [T]) -> [T]",
    "extend": "fn(target: Object, source: Object) -> Object",
    "emptyDomNode": "fn(domNode: HTMLElement)",
    "moveCleanedNodesToContainerElement": "fn(nodes: [?]) -> HTMLElement",
    "cloneNodes": "fn(nodesArray: [?], shouldCleanNodes: bool) -> [?]",
    "setDomNodeChildren": "fn(domNode: ?, childNodes: [?])",
    "replaceDomNodes": "fn(nodeToReplaceOrNodeArray: ?, newNodesArray: [?])",
    "setOptionNodeSelectionState": "fn(optionNode: ?, isSelected: bool)",
    "stringTrim": "fn(str: string) -> string",
    "stringTokenize": "fn(str: string, delimiter: string) -> [string]",
    "stringStartsWith": "fn(str: string, startsWith: string) -> string",
    "domNodeIsContainedBy": "fn(node: ?, containedByNode: ?) -> bool",
    "domNodeIsAttachedToDocument": "fn(node: ?) -> bool",
    "tagNameLower": "fn(element: ?) -> string",
    "registerEventHandler": "fn(element: ?, eventType: ?, handler: Function)",
    "triggerEvent": "fn(element: ?, eventType: ?)",
    "unwrapObservable": "fn(value: ?, T: ?) -> T",
    "peekObservable": "fn(value: ?) -> T",
    "toggleDomNodeCssClass": "fn(node: ?, className: string, shouldHaveClass: bool)",
    "setElementName": "fn(element: ?, name: string)",
    "forceRefresh": "fn(node: ?)",
    "ensureSelectElementIsRenderedCorrectly": "fn(selectElement: ?)",
    "range": "fn(min: ?, max: ?) -> ?",
    "makeArray": "fn(arrayLikeObject: ?) -> [?]",
    "getFormFields": "fn(form: ?, fieldName: string) -> [?]",
    "parseJson": "fn(jsonString: string) -> ?",
    "stringifyJson": "fn(data: ?, replacer?: Function, space?: string) -> string",
    "postJson": "fn(urlOrForm: ?, data: ?, options: ?)",
    "ieVersion": "number",
    "isIe6": "bool",
    "isIe7": "bool"
  },
  "KnockoutArrayChange": {
    "status": "string",
    "value": "T",
    "index": "number"
  },
  "KnockoutTemplateSourcesDomElement": {
    "text": "fn() -> ?",
    "data": "fn(key: string) -> ?"
  },
  "KnockoutTemplateAnonymous": {
    "nodes": "fn() -> ?"
  },
  "KnockoutTemplateSources": {
    "domElement": {
      "prototype": "KnockoutTemplateSourcesDomElement"
    },
    "anonymousTemplate": {
      "prototype": "KnockoutTemplateAnonymous"
    }
  },
  "KnockoutNativeTemplateEngine": {
    "renderTemplateSource": "fn(templateSource: Object, bindingContext?: KnockoutBindingContext, options?: Object) -> [?]"
  },
  "KnockoutTemplateEngine": {
    "createJavaScriptEvaluatorBlock": "fn(script: string) -> string",
    "makeTemplateSource": "fn(template: ?, templateDocument?: Document) -> ?",
    "renderTemplate": "fn(template: ?, bindingContext: KnockoutBindingContext, options: Object, templateDocument: Document) -> ?",
    "isTemplateRewritten": "fn(template: ?, templateDocument: Document) -> bool",
    "rewriteTemplate": "fn(template: ?, rewriterCallback: Function, templateDocument: Document)"
  },
  "KnockoutStatic": {
    "utils": "KnockoutUtils",
    "memoization": "KnockoutMemoization",
    "bindingHandlers": "KnockoutBindingHandlers",
    "getBindingHandler": "fn(handler: string) -> KnockoutBindingHandler",
    "virtualElements": "KnockoutVirtualElements",
    "extenders": "KnockoutExtenders",
    "applyBindings": "fn(viewModelOrBindingContext?: ?, rootNode?: ?)",
    "applyBindingsToDescendants": "fn(viewModelOrBindingContext: ?, rootNode: ?)",
    "applyBindingAccessorsToNode": "fn(node: Node, bindings: fn(bindingContext: KnockoutBindingContext, node: Node), bindingContext: KnockoutBindingContext)",
    "applyBindingsToNode": "fn(node: Node, bindings: ?, viewModelOrBindingContext?: ?) -> ?",
    "subscribable": "KnockoutSubscribableStatic",
    "observable": "KnockoutObservableStatic",
    "computed": "KnockoutComputedStatic",
    "pureComputed": "fn(evaluatorFunction: fn(), context?: ?) -> ?",
    "observableArray": "KnockoutObservableArrayStatic",
    "contextFor": "fn(node: ?) -> ?",
    "isSubscribable": "fn(instance: ?) -> bool",
    "toJSON": "fn(viewModel: ?, replacer?: Function, space?: ?) -> string",
    "toJS": "fn(viewModel: ?) -> ?",
    "isObservable": "fn(instance: ?) -> bool",
    "isWriteableObservable": "fn(instance: ?) -> bool",
    "isComputed": "fn(instance: ?) -> bool",
    "dataFor": "fn(node: ?) -> ?",
    "removeNode": "fn(node: Element)",
    "cleanNode": "fn(node: Element) -> Element",
    "renderTemplate": "fn(template: Function, viewModel: ?, options?: ?, target?: ?, renderMode?: ?) -> ?",
    "unwrap": "fn(value: ?, T: ?) -> T",
    "computedContext": "KnockoutComputedContext",
    "templateSources": "KnockoutTemplateSources",
    "templateEngine": {
      "prototype": "KnockoutTemplateEngine"
    },
    "templateRewriting": {
      "ensureTemplateIsRewritten": "fn(template: Node, templateEngine: KnockoutTemplateEngine, templateDocument: Document) -> ?",
      "memoizeBindingAttributeSyntax": "fn(htmlString: string, templateEngine: KnockoutTemplateEngine) -> ?",
      "applyMemoizedBindingsToNextSibling": "fn(bindings: ?, nodeName: string) -> string"
    },
    "nativeTemplateEngine": {
      "prototype": "KnockoutNativeTemplateEngine",
      "instance": "KnockoutNativeTemplateEngine"
    },
    "jqueryTmplTemplateEngine": {
      "prototype": "KnockoutTemplateEngine",
      "renderTemplateSource": "fn(templateSource: Object, bindingContext: KnockoutBindingContext, options: Object) -> [Node]",
      "createJavaScriptEvaluatorBlock": "fn(script: string) -> string",
      "addTemplate": "fn(templateName: string, templateMarkup: string)"
    },
    "setTemplateEngine": "fn(templateEngine: KnockoutNativeTemplateEngine)",
    "renderTemplateForEach": "fn(template: Function, arrayOrObservableArray: [?], options: Object, targetNode: Node, parentBindingContext: KnockoutBindingContext) -> ?",
    "expressionRewriting": {
      "bindingRewriteValidators": "?",
      "parseObjectLiteral": {}
    },
    "bindingProvider": {
      "instance": "KnockoutBindingProvider"
    },
    "selectExtensions": {
      "readValue": "fn(element: HTMLElement) -> ?",
      "writeValue": "fn(element: HTMLElement, value: ?)"
    },
    "components": "KnockoutComponents"
  },
  "KnockoutBindingProvider": {
    "nodeHasBindings": "fn(node: Node) -> bool",
    "getBindings": "fn(node: Node, bindingContext: KnockoutBindingContext) -> ret",
    "getBindingAccessors": "fn(node: Node, bindingContext: KnockoutBindingContext) -> ret1"
  },
  "KnockoutComponents": {
    "register": "fn(componentName: string, config: KnockoutComponentRegister)",
    "isRegistered": "fn(componentName: string) -> bool",
    "unregister": "fn(componentName: string)",
    "get": "fn(componentName: string, callback: fn(definition: KnockoutComponentDefinition))",
    "clearCachedDefinition": "fn(componentName: string)",
    "defaultLoader": "KnockoutComponentLoader",
    "loaders": "[KnockoutComponentLoader]",
    "getComponentNameForNode": "fn(node: Node) -> string"
  },
  "KnockoutComponentRegister": {
    "template": "KnockoutComponentTemplate",
    "viewModel": "KnockoutComponentConfigViewModel"
  },
  "KnockoutComponentRegisterAMD": {
    "require": "string"
  },
  "KnockoutComponentRegisterFnViewModel": {
    "template": "KnockoutComponentTemplate",
    "viewModel": "fn(params: ?)"
  },
  "KnockoutComponentRegisterStringTemplate": {
    "template": "string",
    "viewModel": "KnockoutComponentConfigViewModel"
  },
  "KnockoutComponentRegisterStringTemplateFnViewModel": {
    "template": "string",
    "viewModel": "fn(params: ?)"
  },
  "KnockoutComponentConfigViewModel": {
    "instance": "?",
    "createViewModel": "fn(params?: ?, componentInfo?: KnockoutComponentInfo) -> ?",
    "require": "string"
  },
  "KnockoutComponentTemplate": {
    "element": "?",
    "require": "string"
  },
  "KnockoutComponentInfo": {
    "element": "?"
  },
  "KnockoutComponentDefinition": {
    "template": "[Node]",
    "createViewModel": "fn(params: ?, options: ?) -> ?"
  },
  "KnockoutComponentLoader": {
    "getConfig": "fn(componentName: string, callback: fn(result: KnockoutComponentConfig))",
    "loadComponent": "fn(componentName: string, config: KnockoutComponentConfig, callback: fn(result: KnockoutComponentDefinition))",
    "loadTemplate": "fn(componentName: string, templateConfig: ?, callback: fn(result: [Node]))",
    "loadViewModel": "fn(componentName: string, viewModelConfig: ?, callback: fn(result: ?))",
    "suppressLoaderExceptions": "bool"
  },
  "KnockoutComponentConfig": {
    "template": "?",
    "createViewModel": "?"
  },
  "KnockoutComputedContext": {
    "getDependenciesCount": "fn() -> number",
    "isInitial": "fn()",
    "isSleeping": "bool"
  },
  "knockout": "ko",
  "ko": "KnockoutStatic",
  "!name": "knockout.d.ts",
  "!define": {
    "ret": {},
    "ret1": {}
  }
}
