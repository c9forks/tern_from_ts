{
  "L": {
    "AttributionOptions": {
      "position": "string",
      "prefix": "string"
    },
    "bounds": "fn(topLeft: Point, bottomRight: Point) -> Bounds",
    "Bounds": {
      "!type": "fn(topLeft: Point, bottomRight: Point)",
      "prototype": {
        "extend": "fn(point: Point)",
        "getCenter": "fn() -> Point",
        "contains": "fn(otherBounds: Bounds) -> bool",
        "intersects": "fn(otherBounds: Bounds) -> bool",
        "isValid": "fn() -> bool",
        "getSize": "fn() -> Point",
        "min": "Point",
        "max": "Point"
      }
    },
    "Browser": {
      "ie": "bool",
      "ie6": "bool",
      "ie7": "bool",
      "webkit": "bool",
      "webkit3d": "bool",
      "android": "bool",
      "android23": "bool",
      "mobile": "bool",
      "mobileWebkit": "bool",
      "mobileOpera": "bool",
      "touch": "bool",
      "msTouch": "bool",
      "retina": "bool",
      "prototype": {}
    },
    "circle": "fn(latlng: LatLng, radius: number, options?: PathOptions) -> Circle",
    "Circle": {
      "!type": "fn(latlng: LatLng, radius: number, options?: PathOptions)",
      "prototype": {
        "getLatLng": "fn() -> LatLng",
        "getRadius": "fn() -> number",
        "setLatLng": "fn(latlng: LatLng) -> Circle",
        "setRadius": "fn(radius: number) -> Circle",
        "toGeoJSON": "fn() -> ?"
      }
    },
    "circleMarker": "fn(latlng: LatLng, options?: PathOptions) -> CircleMarker",
    "CircleMarker": {
      "!type": "fn(latlng: LatLng, options?: PathOptions)",
      "prototype": {
        "setLatLng": "fn(latlng: LatLng) -> CircleMarker",
        "setRadius": "fn(radius: number) -> CircleMarker",
        "toGeoJSON": "fn() -> ?"
      }
    },
    "ClassExtendOptions": {
      "options": "?",
      "includes": "?",
      "static": "?"
    },
    "Class": {
      "extend": "fn(options: ClassExtendOptions) -> ?",
      "addInitHook": "fn(methodName: string, args: [?])",
      "prototype": {}
    },
    "Control": {
      "!type": "fn(options?: ControlOptions)",
      "prototype": {
        "setPosition": "fn(position: string) -> Control",
        "getPosition": "fn() -> string",
        "addTo": "fn(map: Map) -> Control",
        "removeFrom": "fn(map: Map) -> Control",
        "getContainer": "fn() -> HTMLElement",
        "onAdd": "fn(map: Map) -> HTMLElement",
        "onRemove": "fn(map: Map)"
      },
      "Zoom": {
        "!type": "fn(options?: ZoomOptions)",
        "prototype": {}
      },
      "Attribution": {
        "!type": "fn(options?: AttributionOptions)",
        "prototype": {
          "setPrefix": "fn(prefix: string) -> Attribution",
          "addAttribution": "fn(text: string) -> Attribution",
          "removeAttribution": "fn(text: string) -> Attribution"
        }
      },
      "Layers": {
        "!type": "fn(baseLayers?: ?, overlays?: ?, options?: LayersOptions)",
        "prototype": {
          "addBaseLayer": "fn(layer: ILayer, name: string) -> Layers",
          "addOverlay": "fn(layer: ILayer, name: string) -> Layers",
          "removeLayer": "fn(layer: ILayer) -> Layers",
          "addEventListener": "fn(type: string, fn: fn(e: LeafletEvent), context?: ?) -> Layers",
          "addOneTimeEventListener": "fn(type: string, fn: fn(e: LeafletEvent), context?: ?) -> Layers",
          "removeEventListener": "fn(type: string, fn?: fn(e: LeafletEvent), context?: ?) -> Layers",
          "hasEventListeners": "fn(type: string) -> bool",
          "fireEvent": "fn(type: string, data?: ?) -> Layers",
          "on": "fn(type: string, fn: fn(e: LeafletEvent), context?: ?) -> Layers",
          "once": "fn(type: string, fn: fn(e: LeafletEvent), context?: ?) -> Layers",
          "off": "fn(type: string, fn?: fn(e: LeafletEvent), context?: ?) -> Layers",
          "fire": "fn(type: string, data?: ?) -> Layers",
          "clearAllEventListeners": "fn() -> Layers"
        }
      },
      "Scale": {
        "!type": "fn(options?: ScaleOptions)",
        "prototype": {}
      }
    },
    "control": {
      "zoom": "fn(options?: ZoomOptions) -> L.Control.Zoom",
      "attribution": "fn(options?: AttributionOptions) -> L.Control.Attribution",
      "layers": "fn(baseLayers?: ?, overlays?: ?, options?: LayersOptions) -> L.Control.Layers",
      "scale": "fn(options?: ScaleOptions) -> L.Control.Scale",
      "prototype": {
        "function": "fn(options?: ControlOptions) -> Control"
      }
    },
    "ControlOptions": {
      "position": "string"
    },
    "CRS": {
      "EPSG3857": "ICRS",
      "EPSG4326": "ICRS",
      "EPSG3395": "ICRS",
      "Simple": "ICRS",
      "prototype": {}
    },
    "divIcon": "fn(options: DivIconOptions) -> DivIcon",
    "DivIcon": {
      "!type": "fn(options: DivIconOptions)",
      "prototype": {}
    },
    "DivIconOptions": {
      "iconSize": "Point",
      "iconAnchor": "Point",
      "className": "string",
      "html": "string"
    },
    "DomEvent": {
      "addListener": "fn(el: HTMLElement, type: string, fn: fn(e: Event), context?: ?) -> DomEvent",
      "on": "fn(el: HTMLElement, type: string, fn: fn(e: Event), context?: ?) -> DomEvent",
      "removeListener": "fn(el: HTMLElement, type: string, fn: fn(e: Event), context?: ?) -> DomEvent",
      "off": "fn(el: HTMLElement, type: string, fn: fn(e: Event), context?: ?) -> DomEvent",
      "stopPropagation": "fn(e: Event) -> DomEvent",
      "preventDefault": "fn(e: Event) -> DomEvent",
      "stop": "fn(e: Event) -> DomEvent",
      "disableClickPropagation": "fn(el: HTMLElement) -> DomEvent",
      "getMousePosition": "fn(e: Event, container?: HTMLElement) -> Point",
      "getWheelDelta": "fn(e: Event) -> number",
      "prototype": {}
    },
    "DomUtil": {
      "get": "fn(id: string) -> HTMLElement",
      "getStyle": "fn(el: HTMLElement, style: string) -> string",
      "getViewportOffset": "fn(el: HTMLElement) -> Point",
      "create": "fn(tagName: string, className: string, container?: HTMLElement) -> HTMLElement",
      "disableTextSelection": "fn()",
      "enableTextSelection": "fn()",
      "hasClass": "fn(el: HTMLElement, name: string) -> bool",
      "addClass": "fn(el: HTMLElement, name: string)",
      "removeClass": "fn(el: HTMLElement, name: string)",
      "setOpacity": "fn(el: HTMLElement, value: number)",
      "testProp": "fn(props: [string]) -> ?",
      "getTranslateString": "fn(point: Point) -> string",
      "getScaleString": "fn(scale: number, origin: Point) -> string",
      "setPosition": "fn(el: HTMLElement, point: Point, disable3D?: bool)",
      "getPosition": "fn(el: HTMLElement) -> Point",
      "TRANSITION": "string",
      "TRANSFORM": "string",
      "prototype": {}
    },
    "draggable": "fn(element: HTMLElement, dragHandle?: HTMLElement) -> Draggable",
    "Draggable": {
      "!type": "fn(element: HTMLElement, dragHandle?: HTMLElement)",
      "prototype": {
        "enable": "fn()",
        "disable": "fn()",
        "addEventListener": "fn(type: string, fn: fn(e: LeafletEvent), context?: ?) -> Draggable",
        "addOneTimeEventListener": "fn(type: string, fn: fn(e: LeafletEvent), context?: ?) -> Draggable",
        "removeEventListener": "fn(type: string, fn?: fn(e: LeafletEvent), context?: ?) -> Draggable",
        "hasEventListeners": "fn(type: string) -> bool",
        "fireEvent": "fn(type: string, data?: ?) -> Draggable",
        "on": "fn(type: string, fn: fn(e: LeafletEvent), context?: ?) -> Draggable",
        "once": "fn(type: string, fn: fn(e: LeafletEvent), context?: ?) -> Draggable",
        "off": "fn(type: string, fn?: fn(e: LeafletEvent), context?: ?) -> Draggable",
        "fire": "fn(type: string, data?: ?) -> Draggable",
        "clearAllEventListeners": "fn() -> Draggable"
      }
    },
    "featureGroup": "fn(layers?: [T]) -> ?",
    "FeatureGroup": {
      "!type": "fn(layers?: [T])",
      "prototype": {
        "bindPopup": "fn(htmlContent: string, options?: PopupOptions) -> ?",
        "getBounds": "fn() -> LatLngBounds",
        "setStyle": "fn(style: PathOptions) -> ?",
        "bringToFront": "fn() -> ?",
        "bringToBack": "fn() -> ?",
        "onAdd": "fn(map: Map)",
        "onRemove": "fn(map: Map)",
        "addEventListener": "fn(type: string, fn: fn(e: LeafletEvent), context?: ?) -> ?",
        "addOneTimeEventListener": "fn(type: string, fn: fn(e: LeafletEvent), context?: ?) -> ?",
        "removeEventListener": "fn(type: string, fn?: fn(e: LeafletEvent), context?: ?) -> ?",
        "hasEventListeners": "fn(type: string) -> bool",
        "fireEvent": "fn(type: string, data?: ?) -> ?",
        "on": "fn(type: string, fn: fn(e: LeafletEvent), context?: ?) -> ?",
        "once": "fn(type: string, fn: fn(e: LeafletEvent), context?: ?) -> ?",
        "off": "fn(type: string, fn?: fn(e: LeafletEvent), context?: ?) -> ?",
        "fire": "fn(type: string, data?: ?) -> ?",
        "clearAllEventListeners": "fn() -> ?"
      }
    },
    "FitBoundsOptions": {
      "paddingTopLeft": "Point",
      "paddingBottomRight": "Point",
      "padding": "Point",
      "maxZoom": "number"
    },
    "geoJson": "fn(geojson?: ?, options?: GeoJSONOptions) -> GeoJSON",
    "GeoJSON": {
      "!type": "fn(geojson?: ?, options?: GeoJSONOptions)",
      "geometryToLayer": "fn(featureData: GeoJSON, pointToLayer?: fn(featureData: ?, latlng: LatLng)) -> ILayer",
      "coordsToLatlng": "fn(coords: [number], reverse?: bool) -> LatLng",
      "coordsToLatlngs": "fn(coords: [number], levelsDeep?: number, reverse?: bool) -> [LatLng]",
      "prototype": {
        "addData": "fn(data: ?) -> bool",
        "setStyle": "fn(style: fn(featureData: ?)) -> GeoJSON",
        "resetStyle": "fn(layer: Path) -> GeoJSON"
      }
    },
    "GeoJSONOptions": {
      "pointToLayer": "fn(featureData: ?, latlng: LatLng)",
      "style": "fn(featureData: ?)",
      "onEachFeature": "fn(featureData: ?, layer: ILayer)",
      "filter": "fn(featureData: ?, layer: ILayer)",
      "coordsToLatLng": "fn(coords: [?])"
    },
    "icon": "fn(options: IconOptions) -> Icon",
    "Icon": {
      "!type": "fn(options: IconOptions)",
      "prototype": {},
      "Default": {
        "!type": "fn(options?: IconOptions)",
        "imagePath": "string",
        "prototype": {}
      }
    },
    "IconOptions": {
      "iconUrl": "string",
      "iconRetinaUrl": "string",
      "iconSize": "Point",
      "iconAnchor": "Point",
      "shadowUrl": "string",
      "shadowRetinaUrl": "string",
      "shadowSize": "Point",
      "shadowAnchor": "Point",
      "popupAnchor": "Point",
      "className": "string"
    },
    "IControl": {
      "onAdd": "fn(map: Map) -> HTMLElement",
      "onRemove": "fn(map: Map)"
    },
    "ICRS": {
      "projection": "IProjection",
      "transformation": "Transformation",
      "code": "string",
      "latLngToPoint": "fn(latlng: LatLng, zoom: number) -> Point",
      "pointToLatLng": "fn(point: Point, zoom: number) -> LatLng",
      "project": "fn(latlng: LatLng) -> Point",
      "scale": "fn(zoom: number) -> number",
      "getSize": "fn(zoom: number) -> Point"
    },
    "IEventPowered": {
      "addEventListener": "fn(type: string, fn: fn(e: LeafletEvent), context?: ?) -> T",
      "addOneTimeEventListener": "fn(type: string, fn: fn(e: LeafletEvent), context?: ?) -> T",
      "removeEventListener": "fn(type: string, fn?: fn(e: LeafletEvent), context?: ?) -> T",
      "hasEventListeners": "fn(type: string) -> bool",
      "fireEvent": "fn(type: string, data?: ?) -> T",
      "clearAllEventListeners": "fn() -> T",
      "on": "fn(type: string, fn: fn(e: LeafletEvent), context?: ?) -> T",
      "once": "fn(type: string, fn: fn(e: LeafletEvent), context?: ?) -> T",
      "off": "fn(type: string, fn?: fn(e: LeafletEvent), context?: ?) -> T",
      "fire": "fn(type: string, data?: ?) -> T"
    },
    "IHandler": {
      "enable": "fn()",
      "disable": "fn()",
      "enabled": "fn() -> bool"
    },
    "Handler": {
      "prototype": {
        "initialize": "fn(map: Map)"
      }
    },
    "ILayer": {
      "onAdd": "fn(map: Map)",
      "onRemove": "fn(map: Map)"
    },
    "Mixin": {
      "LeafletMixinEvents": {},
      "Events": "LeafletMixinEvents"
    },
    "imageOverlay": "fn(imageUrl: string, bounds: LatLngBounds, options?: ImageOverlayOptions) -> ImageOverlay",
    "ImageOverlay": {
      "!type": "fn(imageUrl: string, bounds: LatLngBounds, options?: ImageOverlayOptions)",
      "prototype": {
        "addTo": "fn(map: Map) -> ImageOverlay",
        "setOpacity": "fn(opacity: number) -> ImageOverlay",
        "setUrl": "fn(imageUrl: string) -> ImageOverlay",
        "bringToFront": "fn() -> ImageOverlay",
        "bringToBack": "fn() -> ImageOverlay",
        "onAdd": "fn(map: Map)",
        "onRemove": "fn(map: Map)"
      }
    },
    "ImageOverlayOptions": {
      "opacity": "number"
    },
    "IProjection": {
      "project": "fn(latlng: LatLng) -> Point",
      "unproject": "fn(point: Point) -> LatLng"
    },
    "version": "string",
    "noConflict": "fn() -> L",
    "latLng": "fn(latitude: number, longitude: number) -> LatLng",
    "LatLng": {
      "!type": "fn(latitude: number, longitude: number)",
      "DEG_TO_RAD": "number",
      "RAD_TO_DEG": "number",
      "MAX_MARGIN": "number",
      "prototype": {
        "distanceTo": "fn(otherLatlng: LatLng) -> number",
        "equals": "fn(otherLatlng: LatLng) -> bool",
        "wrap": "fn(left: number, right: number) -> LatLng",
        "lat": "number",
        "lng": "number"
      }
    },
    "latLngBounds": "fn(southWest: LatLng, northEast: LatLng) -> LatLngBounds",
    "LatLngBounds": {
      "!type": "fn(southWest: LatLng, northEast: LatLng)",
      "prototype": {
        "extend": "fn(latlng: LatLng) -> LatLngBounds",
        "getSouthWest": "fn() -> LatLng",
        "getNorthEast": "fn() -> LatLng",
        "getNorthWest": "fn() -> LatLng",
        "getSouthEast": "fn() -> LatLng",
        "getCenter": "fn() -> LatLng",
        "contains": "fn(otherBounds: LatLngBounds) -> bool",
        "intersects": "fn(otherBounds: LatLngBounds) -> bool",
        "equals": "fn(otherBounds: LatLngBounds) -> bool",
        "toBBoxString": "fn() -> string",
        "pad": "fn(bufferRatio: number) -> LatLngBounds",
        "isValid": "fn() -> bool"
      }
    },
    "layerGroup": "fn(layers?: [T]) -> ?",
    "LayerGroup": {
      "!type": "fn(layers?: [T])",
      "prototype": {
        "addTo": "fn(map: Map) -> ?",
        "addLayer": "fn(layer: T) -> ?",
        "removeLayer": "fn(layer: T) -> ?",
        "hasLayer": "fn(layer: T) -> bool",
        "getLayer": "fn(id: string) -> T",
        "getLayers": "fn() -> [T]",
        "clearLayers": "fn() -> ?",
        "eachLayer": "fn(fn: fn(layer: T), context?: ?) -> ?",
        "toGeoJSON": "fn() -> ?",
        "onAdd": "fn(map: Map)",
        "onRemove": "fn(map: Map)"
      }
    },
    "LayersOptions": {
      "position": "string",
      "collapsed": "bool",
      "autoZIndex": "bool"
    },
    "LeafletErrorEvent": {
      "message": "string",
      "code": "number"
    },
    "LeafletEvent": {
      "type": "string",
      "target": "?"
    },
    "LeafletGeoJSONEvent": {
      "layer": "ILayer",
      "properties": "?",
      "geometryType": "string",
      "id": "string"
    },
    "LeafletLayerEvent": {
      "layer": "ILayer"
    },
    "LeafletLocationEvent": {
      "latlng": "LatLng",
      "bounds": "LatLngBounds",
      "accuracy": "number",
      "altitude": "number",
      "altitudeAccuracy": "number",
      "heading": "number",
      "speed": "number",
      "timestamp": "number"
    },
    "LeafletMouseEvent": {
      "latlng": "LatLng",
      "layerPoint": "Point",
      "containerPoint": "Point",
      "originalEvent": "MouseEvent"
    },
    "LeafletPopupEvent": {
      "popup": "Popup"
    },
    "LeafletDragEndEvent": {
      "distance": "number"
    },
    "LeafletResizeEvent": {
      "oldSize": "Point",
      "newSize": "Point"
    },
    "LeafletTileEvent": {
      "tile": "HTMLElement",
      "url": "string"
    },
    "LineUtil": {
      "simplify": "fn(points: [Point], tolerance: number) -> [Point]",
      "pointToSegmentDistance": "fn(p: Point, p1: Point, p2: Point) -> number",
      "closestPointOnSegment": "fn(p: Point, p1: Point, p2: Point) -> number",
      "clipSegment": "fn(a: Point, b: Point, bounds: Bounds)",
      "prototype": {}
    },
    "LocateOptions": {
      "watch": "bool",
      "setView": "bool",
      "maxZoom": "number",
      "timeout": "number",
      "maximumAge": "number",
      "enableHighAccuracy": "bool"
    },
    "map": "fn(id: HTMLElement, options?: MapOptions) -> Map",
    "Map": {
      "!type": "fn(id: HTMLElement, options?: MapOptions)",
      "prototype": {
        "setView": "fn(center: LatLng, zoom?: number, options?: ZoomPanOptions) -> Map",
        "setZoom": "fn(zoom: number, options?: ZoomOptions) -> Map",
        "zoomIn": "fn(delta?: number, options?: ZoomOptions) -> Map",
        "zoomOut": "fn(delta?: number, options?: ZoomOptions) -> Map",
        "setZoomAround": "fn(latlng: LatLng, zoom: number, options?: ZoomOptions) -> Map",
        "fitBounds": "fn(bounds: LatLngBounds, options?: FitBoundsOptions) -> Map",
        "fitWorld": "fn(options?: FitBoundsOptions) -> Map",
        "panTo": "fn(latlng: LatLng, options?: PanOptions) -> Map",
        "panInsideBounds": "fn(bounds: LatLngBounds) -> Map",
        "panBy": "fn(point: Point, options?: PanOptions) -> Map",
        "invalidateSize": "fn(options: ZoomPanOptions) -> Map",
        "setMaxBounds": "fn(bounds: LatLngBounds, options?: ZoomPanOptions) -> Map",
        "locate": "fn(options?: LocateOptions) -> Map",
        "stopLocate": "fn() -> Map",
        "remove": "fn() -> Map",
        "getCenter": "fn() -> LatLng",
        "getZoom": "fn() -> number",
        "getMinZoom": "fn() -> number",
        "getMaxZoom": "fn() -> number",
        "getBounds": "fn() -> LatLngBounds",
        "getBoundsZoom": "fn(bounds: LatLngBounds, inside?: bool) -> number",
        "getSize": "fn() -> Point",
        "getPixelBounds": "fn() -> Bounds",
        "getPixelOrigin": "fn() -> Point",
        "addLayer": "fn(layer: ILayer, insertAtTheBottom?: bool) -> Map",
        "removeLayer": "fn(layer: ILayer) -> Map",
        "hasLayer": "fn(layer: ILayer) -> bool",
        "openPopup": "fn(popup: Popup) -> Map",
        "closePopup": "fn(popup?: Popup) -> Map",
        "addControl": "fn(control: IControl) -> Map",
        "removeControl": "fn(control: IControl) -> Map",
        "latLngToLayerPoint": "fn(latlng: LatLng) -> Point",
        "layerPointToLatLng": "fn(point: Point) -> LatLng",
        "containerPointToLayerPoint": "fn(point: Point) -> Point",
        "layerPointToContainerPoint": "fn(point: Point) -> Point",
        "latLngToContainerPoint": "fn(latlng: LatLng) -> Point",
        "containerPointToLatLng": "fn(point: Point) -> LatLng",
        "project": "fn(latlng: LatLng, zoom?: number) -> Point",
        "unproject": "fn(point: Point, zoom?: number) -> LatLng",
        "mouseEventToContainerPoint": "fn(event: LeafletMouseEvent) -> Point",
        "mouseEventToLayerPoint": "fn(event: LeafletMouseEvent) -> Point",
        "mouseEventToLatLng": "fn(event: LeafletMouseEvent) -> LatLng",
        "getContainer": "fn() -> HTMLElement",
        "getPanes": "fn() -> MapPanes",
        "whenReady": "fn(fn: fn(map: Map), context?: ?) -> Map",
        "dragging": "IHandler",
        "touchZoom": "IHandler",
        "doubleClickZoom": "IHandler",
        "scrollWheelZoom": "IHandler",
        "boxZoom": "IHandler",
        "keyboard": "IHandler",
        "tap": "IHandler",
        "zoomControl": "Control.Zoom",
        "attributionControl": "Control.Attribution",
        "options": "MapOptions",
        "addEventListener": "fn(type: string, fn: fn(e: LeafletEvent), context?: ?) -> Map",
        "addOneTimeEventListener": "fn(type: string, fn: fn(e: LeafletEvent), context?: ?) -> Map",
        "removeEventListener": "fn(type: string, fn?: fn(e: LeafletEvent), context?: ?) -> Map",
        "hasEventListeners": "fn(type: string) -> bool",
        "fireEvent": "fn(type: string, data?: ?) -> Map",
        "on": "fn(type: string, fn: fn(e: LeafletEvent), context?: ?) -> Map",
        "once": "fn(type: string, fn: fn(e: LeafletEvent), context?: ?) -> Map",
        "off": "fn(type: string, fn?: fn(e: LeafletEvent), context?: ?) -> Map",
        "fire": "fn(type: string, data?: ?) -> Map",
        "clearAllEventListeners": "fn() -> Map"
      }
    },
    "MapOptions": {
      "center": "LatLng",
      "zoom": "number",
      "layers": "[ILayer]",
      "minZoom": "number",
      "maxZoom": "number",
      "maxBounds": "LatLngBounds",
      "crs": "ICRS",
      "dragging": "bool",
      "touchZoom": "bool",
      "scrollWheelZoom": "bool",
      "doubleClickZoom": "bool",
      "boxZoom": "bool",
      "tap": "bool",
      "tapTolerance": "number",
      "trackResize": "bool",
      "worldCopyJump": "bool",
      "closePopupOnClick": "bool",
      "keyboard": "bool",
      "keyboardPanOffset": "number",
      "keyboardZoomOffset": "number",
      "inertia": "bool",
      "inertiaDeceleration": "number",
      "inertiaMaxSpeed": "number",
      "inertiaThreshold": "number",
      "zoomControl": "bool",
      "attributionControl": "bool",
      "fadeAnimation": "bool",
      "zoomAnimation": "bool",
      "zoomAnimationThreshold": "number",
      "markerZoomAnimation": "bool",
      "bounceAtZoomLimits": "bool"
    },
    "MapPanes": {
      "mapPane": "HTMLElement",
      "tilePane": "HTMLElement",
      "objectsPane": "HTMLElement",
      "shadowPane": "HTMLElement",
      "overlayPane": "HTMLElement",
      "markerPane": "HTMLElement",
      "popupPane": "HTMLElement"
    },
    "marker": "fn(latlng: LatLng, options?: MarkerOptions) -> Marker",
    "Marker": {
      "!type": "fn(latlng: LatLng, options?: MarkerOptions)",
      "prototype": {
        "addTo": "fn(map: Map) -> Marker",
        "getLatLng": "fn() -> LatLng",
        "setLatLng": "fn(latlng: LatLng) -> Marker",
        "setIcon": "fn(icon: Icon) -> Marker",
        "setZIndexOffset": "fn(offset: number) -> Marker",
        "setOpacity": "fn(opacity: number) -> Marker",
        "update": "fn() -> Marker",
        "bindPopup": "fn(html: string, options?: PopupOptions) -> Marker",
        "unbindPopup": "fn() -> Marker",
        "openPopup": "fn() -> Marker",
        "getPopup": "fn() -> Popup",
        "closePopup": "fn() -> Marker",
        "togglePopup": "fn() -> Marker",
        "setPopupContent": "fn(html: string, options?: PopupOptions) -> Marker",
        "toGeoJSON": "fn() -> ?",
        "dragging": "IHandler",
        "onAdd": "fn(map: Map)",
        "onRemove": "fn(map: Map)",
        "addEventListener": "fn(type: string, fn: fn(e: LeafletEvent), context?: ?) -> Marker",
        "addOneTimeEventListener": "fn(type: string, fn: fn(e: LeafletEvent), context?: ?) -> Marker",
        "removeEventListener": "fn(type: string, fn?: fn(e: LeafletEvent), context?: ?) -> Marker",
        "hasEventListeners": "fn(type: string) -> bool",
        "fireEvent": "fn(type: string, data?: ?) -> Marker",
        "on": "fn(type: string, fn: fn(e: LeafletEvent), context?: ?) -> Marker",
        "once": "fn(type: string, fn: fn(e: LeafletEvent), context?: ?) -> Marker",
        "off": "fn(type: string, fn?: fn(e: LeafletEvent), context?: ?) -> Marker",
        "fire": "fn(type: string, data?: ?) -> Marker",
        "clearAllEventListeners": "fn() -> Marker"
      }
    },
    "MarkerOptions": {
      "icon": "Icon",
      "clickable": "bool",
      "draggable": "bool",
      "keyboard": "bool",
      "title": "string",
      "alt": "string",
      "zIndexOffset": "number",
      "opacity": "number",
      "riseOnHover": "bool",
      "riseOffset": "number"
    },
    "multiPolygon": "fn(latlngs: [[LatLng]], options?: PolylineOptions) -> MultiPolygon",
    "MultiPolygon": {
      "!type": "fn(latlngs: [[LatLng]], options?: PolylineOptions)",
      "prototype": {
        "setLatLngs": "fn(latlngs: [[LatLng]]) -> MultiPolygon",
        "getLatLngs": "fn() -> [[LatLng]]",
        "openPopup": "fn() -> MultiPolygon",
        "toGeoJSON": "fn() -> ?"
      }
    },
    "multiPolyline": "fn(latlngs: [[LatLng]], options?: PolylineOptions) -> MultiPolyline",
    "MultiPolyline": {
      "!type": "fn(latlngs: [[LatLng]], options?: PolylineOptions)",
      "prototype": {
        "setLatLngs": "fn(latlngs: [[LatLng]]) -> MultiPolyline",
        "getLatLngs": "fn() -> [[LatLng]]",
        "openPopup": "fn() -> MultiPolyline",
        "toGeoJSON": "fn() -> ?"
      }
    },
    "PanOptions": {
      "animate": "bool",
      "duration": "number",
      "easeLinearity": "number",
      "noMoveStart": "bool"
    },
    "Path": {
      "SVG": "bool",
      "VML": "bool",
      "CANVAS": "bool",
      "CLIP_PADDING": "number",
      "prototype": {
        "addTo": "fn(map: Map) -> Path",
        "bindPopup": "fn(html: string, options?: PopupOptions) -> Path",
        "unbindPopup": "fn() -> Path",
        "openPopup": "fn(latlng?: LatLng) -> Path",
        "closePopup": "fn() -> Path",
        "setStyle": "fn(object: PathOptions) -> Path",
        "getBounds": "fn() -> LatLngBounds",
        "bringToFront": "fn() -> Path",
        "bringToBack": "fn() -> Path",
        "redraw": "fn() -> Path",
        "onAdd": "fn(map: Map)",
        "onRemove": "fn(map: Map)",
        "addEventListener": "fn(type: string, fn: fn(e: LeafletEvent), context?: ?) -> Path",
        "addOneTimeEventListener": "fn(type: string, fn: fn(e: LeafletEvent), context?: ?) -> Path",
        "removeEventListener": "fn(type: string, fn?: fn(e: LeafletEvent), context?: ?) -> Path",
        "hasEventListeners": "fn(type: string) -> bool",
        "fireEvent": "fn(type: string, data?: ?) -> Path",
        "on": "fn(type: string, fn: fn(e: LeafletEvent), context?: ?) -> Path",
        "once": "fn(type: string, fn: fn(e: LeafletEvent), context?: ?) -> Path",
        "off": "fn(type: string, fn?: fn(e: LeafletEvent), context?: ?) -> Path",
        "fire": "fn(type: string, data?: ?) -> Path",
        "clearAllEventListeners": "fn() -> Path"
      }
    },
    "PathOptions": {
      "stroke": "bool",
      "color": "string",
      "weight": "number",
      "opacity": "number",
      "fill": "bool",
      "fillColor": "string",
      "fillOpacity": "number",
      "dashArray": "string",
      "lineCap": "string",
      "lineJoin": "string",
      "clickable": "bool",
      "pointerEvents": "bool",
      "className": "string"
    },
    "point": "fn(x: number, y: number, round?: bool) -> Point",
    "Point": {
      "!type": "fn(x: number, y: number, round?: bool)",
      "prototype": {
        "add": "fn(otherPoint: Point) -> Point",
        "subtract": "fn(otherPoint: Point) -> Point",
        "multiplyBy": "fn(number: number) -> Point",
        "divideBy": "fn(number: number, round?: bool) -> Point",
        "distanceTo": "fn(otherPoint: Point) -> number",
        "clone": "fn() -> Point",
        "round": "fn() -> Point",
        "equals": "fn(otherPoint: Point) -> bool",
        "x": "number",
        "y": "number"
      }
    },
    "polygon": "fn(latlngs: [LatLng], options?: PolylineOptions) -> Polygon",
    "Polygon": {
      "!type": "fn(latlngs: [LatLng], options?: PolylineOptions)",
      "prototype": {}
    },
    "polyline": "fn(latlngs: [LatLng], options?: PolylineOptions) -> Polyline",
    "Polyline": {
      "!type": "fn(latlngs: [LatLng], options?: PolylineOptions)",
      "prototype": {
        "addLatLng": "fn(latlng: LatLng) -> Polyline",
        "setLatLngs": "fn(latlngs: [LatLng]) -> Polyline",
        "getLatLngs": "fn() -> [LatLng]",
        "spliceLatLngs": "fn(index: number, pointsToRemove: number, latlngs: [LatLng]) -> [LatLng]",
        "getBounds": "fn() -> LatLngBounds",
        "toGeoJSON": "fn() -> ?"
      }
    },
    "PolylineOptions": {
      "smoothFactor": "number",
      "noClip": "bool"
    },
    "PolyUtil": {
      "clipPolygon": "fn(points: [Point], bounds: Bounds) -> [Point]",
      "prototype": {}
    },
    "popup": "fn(options?: PopupOptions, source?: ?) -> Popup",
    "Popup": {
      "!type": "fn(options?: PopupOptions, source?: ?)",
      "prototype": {
        "addTo": "fn(map: Map) -> Popup",
        "openOn": "fn(map: Map) -> Popup",
        "setLatLng": "fn(latlng: LatLng) -> Popup",
        "getLatLng": "fn() -> LatLng",
        "setContent": "fn(html: string) -> Popup",
        "getContent": "fn() -> HTMLElement",
        "onAdd": "fn(map: Map)",
        "onRemove": "fn(map: Map)",
        "update": "fn() -> Popup"
      }
    },
    "PopupOptions": {
      "maxWidth": "number",
      "minWidth": "number",
      "maxHeight": "number",
      "autoPan": "bool",
      "closeButton": "bool",
      "offset": "Point",
      "autoPanPaddingTopLeft": "Point",
      "autoPanPaddingBottomRight": "Point",
      "autoPanPadding": "Point",
      "zoomAnimation": "bool",
      "closeOnClick": "bool"
    },
    "PosAnimation": {
      "!type": "fn()",
      "prototype": {
        "run": "fn(element: HTMLElement, newPos: Point, duration?: number, easeLinearity?: number) -> PosAnimation",
        "addEventListener": "fn(type: string, fn: fn(e: LeafletEvent), context?: ?) -> PosAnimation",
        "addOneTimeEventListener": "fn(type: string, fn: fn(e: LeafletEvent), context?: ?) -> PosAnimation",
        "removeEventListener": "fn(type: string, fn?: fn(e: LeafletEvent), context?: ?) -> PosAnimation",
        "hasEventListeners": "fn(type: string) -> bool",
        "fireEvent": "fn(type: string, data?: ?) -> PosAnimation",
        "on": "fn(type: string, fn: fn(e: LeafletEvent), context?: ?) -> PosAnimation",
        "once": "fn(type: string, fn: fn(e: LeafletEvent), context?: ?) -> PosAnimation",
        "off": "fn(type: string, fn?: fn(e: LeafletEvent), context?: ?) -> PosAnimation",
        "fire": "fn(type: string, data?: ?) -> PosAnimation",
        "clearAllEventListeners": "fn() -> PosAnimation"
      }
    },
    "Projection": {
      "SphericalMercator": "IProjection",
      "Mercator": "IProjection",
      "LonLat": "IProjection",
      "prototype": {}
    },
    "rectangle": "fn(bounds: LatLngBounds, options?: PathOptions) -> Rectangle",
    "Rectangle": {
      "!type": "fn(bounds: LatLngBounds, options?: PathOptions)",
      "prototype": {
        "setBounds": "fn(bounds: LatLngBounds) -> Rectangle"
      }
    },
    "ScaleOptions": {
      "position": "string",
      "maxWidth": "number",
      "metric": "bool",
      "imperial": "bool",
      "updateWhenIdle": "bool"
    },
    "TileLayer": {
      "!type": "fn(urlTemplate: string, options?: TileLayerOptions)",
      "prototype": {
        "addTo": "fn(map: Map) -> TileLayer",
        "bringToFront": "fn() -> TileLayer",
        "bringToBack": "fn() -> TileLayer",
        "setOpacity": "fn(opacity: number) -> TileLayer",
        "setZIndex": "fn(zIndex: number) -> TileLayer",
        "redraw": "fn() -> TileLayer",
        "setUrl": "fn(urlTemplate: string) -> TileLayer",
        "getContainer": "fn() -> HTMLElement",
        "onAdd": "fn(map: Map)",
        "onRemove": "fn(map: Map)",
        "addEventListener": "fn(type: string, fn: fn(e: LeafletEvent), context?: ?) -> TileLayer",
        "addOneTimeEventListener": "fn(type: string, fn: fn(e: LeafletEvent), context?: ?) -> TileLayer",
        "removeEventListener": "fn(type: string, fn?: fn(e: LeafletEvent), context?: ?) -> TileLayer",
        "hasEventListeners": "fn(type: string) -> bool",
        "fireEvent": "fn(type: string, data?: ?) -> TileLayer",
        "on": "fn(type: string, fn: fn(e: LeafletEvent), context?: ?) -> TileLayer",
        "once": "fn(type: string, fn: fn(e: LeafletEvent), context?: ?) -> TileLayer",
        "off": "fn(type: string, fn?: fn(e: LeafletEvent), context?: ?) -> TileLayer",
        "fire": "fn(type: string, data?: ?) -> TileLayer",
        "clearAllEventListeners": "fn() -> TileLayer"
      },
      "WMS": {
        "!type": "fn(baseUrl: string, options: WMSOptions)",
        "prototype": {
          "setParams": "fn(params: WMS, noRedraw?: bool) -> WMS"
        }
      },
      "Canvas": {
        "!type": "fn(options?: TileLayerOptions)",
        "prototype": {
          "drawTile": "fn(canvas: HTMLCanvasElement, tilePoint: Point, zoom: number) -> Canvas",
          "redraw": "fn() -> Canvas"
        }
      }
    },
    "TileLayerFactory": {
      "wms": "fn(baseUrl: string, options: WMSOptions) -> L.TileLayer.WMS",
      "canvas": "fn(options?: TileLayerOptions) -> L.TileLayer.Canvas"
    },
    "tileLayer": "TileLayerFactory",
    "TileLayerOptions": {
      "minZoom": "number",
      "maxZoom": "number",
      "maxNativeZoom": "number",
      "tileSize": "number",
      "subdomains": "[string]",
      "errorTileUrl": "string",
      "attribution": "string",
      "tms": "bool",
      "continuousWorld": "bool",
      "noWrap": "bool",
      "zoomOffset": "number",
      "zoomReverse": "bool",
      "opacity": "number",
      "zIndex": "number",
      "unloadInvisibleTiles": "bool",
      "updateWhenIdle": "bool",
      "detectRetina": "bool",
      "reuseTiles": "bool"
    },
    "Transformation": {
      "!type": "fn(a: number, b: number, c: number, d: number)",
      "prototype": {
        "transform": "fn(point: Point, scale?: number) -> Point",
        "untransform": "fn(point: Point, scale?: number) -> Point"
      }
    },
    "Util": {
      "extend": "fn(dest: ?, sources: [?]) -> ?",
      "bind": "fn(fn: T, obj: ?) -> T",
      "stamp": "fn(obj: ?) -> string",
      "limitExecByInterval": "fn(fn: T, time: number, context?: ?) -> T",
      "falseFn": "fn() -> fn()",
      "formatNum": "fn(num: number, digits: number) -> number",
      "splitWords": "fn(str: string) -> [string]",
      "setOptions": "fn(obj: ?, options: ?) -> ?",
      "getParamString": "fn(obj: ?) -> string",
      "template": "fn(str: string, data: ?) -> string",
      "isArray": "fn(obj: ?) -> bool",
      "trim": "fn(str: string) -> string",
      "emptyImageUrl": "string",
      "prototype": {}
    },
    "WMSOptions": {
      "layers": "string",
      "styles": "string",
      "format": "string",
      "transparent": "bool",
      "version": "string"
    },
    "ZoomOptions": {
      "position": "string"
    },
    "ZoomPanOptions": {
      "reset": "bool",
      "pan": "PanOptions",
      "zoom": "ZoomOptions",
      "animate": "bool",
      "debounceMoveend": "bool"
    }
  },
  "L_PREFER_CANVAS": "bool",
  "L_NO_TOUCH": "bool",
  "L_DISABLE_3D": "bool",
  "leaflet": "L",
  "!name": "leaflet.d.ts"
}
