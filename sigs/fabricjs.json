{
  "fabric": {
    "createCanvasForNode": "fn(width: number, height: number) -> ICanvas",
    "getCSSRules": "fn(doc: SVGElement)",
    "getGradientDefs": "fn(doc: SVGElement)",
    "loadSVGFromString": "fn(text: string, callback: fn(results: [IObject], options: ?), reviver?: fn(el: ?, obj: ?))",
    "loadSVGFromURL": "fn(url: ?, callback: fn(results: [IObject], options: ?), reviver?: fn(el: ?, obj: ?))",
    "log": "fn(values: ?)",
    "parseAttributes": "fn(element: ?, attributes: [?]) -> ?",
    "parseElements": "fn(elements: [?], callback: ?, options: ?, reviver: ?)",
    "parsePointsAttribute": "fn(points: string) -> [?]",
    "parseStyleAttribute": "fn(element: SVGElement)",
    "parseSVGDocument": "fn(doc: SVGElement, callback: fn(results: ?, options: ?), reviver?: fn(el: ?, obj: ?))",
    "parseTransformAttribute": "fn(attributeValue: string)",
    "warn": "fn(values: ?)",
    "isLikelyNode": "bool",
    "isTouchSupported": "bool",
    "IObservable": {
      "observe": "fn(eventCollection: IEventList)",
      "on": "fn(eventCollection: IEventList)",
      "fire": "fn(eventName: string, options: ?)",
      "stopObserving": "fn(eventName: string, handler: fn(e: ?))",
      "off": "fn(eventName: ?, handler: ?)"
    },
    "IFilter": {},
    "IEventList": {},
    "IObjectOptions": {
      "angle": "number",
      "borderColor": "string",
      "borderOpacityWhenMoving": "number",
      "borderScaleFactor": "number",
      "cornerColor": "string",
      "cornersize": "number",
      "fill": "string",
      "fillRule": "string",
      "flipX": "bool",
      "flipY": "bool",
      "hasBorders": "bool",
      "hasControls": "bool",
      "hasRotatingPoint": "bool",
      "height": "number",
      "includeDefaultValues": "bool",
      "left": "number",
      "lockMovementX": "bool",
      "lockMovementY": "bool",
      "lockScalingX": "bool",
      "lockScalingY": "bool",
      "lockUniScaling": "bool",
      "lockRotation": "bool",
      "opacity": "number",
      "originX": "string",
      "originY": "string",
      "overlayFill": "string",
      "padding": "number",
      "perPixelTargetFind": "bool",
      "rotatingPointOffset": "number",
      "scaleX": "number",
      "scaleY": "number",
      "selectable": "bool",
      "stateProperties": "[?]",
      "stroke": "string",
      "strokeDashArray": "[?]",
      "strokeWidth": "number",
      "top": "number",
      "transformMatrix": "[?]",
      "transparentCorners": "bool",
      "type": "string",
      "width": "number"
    },
    "ITextOptions": {
      "fontSize": "number",
      "fontWeight": "?",
      "fontFamily": "string",
      "textDecoration": "string",
      "textShadow": "string",
      "textAlign": "string",
      "fontStyle": "string",
      "lineHeight": "number",
      "strokeStyle": "string",
      "strokeWidth": "number",
      "backgroundColor": "string",
      "textBackgroundColor": "string",
      "path": "string",
      "type": "string",
      "useNative": "Boolean"
    },
    "ICircleOptions": {
      "radius": "number"
    },
    "IPoint": {
      "add": "fn(that: IPoint) -> IPoint",
      "addEquals": "fn(that: IPoint) -> IPoint",
      "distanceFrom": "fn(that: IPoint)",
      "divide": "fn(scalar: number)",
      "divideEquals": "fn(scalar: number)",
      "eq": "fn(that: IPoint)",
      "gt": "fn(that: IPoint)",
      "gte": "fn(that: IPoint)",
      "init": "fn(x: ?, y: ?)",
      "lerp": "fn(that: IPoint, t: ?)",
      "lt": "fn(that: IPoint)",
      "lte": "fn(that: IPoint)",
      "max": "fn(that: IPoint)",
      "min": "fn(that: IPoint)",
      "multiply": "fn(scalar: ?)",
      "multiplyEquals": "fn(scalar: ?)",
      "scalarAdd": "fn(scalar: ?) -> IPoint",
      "scalarAddEquals": "fn(scalar: number, thisArg: IPoint)",
      "scalarSubtract": "fn(scalar: number)",
      "scalarSubtractEquals": "fn(scalar: ?)",
      "setFromPoint": "fn(that: IPoint)",
      "setXY": "fn(x: ?, y: ?)",
      "subtract": "fn(that: IPoint) -> IPoint",
      "subtractEquals": "fn(that: IPoint) -> IPoint",
      "swap": "fn(that: IPoint)",
      "tostring": "fn() -> string"
    },
    "IRect": {
      "x": "number",
      "y": "number",
      "rx": "number",
      "ry": "number",
      "complexity": "fn() -> number",
      "initialize": "fn(options: ?)",
      "toObject": "fn(propertiesToInclude: [?]) -> ?",
      "toSVG": "fn() -> string"
    },
    "IText": {
      "fontSize": "number",
      "fontWeight": "?",
      "fontFamily": "string",
      "text": "string",
      "textDecoration": "string",
      "textShadow": "string",
      "textAlign": "string",
      "fontStyle": "string",
      "lineHeight": "number",
      "strokeStyle": "string",
      "strokeWidth": "number",
      "backgroundColor": "string",
      "textBackgroundColor": "string",
      "path": "string",
      "type": "string",
      "useNative": "Boolean",
      "initialize": "fn(options: ?)",
      "render": "fn(ctx: CanvasRenderingContext2D, noTransform: bool)",
      "toObject": "fn(propertiesToInclude: [?]) -> IObject",
      "toSVG": "fn() -> string",
      "setColor": "fn(value: string) -> IText",
      "setFontsize": "fn(value: number) -> IText",
      "getText": "fn() -> string",
      "setText": "fn(value: string) -> IText"
    },
    "ITriangle": {
      "complexity": "fn() -> number",
      "initialize": "fn(options: ?) -> ITriangle",
      "toSVG": "fn() -> string"
    },
    "IEllipse": {
      "initialize": "fn(options: ?) -> ?",
      "toObject": "fn(propertiesToInclude: [?]) -> ?",
      "toSVG": "fn() -> string",
      "render": "fn(ctx: CanvasRenderingContext2D, noTransform: bool)",
      "complexity": "fn() -> number"
    },
    "IGradient": {
      "initialize": "fn(options: ?) -> ?",
      "toObject": "fn() -> ?",
      "toLiveGradient": "fn(ctx: CanvasRenderingContext2D) -> ?"
    },
    "IColor": {
      "getSource": "fn() -> [?]",
      "setSource": "fn(source: [?]) -> ?",
      "toRgb": "fn() -> string",
      "toRgba": "fn() -> string",
      "toHex": "fn() -> string",
      "getAlpha": "fn() -> number",
      "setAlpha": "fn(alpha: number) -> IColor",
      "toGrayscale": "fn() -> IColor",
      "toBlackWhite": "fn(threshold: ?) -> IColor",
      "overlayWith": "fn(otherColor: string) -> IColor"
    },
    "IElement": {},
    "IObject": {
      "lockMovementX": "bool",
      "lockMovementY": "bool",
      "lockScalingX": "bool",
      "lockScalingY": "bool",
      "lockScaling": "bool",
      "lockUniScaling": "bool",
      "lockRotation": "bool",
      "getCurrentWidth": "fn() -> number",
      "getCurrentHeight": "fn() -> number",
      "originX": "string",
      "originY": "string",
      "angle": "number",
      "getAngle": "fn() -> number",
      "setAngle": "fn(value: number) -> IObject",
      "borderColor": "string",
      "getBorderColor": "fn() -> string",
      "setBorderColor": "fn(value: string) -> IObject",
      "borderOpacityWhenMoving": "number",
      "borderScaleFactor": "number",
      "getBorderScaleFactor": "fn() -> number",
      "cornerColor": "string",
      "cornersize": "number",
      "getCornersize": "fn() -> number",
      "setCornersize": "fn(value: number) -> IObject",
      "fill": "string",
      "getFill": "fn() -> string",
      "setFill": "fn(value: string) -> IObject",
      "fillRule": "string",
      "getFillRule": "fn() -> string",
      "setFillRule": "fn(value: string) -> IObject",
      "flipX": "bool",
      "getFlipX": "fn() -> bool",
      "setFlipX": "fn(value: bool) -> IObject",
      "flipY": "bool",
      "getFlipY": "fn() -> bool",
      "setFlipY": "fn(value: bool) -> IObject",
      "hasBorders": "bool",
      "hasControls": "bool",
      "hasRotatingPoint": "bool",
      "height": "number",
      "getHeight": "fn() -> number",
      "setHeight": "fn(value: number) -> IObject",
      "includeDefaultValues": "bool",
      "left": "number",
      "getLeft": "fn() -> number",
      "setLeft": "fn(value: number) -> IObject",
      "opacity": "number",
      "getOpacity": "fn() -> number",
      "setOpacity": "fn(value: number) -> IObject",
      "overlayFill": "string",
      "getOverlayFill": "fn() -> string",
      "setOverlayFill": "fn(value: string) -> IObject",
      "padding": "number",
      "perPixelTargetFind": "bool",
      "rotatingPointOffset": "number",
      "scaleX": "number",
      "getScaleX": "fn() -> number",
      "setScaleX": "fn(value: number) -> IObject",
      "scaleY": "number",
      "getScaleY": "fn() -> number",
      "setScaleY": "fn(value: number) -> IObject",
      "selectable": "bool",
      "stateProperties": "[?]",
      "stroke": "string",
      "strokeDashArray": "[?]",
      "strokeWidth": "number",
      "top": "number",
      "getTop": "fn() -> number",
      "setTop": "fn(value: number) -> IObject",
      "transformMatrix": "[?]",
      "transparentCorners": "bool",
      "type": "string",
      "width": "number",
      "getWidth": "fn() -> number",
      "setWidth": "fn(value: number) -> IObject",
      "bringForward": "fn(intersecting?: bool) -> IObject",
      "bringToFront": "fn() -> IObject",
      "center": "fn() -> IObject",
      "centerH": "fn() -> IObject",
      "centerV": "fn() -> IObject",
      "clone": "fn(callback?: ?, propertiesToInclude?: ?) -> IObject",
      "cloneAsImage": "fn(callback: ?) -> IObject",
      "complexity": "fn() -> number",
      "drawBorders": "fn(context: CanvasRenderingContext2D) -> IObject",
      "drawCorners": "fn(context: CanvasRenderingContext2D) -> IObject",
      "get": "fn(property: string) -> ?",
      "getBoundingRect": "fn() -> ret",
      "getBoundingRectHeight": "fn() -> number",
      "getBoundingRectWidth": "fn() -> number",
      "getSvgStyles": "fn() -> string",
      "getSvgTransform": "fn() -> string",
      "hasStateChanged": "fn() -> bool",
      "initialize": "fn(options: ?)",
      "intersectsWithObject": "fn(other: IObject) -> bool",
      "intersectsWithRect": "fn(selectionTL: ?, selectionBR: ?) -> bool",
      "isActive": "fn() -> bool",
      "isContainedWithinObject": "fn(other: IObject) -> bool",
      "isContainedWithinRect": "fn(selectionTL: ?, selectionBR: ?) -> bool",
      "isType": "fn(type: string) -> bool",
      "remove": "fn() -> IObject",
      "render": "fn(ctx: CanvasRenderingContext2D, noTransform: bool)",
      "rotate": "fn(value: number) -> IObject",
      "saveState": "fn() -> IObject",
      "scale": "fn(value: number) -> IObject",
      "scaleToHeight": "fn(value: number) -> IObject",
      "scaleToWidth": "fn(value: number) -> IObject",
      "sendBackwards": "fn(intersecting?: bool) -> IObject",
      "sendToBack": "fn() -> IObject",
      "set": "fn(properties: IObjectOptions) -> IObject",
      "setActive": "fn(active: bool) -> IObject",
      "setCoords": "fn()",
      "setGradientFill": "fn(options: ?)",
      "setOptions": "fn(options: ?)",
      "setSourcePath": "fn(value: string) -> IObject",
      "toDatalessObject": "fn(propertiesToInclude: ?) -> ?",
      "toDataURL": "fn(callback: ?) -> string",
      "toggle": "fn(property: ?) -> IObject",
      "toGrayscale": "fn() -> IObject",
      "toJSON": "fn(propertiesToInclude: ?) -> string",
      "toObject": "fn(propertiesToInclude: ?) -> ?",
      "tostring": "fn() -> string",
      "transform": "fn(ctx: CanvasRenderingContext2D)"
    },
    "IGroup": {
      "type": "string",
      "activateAllObjects": "fn() -> IGroup",
      "add": "fn(object: ?) -> IGroup",
      "addWithUpdate": "fn(object: ?) -> IGroup",
      "complexity": "fn() -> number",
      "contains": "fn(object: ?) -> bool",
      "containsPoint": "fn(point: ?) -> bool",
      "destroy": "fn() -> IGroup",
      "getObjects": "fn() -> [IObject]",
      "hasMoved": "fn() -> bool",
      "initialize": "fn(options: ?)",
      "item": "fn(index: ?) -> IObject",
      "remove": "fn(object?: ?) -> IGroup",
      "removeWithUpdate": "fn(object: ?) -> IGroup",
      "render": "fn(ctx: ?, noTransform: ?)",
      "saveCoords": "fn() -> IGroup",
      "setObjectsCoords": "fn() -> IGroup",
      "size": "fn() -> number",
      "toGrayscale": "fn() -> IGroup",
      "toObject": "fn(propertiesToInclude: [?]) -> ?",
      "tostring": "fn() -> string",
      "toSVG": "fn() -> string"
    },
    "ILine": {
      "x1": "number",
      "x2": "number",
      "y1": "number",
      "y2": "number",
      "complexity": "fn() -> number",
      "initialize": "fn(options: ?)",
      "toObject": "fn(propertiesToInclude: [?]) -> ?",
      "toSVG": "fn() -> string"
    },
    "IIntersection": {
      "appendPoint": "fn(status: string)",
      "appendPoints": "fn(status: string)",
      "init": "fn(status: string)"
    },
    "IImage": {
      "filters": "?",
      "applyFilters": "fn(callback: ?)",
      "clone": "fn(callback?: ?, propertiesToInclude?: ?) -> IObject",
      "complexity": "fn() -> number",
      "getElement": "fn() -> HTMLImageElement",
      "getOriginalSize": "fn() -> ret1",
      "getSrc": "fn() -> string",
      "initialize": "fn(options: ?)",
      "render": "fn(ctx: CanvasRenderingContext2D, noTransform: bool)",
      "setElement": "fn(element: ?) -> IImage",
      "toObject": "fn(propertiesToInclude: ?) -> ?",
      "tostring": "fn() -> string",
      "toSVG": "fn() -> string"
    },
    "ICircle": {
      "complexity": "fn() -> number",
      "getRadiusX": "fn() -> number",
      "getRadiusY": "fn() -> number",
      "initialize": "fn(options: ICircleOptions) -> ICircle",
      "setRadius": "fn(value: number) -> number",
      "toObject": "fn(propertiesToInclude: ?) -> ?",
      "toSVG": "fn() -> string"
    },
    "IPath": {
      "complexity": "fn() -> number",
      "initialize": "fn(options: ?)",
      "render": "fn(ctx: CanvasRenderingContext2D, noTransform: bool)",
      "toDatalessObject": "fn(propertiesToInclude: ?) -> ?",
      "toObject": "fn(propertiesToInclude: ?) -> ?",
      "tostring": "fn() -> string",
      "toSVG": "fn() -> string"
    },
    "IPolygon": {
      "complexity": "fn() -> number",
      "initialize": "fn(options: ?)",
      "toObject": "fn(propertiesToInclude: ?) -> ?",
      "toSVG": "fn() -> string"
    },
    "IPolyline": {
      "complexity": "fn() -> number",
      "initialize": "fn(options: ?)",
      "toObject": "fn(propertiesToInclude: ?) -> ?",
      "toSVG": "fn() -> string"
    },
    "IPathGroup": {
      "complexity": "fn() -> number",
      "initialize": "fn(options: ?)",
      "isSameColor": "fn() -> bool",
      "render": "fn(ctx: CanvasRenderingContext2D)",
      "toDatalessObject": "fn(propertiesToInclude: ?) -> ?",
      "toGrayscale": "fn() -> IPathGroup",
      "toObject": "fn(propertiesToInclude: ?) -> ?",
      "tostring": "fn() -> string",
      "toSVG": "fn() -> string"
    },
    "IStaticCanvas": {
      "backgroundColor": "string",
      "backgroundImage": "string",
      "backgroundImageOpacity": "number",
      "backgroundImageStretch": "number",
      "clipTo": "fn(clipFunction: fn(context: CanvasRenderingContext2D))",
      "controlsAboveOverlay": "bool",
      "includeDefaultValues": "bool",
      "overlayImage": "string",
      "overlayImageLeft": "number",
      "overlayImageTop": "number",
      "renderOnAddition": "bool",
      "stateful": "bool",
      "EMPTY_JSON": "string",
      "supports": "fn(methodName: string) -> bool",
      "add": "fn(object: [IObject]) -> ICanvas",
      "bringForward": "fn(object: IObject) -> ICanvas",
      "calcOffset": "fn() -> ICanvas",
      "centerObject": "fn(object: IObject) -> ICanvas",
      "centerObjectH": "fn(object: IObject) -> ICanvas",
      "centerObjectV": "fn(object: IObject) -> ICanvas",
      "clear": "fn() -> ICanvas",
      "clearContext": "fn(context: CanvasRenderingContext2D) -> ICanvas",
      "complexity": "fn() -> number",
      "dispose": "fn() -> ICanvas",
      "drawControls": "fn()",
      "forEachObject": "fn(callback: fn(object: IObject), context?: CanvasRenderingContext2D) -> ICanvas",
      "getActiveGroup": "fn() -> IGroup",
      "getActiveObject": "fn() -> IObject",
      "getCenter": "fn() -> IObject",
      "getContext": "fn() -> CanvasRenderingContext2D",
      "getElement": "fn() -> HTMLCanvasElement",
      "getHeight": "fn() -> number",
      "getObjects": "fn() -> [IObject]",
      "getWidth": "fn() -> number",
      "insertAt": "fn(object: IObject, index: number, nonSplicing: bool) -> ICanvas",
      "isEmpty": "fn() -> bool",
      "item": "fn(index: number) -> IObject",
      "onBeforeScaleRotate": "fn(target: IObject)",
      "remove": "fn(object: IObject) -> IObject",
      "renderAll": "fn(allOnTop?: bool) -> ICanvas",
      "renderTop": "fn() -> ICanvas",
      "sendBackwards": "fn(object: IObject) -> ICanvas",
      "sendToBack": "fn(object: IObject) -> ICanvas",
      "setBackgroundImage": "fn(image: ?, callback: fn(), options?: ?) -> ICanvas",
      "setDimensions": "fn(object: [object Object]) -> ICanvas",
      "setHeight": "fn(height: number) -> ICanvas",
      "setOverlayImage": "fn(url: string, callback: fn(), options: ?) -> ICanvas",
      "setWidth": "fn(width: number) -> ICanvas",
      "toDatalessJSON": "fn(propertiesToInclude?: [?]) -> string",
      "toDatalessObject": "fn(propertiesToInclude?: [?]) -> string",
      "toDataURL": "fn(format: string, quality?: number) -> string",
      "toDataURLWithMultiplier": "fn(propertiesToInclude: [?]) -> string",
      "toGrayscale": "fn(propertiesToInclude: [?]) -> string",
      "toJSON": "fn(propertiesToInclude: [?]) -> string",
      "toObject": "fn(propertiesToInclude: [?]) -> string",
      "tostring": "fn() -> string",
      "toSVG": "fn() -> string"
    },
    "ICanvas": {
      "_objects": "[IObject]",
      "containerClass": "string",
      "defaultCursor": "string",
      "freeDrawingColor": "string",
      "freeDrawingLineWidth": "number",
      "hoverCursor": "string",
      "interactive": "bool",
      "moveCursor": "string",
      "perPixelTargetFind": "bool",
      "rotationCursor": "string",
      "selection": "bool",
      "selectionBorderColor": "string",
      "selectionColor": "string",
      "selectionDashArray": "[number]",
      "selectionLineWidth": "number",
      "targetFindTolerance": "number",
      "containsPoint": "fn(e: Event, target: IObject) -> bool",
      "deactivateAll": "fn() -> ICanvas",
      "deactivateAllWithDispatch": "fn() -> ICanvas",
      "discardActiveGroup": "fn() -> ICanvas",
      "discardActiveObject": "fn() -> ICanvas",
      "drawDashedLine": "fn(ctx: CanvasRenderingContext2D, x: number, y: number, x2: number, y2: number, dashArray: [number]) -> ICanvas",
      "findTarget": "fn(e: MouseEvent, skipGroup: bool) -> ICanvas",
      "getActiveGroup": "fn() -> IGroup",
      "getActiveObject": "fn() -> IObject",
      "getPointer": "fn(e: ?) -> ret2",
      "getSelectionContext": "fn() -> CanvasRenderingContext2D",
      "getSelectionElement": "fn() -> HTMLCanvasElement",
      "setActiveGroup": "fn(group: IGroup) -> ICanvas",
      "setActiveObject": "fn(object: IObject, e?: ?) -> ICanvas",
      "loadFromJSON": "fn(json: ?, callback: fn())",
      "loadFromDatalessJSON": "fn(json: ?, callback: fn())"
    },
    "IPattern": {
      "initialise": "fn(options: IPatternOptions) -> IPattern",
      "toLive": "fn(ctx: CanvasRenderingContext2D) -> IPattern",
      "toObject": "fn() -> ?",
      "toSVG": "fn() -> string",
      "offsetX": "number",
      "offsetY": "number",
      "repeat": "string",
      "source": "?"
    },
    "IBrightnessFilter": {},
    "IInvertFilter": {},
    "IRemoveWhiteFilter": {},
    "IGrayscaleFilter": {},
    "ISepiaFilter": {},
    "ISepia2Filter": {},
    "INoiseFilter": {},
    "IGradientTransparencyFilter": {},
    "IPixelateFilter": {},
    "IConvoluteFilter": {},
    "ICanvasOptions": {
      "containerClass": "string",
      "defaultCursor": "string",
      "freeDrawingColor": "string",
      "freeDrawingLineWidth": "number",
      "hoverCursor": "string",
      "interactive": "bool",
      "moveCursor": "string",
      "perPixelTargetFind": "bool",
      "rotationCursor": "string",
      "selection": "bool",
      "selectionBorderColor": "string",
      "selectionColor": "string",
      "selectionDashArray": "[number]",
      "selectionLineWidth": "number",
      "targetFindTolerance": "number",
      "backgroundColor": "string",
      "backgroundImage": "string",
      "backgroundImageOpacity": "number",
      "backgroundImageStretch": "number",
      "controlsAboveOverlay": "bool",
      "includeDefaultValues": "bool",
      "overlayImage": "string",
      "overlayImageLeft": "number",
      "overlayImageTop": "number",
      "renderOnAddition": "bool",
      "stateful": "bool"
    },
    "IPatternOptions": {
      "source": "?",
      "offsetX": "number",
      "offsetY": "number",
      "repeat": "string"
    },
    "IRectOptions": {
      "x": "number",
      "y": "number",
      "rx": "number",
      "ry": "number"
    },
    "ITriangleOptions": {},
    "Rect": {
      "fromElement": "fn(element: SVGElement, options: IRectOptions) -> IRect",
      "fromObject": "fn(object: ?) -> IRect",
      "prototype": "?"
    },
    "Triangle": {},
    "Canvas": {
      "EMPTY_JSON": "string",
      "supports": "fn(methodName: string) -> bool",
      "prototype": "?"
    },
    "StaticCanvas": {
      "EMPTY_JSON": "string",
      "supports": "fn(methodName: string) -> bool",
      "prototype": "?"
    },
    "Pattern": {
      "prototype": "?"
    },
    "Circle": {
      "ATTRIBUTE_NAMES": "[string]",
      "fromElement": "fn(element: SVGElement, options: ICircleOptions) -> ICircle",
      "fromObject": "fn(object: ?) -> ICircle",
      "prototype": "?"
    },
    "Group": {},
    "Line": {
      "ATTRIBUTE_NAMES": "[string]",
      "fromElement": "fn(element: SVGElement, options: ?) -> ILine",
      "fromObject": "fn(object: ?) -> ILine",
      "prototype": "?"
    },
    "Intersection": {
      "intersectLineLine": "fn(a1: ?, a2: ?, b1: ?, b2: ?)",
      "intersectLinePolygon": "fn(a1: ?, a2: ?, points: ?)",
      "intersectPolygonPolygon": "fn(points1: ?, points2: ?)",
      "intersectPolygonRectangle": "fn(points: ?, r1: ?, r2: ?)"
    },
    "Path": {
      "fromElement": "fn(element: SVGElement, options: ?) -> IPath",
      "fromObject": "fn(object: ?) -> IPath"
    },
    "PathGroup": {
      "fromObject": "fn(object: ?) -> IPathGroup",
      "prototype": "?"
    },
    "Point": {
      "prototype": "?"
    },
    "Object": {
      "prototype": "?"
    },
    "Polygon": {
      "fromObject": "fn(object: ?) -> IPolygon",
      "fromElement": "fn(element: SVGElement, options: ?) -> IPolygon",
      "prototype": "?"
    },
    "Polyline": {
      "fromObject": "fn(object: ?) -> IPolyline",
      "fromElement": "fn(element: SVGElement, options: ?) -> IPolyline",
      "prototype": "?"
    },
    "Text": {},
    "Image": {
      "fromURL": "fn(url: string) -> IImage",
      "prototype": "?",
      "filters": {
        "Grayscale": {},
        "Brightness": {},
        "RemoveWhite": {},
        "Invert": {},
        "Sepia": {},
        "Sepia2": {},
        "Noise": {},
        "GradientTransparency": {},
        "Pixelate": {},
        "Convolute": {}
      }
    },
    "util": {
      "addClass": "fn(element: HTMLElement, className: string)",
      "addListener": "fn(element: ?, eventName: string, handler: ?)",
      "animate": "fn(options: [object Object])",
      "createClass": "fn(parent: ?, properties: ?)",
      "degreesToRadians": "fn(degrees: number) -> number",
      "falseFunction": "fn() -> fn()",
      "getById": "fn(id: HTMLElement) -> HTMLElement",
      "getElementOffset": "fn(element: ?) -> ret3",
      "getPointer": "fn(event: Event)",
      "getRandomInt": "fn(min: number, max: number)",
      "getScript": "fn(url: string, callback: ?)",
      "groupSVGElements": "fn(elements: [?], options: ?, path?: string)",
      "loadImage": "fn(url: ?, callback: ?, context: ?)",
      "makeElement": "fn(tagName: string, attributes: ?)",
      "makeElementSelectable": "fn(element: HTMLElement)",
      "makeElementUnselectable": "fn(element: HTMLElement)",
      "populateWithProperties": "fn(source: ?, destination: ?, properties: ?) -> [?]",
      "radiansToDegrees": "fn(radians: number) -> number",
      "removeFromArray": "fn(array: [?], value: ?)",
      "removeListener": "fn(element: HTMLElement, eventName: ?, handler: ?)",
      "request": "fn(url: ?, options: ?)",
      "requestAnimFrame": "fn(callback: ?, element: ?)",
      "setStyle": "fn(element: HTMLElement, styles: ?)",
      "toArray": "fn(arrayLike: ?) -> [?]",
      "toFixed": "fn(number: ?, fractionDigits: ?)",
      "wrapElement": "fn(element: HTMLElement, wrapper: ?, attributes: ?)"
    }
  },
  "!name": "fabricjs.d.ts",
  "!define": {
    "ret": {
      "left": "number",
      "top": "number",
      "width": "number",
      "height": "number"
    },
    "ret1": {
      "width": "number",
      "height": "number"
    },
    "ret2": {
      "x": "number",
      "y": "number"
    },
    "ret3": {
      "left": "number",
      "top": "number"
    }
  }
}
