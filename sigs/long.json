{
  "dcodeIO": {
    "LongStatic": {
      "MAX_SIGNED_VALUE": "Long",
      "MAX_UNSIGNED_VALUE": "Long",
      "MAX_VALUE": "Long",
      "MIN_SIGNED_VALUE": "Long",
      "MIN_UNSIGNED_VALUE": "Long",
      "MIN_VALUE": "Long",
      "NEG_ONE": "Long",
      "ONE": "Long",
      "ZERO": "Long",
      "from28Bits": "fn(part0: number, part1: number, part2: number, unsigned?: bool) -> Long",
      "fromBits": "fn(lowBits: number, highBits: number, unsigned?: bool) -> Long",
      "fromInt": "fn(value: number, unsigned?: bool) -> Long",
      "fromNumber": "fn(value: number, unsigned?: bool) -> Long",
      "fromString": "fn(str: string, unsigned?: bool, radix?: number) -> Long"
    },
    "Long": {
      "high": "number",
      "low": "number",
      "unsigned": "bool",
      "add": "fn(other: Long) -> Long",
      "and": "fn(other: Long) -> Long",
      "clone": "fn() -> Long",
      "compare": "fn(other: Long) -> number",
      "div": "fn(other: Long) -> Long",
      "equals": "fn(other: Long) -> bool",
      "getHighBits": "fn() -> number",
      "getHighBitsUnsigned": "fn() -> number",
      "getLowBits": "fn() -> number",
      "getLowBitsUnsigned": "fn() -> number",
      "getNumBitsAbs": "fn() -> number",
      "greaterThan": "fn(other: Long) -> bool",
      "greaterThanOrEqual": "fn(other: Long) -> bool",
      "isEven": "fn() -> bool",
      "isNegative": "fn() -> bool",
      "isOdd": "fn() -> bool",
      "isZero": "fn() -> bool",
      "lessThan": "fn(other: Long) -> bool",
      "lessThanOrEqual": "fn(other: Long) -> bool",
      "modulo": "fn(other: Long) -> Long",
      "multiply": "fn(other: Long) -> Long",
      "negate": "fn() -> Long",
      "not": "fn() -> Long",
      "notEquals": "fn(other: Long) -> bool",
      "or": "fn(other: Long) -> Long",
      "shiftLeft": "fn(numBits: number) -> Long",
      "shiftRight": "fn(numBits: number) -> Long",
      "shiftRightUnsigned": "fn(numBits: number) -> Long",
      "subtract": "fn(other: Long) -> Long",
      "toInt": "fn() -> number",
      "toNumber": "fn() -> number",
      "toSigned": "fn() -> Long",
      "toUnsigned": "fn() -> Long",
      "xor": "fn(other: Long) -> Long",
      "!type": "LongStatic"
    }
  },
  "long": "Long",
  "!name": "long.d.ts"
}
